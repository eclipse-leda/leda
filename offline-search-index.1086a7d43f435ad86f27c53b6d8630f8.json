[{"body":"Release artifacts: https://github.com/eclipse-leda/leda-distro/releases/tag/v0.1.0-M1\nArtifact Download Size Leda Raspberry Pi 4 eclipse-leda-raspberrypi.tar.xz 578 MB Leda QEMU ARM64 eclipse-leda-qemu-arm64.tar.xz 381 MB Leda QEMU x86_64 eclipse-leda-qemu-x86_64.tar.xz 465 MB Note: You need to uncompress eclipse-leda-raspberrypi.tar.xz multiple times until the plain .wic file is extracted, which can be flashed.\nAfter download, continue with Getting Started\nRelease Notes First pre-release of Eclipse Leda quickstart images, based on Yocto LTS release Kirkstone with Long Term Support until at least April 2024.\nMinimal feature set to run software-defined-vehicle applications (such as Eclipse Velocitas apps) using COVESA Vehicle Signal Specification and the Eclipse Kuksa.VAL Databroker on virtual devices (QEMU), in Docker, or on physical consumer-grade devices (Raspberry Pi 4 64-Bit) for development, demonstration and prototyping purposes.\nIncludes example applications from Kuksa:\nExample Seat Service Example HVAC Service DBC Feeder replays a Tesla Model 3 CAN-Dump and feeds it into Kuksa.VAL Databroker Change log Replaced k3s with Eclipse Kanto Container Management Replaced packages licensed under GPLv3 and similar licenses with alternatives Replaced Grub with U-Boot Replaced nano with kibi Removed readline library Removed bash RAUC Updates Bundles available for each image type (Full, Minimal, Rescue) Enabled verity format by default Fixed the compatible configuration string Added and updated Leda utilities Build infrastructure improvements Builds for Dockerized images Switched to a BitBake build using kas for layer management Added automated system tests using Robot framework and Dockerized environments General cleanup of recipes, dependencies and structuring of the meta-leda sublayers to improve reusability Automatic deployment of containers based on container manifests with ad-hoc updates (filewatcher in kanto-auto-deployer) Preparation for AirGap installation of containers General improvements, such as Wifi network management Known Issues The following issues were known to the development team before starting the 0.1.0-M1 build cycle. They have been prioritized as non-critical and may be fixed for later releases.\nRAUC can not install in stream-mode on Raspberry Pi sdv-motd is confused by wlan interfaces growdisk on RPi4 with sfdisk instead of parted (signaling kernel) Partition sizes are not multiple of 4096 byte for Rauc block-hash-index sdv-provision produces an empty Device ID Missing/Outdated Kuksa databroker-cli sdv-image-minimal missing SDV edge components Home/End key navigation does not work with putty OSS IP Compliance Report Report scan-report-web-app_0.1.0-M1.html\nIncorrectly detected license “biosl-4.0”\nRule: OCaaS Policy A9 License with no classification Message: The license LicenseRef-scancode-biosl-4.0 found for package ‘Unmanaged::leda-distro-fork:0716b55ff8f57319263d67ee16d90e64588b391d’ is not categorized and / or evaluated for usage. Evaluation: This license seems to be detected incorrectly by the tool being used, as it is an internal, proprietary license which is not used in the Eclipse Leda project. Incorrectly detected license “GPL-1.0” for ORT configuration file\nRule: OCaaS Policy C1 Strict Copyleft Message: License GPL-1.0-only found for package ‘Unmanaged::leda-distro-fork:0716b55ff8f57319263d67ee16d90e64588b391d’ is categorized as strict-copyleft which must not be used for BT11 Open Source Development service applications. Evaluation: The scan tool incorrectly detects its own configuration file (.ort.original.yml) as being licensed under GPL-v1.0 Incorrectly detected license “GPL-2.0-only” for standard Leda license header (which is Apache Software License)\nRule: OCaaS Policy C1 Strict Copyleft Message: License GPL-2.0-only found for package ‘Unmanaged::leda-distro-fork:0716b55ff8f57319263d67ee16d90e64588b391d’ is categorized as strict-copyleft which must not be used for BT11 Open Source Development service applications. Evaluation: The scan tool incorrectly detects the Apache License header as GPL-2.0 license text Incorrectly detected license “proprietary”\nRule: OCaaS Policy C3 Commercial Message: License LicenseRef-scancode-proprietary-license found for package ‘Unmanaged::leda-distro-fork:0716b55ff8f57319263d67ee16d90e64588b391d’ is categorized as commercial and requires special handling. Evaluation: The scan tool incorrectly detects its own configuration file (.ort.original.yml) as being licensed under proprietary licenses. ","categories":"","description":"","excerpt":"Release artifacts: …","ref":"/leda/docs/about/releases/0.1.0/leda-0.1.0-m1/","tags":"","title":"Milestone 0.1.0-M1"},{"body":"Kanto container management binds to a unix socket (default: /run/container-management/container-management.sock) and exposes a gRPC interface which can be used to obtain all the functionality of the kanto-cm cli programatically.\nThe easiest way to access this API through Rust is by creating a new Rust crate:\n$ cargo new talk-to-kanto Dependencies The most feature-rich gRPC library for Rust right now is tonic. Add the following to your Cargo.toml to make tonic and the tokio async runtime available to your crate. Tower and hyper are needed to be able to bind to the unix socket.\n[dependencies] prost = \"0.11\" tokio = { version = \"1.0\", features = [ \"rt-multi-thread\", \"time\", \"fs\", \"macros\", \"net\",] } tokio-stream = { version = \"0.1\", features = [\"net\"] } tonic = {version = \"0.8.2\" } tower = { version = \"0.4\" } http = \"0.2\" hyper = { version = \"0.14\", features = [\"full\"] } serde = { version = \"1.0.147\", features = [\"derive\"] } serde_json = { version = \"1.0.89\", default-features = false, features = [\"alloc\"] } [build-dependencies] tonic-build = \"0.8.2\" Compiling protobufs The easiest way to obtain the kanto-cm .proto files is to add the container management repo in your project root as a git submodule:\n$ git submodule init $ git submodule add https://github.com/eclipse-kanto/container-management.git $ git submodule update --init --recursive You should now have the container-management repository available.\nTo build the .proto files during compile time, define a custom build.rs in the project root\n$ touch build.rs Add the following main function to the build.rs:\nfn main() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e { tonic_build::configure() .build_server(false) .include_file(\"mod.rs\") .type_attribute(\".\", \"#[derive(serde::Serialize, serde::Deserialize)]\") .compile( \u0026[\"api/services/containers/containers.proto\"], \u0026[\"container-management/containerm/\"], )?; Ok(()) } Here it is important to know that tonic does not like deeply nested protobufs such as those for kanto-cm. That is why the line .include_file(\"mod.rs\") re-exports everything in a seperate module which can later be included in the main.rs file.\n\"#[derive(serde::Serialize, serde::Deserialize)]\" makes all structures (de-)serializable via serde.\nImporting generated Rust modules Now in src/main.rs add the following to import the generated Rust modules:\npub mod cm { tonic::include_proto!(\"mod\"); } use cm::github::com::eclipse_kanto::container_management::containerm::api::services::containers as cm_services; use cm::github::com::eclipse_kanto::container_management::containerm::api::types::containers as cm_types; Now all kanto-cm services as namespaced under cm_services.\nObtaining a unix socket channel To obtain a unix socket channel:\nuse tokio::net::UnixStream; use tonic::transport::{Endpoint, Uri}; use tower::service_fn; let socket_path = \"/run/container-management/container-management.sock\"; let channel = Endpoint::try_from(\"http://[::]:50051\")? .connect_with_connector(service_fn(move |_: Uri| UnixStream::connect(socket_path))) .await?; This is a bit of a hack, because currently, tonic+tower don’t support binding directly to an unix socket. Thus in this case we attemp to make an http connection to a non-existent service on port 5051. When this fails, the fallback method connect_with_connector() is called where a tokio UnixStream is returned and the communication channel is generated from that.\nMaking a simple gRPC call to kanto-cm All that is left is to use the opened channel to issue a simple “list containers” request to kanto.\n// Generate a CM client, that handles containers-related requests (see protobufs) let mut client = cm_services::containers_client::ContainersClient::new(channel); let request = tonic::Request::new(cm_services::ListContainersRequest {}); let response = client.list(request).await?; Since we made all tonic-generated structures (de-)serializable we can use serde_json::to_string() to print the response as a json string.\nprintln!(\"{}\", serde_json::to_string(\u0026response)?); ","categories":"","description":"","excerpt":"Kanto container management binds to a unix socket (default: …","ref":"/leda/docs/build/dev-and-maintenance/rust/notes-on-kanto-grpc/","tags":"","title":"Communicating with Кanto-CM via gRPC"},{"body":"The Leda project aims to provide a BitBake meta-layer for building custom images within the SDV context. The Leda quickstart image serves as an experimentation and development platform but is not production-ready. The focus of the meta-leda meta-layer is to offer reusable components for custom SDV images.\nThis documentation section is aimed at anyone who wishes to build such a custom image.\nHardware The Leda Quickstart image directly provides BSP-recipes for the following platforms:\nQEMUx86-64 (64 bit) QEMUARM64 (64 bit) QEMUARM (32 bit) Raspberry Pi 4B (64 bit) Other hardware would require customizing your image with additional BSP-layers.\nkas and meta-layers We recommend (and use for the quickstart image) the kas tool developed by Siemens as a way to help with reproducible builds. It is, however, not required and you would still need to define your own distro meta-layer on top of meta-leda. The Leda quickstart image kas-files can be found here: leda-distro/kas. Most of the distro-configuration can be found in the common-kirkstone.yaml file.\nOther than meta-leda you will need the following external meta-layers:\nPoky - The base poky distro meta-openembedded - Busybox, systemd, and other core packages meta-rauc - RAUC integration meta-kanto - Kanto container management meta-virtualization - containerd From here on we will assume that you are working with kas as your main build tool.\nSetting up your custom image Create a new repository for your distro. Create a top-level container meta-layer that would contain your distro-specific configurations which will be explained below.\nIn the root of the repository create a .config.yaml that would be used by kas to build your image. The minimal kas-config file can be found in the tool’s official documentation Project Configuration.\nReferencing leda-distro/kas/common-kirkstone.yaml, add to this minimal configuration all required meta-layers from above and sub-layers from meta-leda you will need.\nAdd your custom container layer (you can reference meta-layers by path in kas) to the kas-config. Reference: meta-leda/kas/.config-components.yaml.\nFrom this point on you can use kas build from the root of your repository or kas build /path/to/.config.yaml from anywhere to start the build process.\nGeneral distro configuration The place you should start is by configuring your custom distribution. The BitBake mechanism for doing so can be found in the official BitBake documentation: 22 Creating Your Own Distribution.\nAs a working example, you can use the Leda-distro config file: meta-leda/meta-leda-distro/conf/distro/leda.conf. We will now go through some of the lines in the leda.conf:\nrequire conf/distro/include/buildinfo.inc # -\u003e Defines entries for /etc/build require conf/distro/include/leda-distro-features.inc # -\u003e Defines the quickstart image features. Use it as a guide for your distro. require conf/distro/include/leda-package-blacklist.inc # -\u003e Defines blacklisted packages (e.g. alsa) include conf/machine/${MACHINE}-extra.conf # -\u003e Defines ${MACHINE}-specific configuration files FSTAB, wks, etc. Would be elaborated on further down. QB_KERNEL_CMDLINE_APPEND = \"net.ifnames=0 panic=5 ip=dhcp ip=192.168.7.2::192.168.7.1:255.255.255.0::eth0:off rootwait\" # -\u003e QEMU-specific kernel command line with which all images/partitions are booted The only required contents of your distro-config file are the following (all other includes and distro features are optional):\n# in the main leda.conf DISTRO=\"\u003cdistro_name\u003e\" # should be the same as the \u003cdistro_name\u003e.conf DISTRO_NAME=\"\u003clong_distro_name\u003e\" DISTRO_VERSION=\"\u003cversion\u003e\" DISTRO_CODENAME=\"\u003cdistro_codename\u003e\" # imported with require conf/distro/include/leda-distro-features.inc in Leda Quickstart DISTRO_FEATURES:append = \" virtualization\" # required for containerd DISTRO_FEATURES:append = \" sdv\" # required by the sdv-packagegroups DISTRO_FEATURES:append = \" rauc\" # required for the rauc integration Machine-specific configs The “extra” machine specific-configs the meta-leda-bsp layer provides can be found here: meta-leda-bsp/conf/machine. These files here provide examples on how to configure machine specific options such as the Linux Kernel image type, bootloader configuration, etc. E.g. if you need a working example of how to set up U-Boot for your machine, you might reference common-qemu-arm.inc since the Leda quickstart QEMUARM (64bit and 32bit) images use U-Boot as a bootloader.\nPartitioning your storage The Leda quickstart image uses RAUC as a way to do A/B partition type updates. We also add a third “rescue” partition and a persistent “data” partition. Generally, the Leda quickstart image partitions its storage as so:\n---------------------------------------------------------------------------------- | | | | | | | | | | | | | | | VFAT | NO-FS | EXT4 | EXT4 | EXT4 | EXT4 | | (BOOT) | (GRUBENV) | (RESCUE) | (SDV_A) | (SDV_B) | (DATA) | | | | | | | | | | | | | | | ---------------------------------------------------------------------------------- Where the partitions SDV_A and SDV_B are managed/updated by RAUC. They are read-only (SDV_A has the sdv-image-full image installed, SDV_B - sdv-image-minimal). All container/user data is in the last DATA partition (grows dynamically to fill out the storage). The boot partition contains the U-Boot/Grub bootloaders and their environment.\nGRUBENV is reserved for future boot-partition updates and saving the GRUB/U-Boot environment. Currently unused in the Leda quickstart image.\nIn the RESCUE partition the sdv-image-rescue image is installed, which is a “fallback” image for recovering the system if both partitions SDV_A and SDV_B get corrupted.\nThis partition scheme has to be seen, as of course, a suggestion (you are free to use any RAUC-compatible one) but is important for understanding the later sections on this page.\nWIC/WKS To partition your storage you will need to define your custom .wks-file that defines the partition table type, the bootloader, and the order and size of partitions.\nMore details on OpenEmbedded Kickstart files can be found in the official documentation for Yocto: OpenEmbedded Kickstart (.wks) Reference. In short, .wks-files provide a reproducible way to partition your storage.\nIMPORTANT: the path to your .wks-file should be provided via the WKS_FILES= BitBake variable. For example, in the quickstart image for QEMUARM64 this variable is set in qemuarm64-extra.conf.\nAgain, example .wks/.wks.in files are provided in meta-leda/meta-leda-distro/wic. We will now take a look at the qemuarm64 .wks-file:\nbootloader --ptable gpt part --source bootimg-partition --ondisk vda --fstype=vfat --label BOOT --active --align 4096 --size 100 --use-uuid # Second Bootloader Partition (empty, for future updates) part --fixed-size 10M --ondisk vda --align 4096 --no-table # Empty partition (on x86, this is grubenv - we store RAUC Status here as well) part --fixed-size 10M --ondisk vda --align 4096 part --source rootfs --rootfs-dir=sdv-image-rescue --ondisk vda --fstype=ext4 --label rescue --align 1024 part --source rootfs --rootfs-dir=sdv-image-full --ondisk vda --fstype=ext4 --label root_a --align 4096 part --source rootfs --rootfs-dir=sdv-image-minimal --ondisk vda --fstype=ext4 --label root_b --align 4096 part --fixed-size 2048M --source rootfs --rootfs-dir=sdv-image-data --ondisk vda --fstype=ext4 --label data --align 4096 As you can see it directly implements the partition scheme described above. The partition table type is defined with the bootloader --ptable gpt line and every line after that corresponds to a partition from the diagram above. Please note, that the order in which the part lines in the .wks-file appear would be the order of the partitions.\nHere it is important to note that for the VFAT boot partition the label should be uppercase and you should add the --use-uuid option. Otherwise, it might not be mounted properly in the final Linux distro.\nFSTAB .wks-files partition your storage, define partition tables, filesystem types and install images, but do nothing about actually mounting said partitions in the Linux userspace. This is the job of the FSTAB file. More information about writing a FSTAB file can be found in the Linux FSTAB manpage.\nFSTAB files are installed through the OE-core recipe base-files_\u003cversion\u003e.bb. To install a custom FSTAB in your image create a recipes-core/base-files directory in your container meta-layer and create a base-files_%.bbappend inside. Use this .bbappend to prepend the directory containing your custom FSTAB to the FILESEXTRAPATHS list for that recipe.\nAn example can be found in meta-leda/meta-leda-distro/recipes-core/base-files/ where you would find the needed .bbappend file and the meta-leda/meta-leda-distro/recipes-core/base-files/base-files/\u003cmachine\u003e directory containing the actual FSTAB files.\nLet’s investigate the Leda qemuarm64 FSTAB as an example:\n# Eclipse Leda - fstab for qemuarm64 RAUC redundant boot setup /dev/root / auto defaults,noatime 1 1 proc /proc proc defaults 0 0 devpts /dev/pts devpts mode=0620,ptmxmode=0666,gid=5 0 0 tmpfs /run tmpfs mode=0755,nodev,nosuid,strictatime 0 0 tmpfs /var/volatile tmpfs defaults 0 0 # Add mount for boot, grubenv and data partition LABEL=BOOT /boot vfat defaults,nofail,noatime 0 0 LABEL=grubenv /grubenv auto defaults,nofail,noatime 0 0 LABEL=data /data auto defaults,nofail,noatime 0 2 Here only the BOOT, grubenv, and data partitions are mounted by label.\nThe root partition depends on the image (sdv-image-full/minimal/rescue) that has been currently booted. Here /dev/root is a “special variable” that is set from the root= option in the kernel command line. This is important to be able to boot from the different partitions via a custom bootloader script (and as a consequence these partitions are to be managed by RAUC).\nIntegrating RAUC Whether you are using GRUB or U-Boot, integrating RAUC requires custom bootloader scripting. The official documentation for integrating RAUC can be found here: 6. Integration.\nThis documentation can, however, be quite complicated. Concise, self-contained examples for proper integration of the most popular targets can be found in the meta-rauc-community repository.\nThe RAUC system config file Irrespective of your bootloader, you need to provide a RAUC system.conf file describing the slots, the bootloader, certificates, etc. This is best explained via an example: meta-leda/meta-leda-bsp/recipes-bsp/rauc/files/qemuarm64/system.conf\nGRUB The only Leda quickstart image that uses GRUB as a bootloader is for qemux86_64. It directly uses the meta-rauc-community/meta-rauc-qemux86/ meta-layer.\nU-Boot Note: The following sub-sections are based on the official U-Boot source which the OE recipes use. Your BSP may provide another hardware-specific fork of U-Boot that may or may not be entirely compatible with this integration guide. (e.g. fw_utils not being available)\nThe rpi4-64 target, similar to qemux86_64, directly uses meta-rauc-community/meta-rauc-raspberrypi which also has a great README, explaining the details of the integration. This meta-layer includes quite a lot of rpi4-64 specific recipes and depends on the fact that the meta-raspberrypi layer provides a recipe for custom boot scripts. Such a recipe, in general, for U-Boot-based targets is not available and has to be manually created. That is why, meta-rauc-community/meta-rauc-sunxi might provide a better example in a more general case.\nThe Leda quickstart images that use U-boot as a bootloader are based on the ideas in meta-rauc-sunxi. We will now go into more detail on how to integrate such a U-Boot target that requires a more “from-scratch” integration.\nThe U-Boot environment and “slot-counting” RAUC “talks” to the bootloader and tracks how many times you have tried to boot a slot via the bootloader environment variables “BOOT_ORDER” and “BOOT_\u003cSLOT_NAME\u003e_LEFT”. Thus, U-Boot should be able to save its environment in a file (uboot.env) somewhere that can be read by RAUC from userspace (the booted Linux image). This can be the VFAT BOOT partition, a flash chip, EEPROM, etc. which can be mounted in userspace and read by RAUC.\nNote that while most of the steps for each of these storage options are the same, they might need some specific configuration. For example, the build for the Leda Quickstart QEMUARM64 patches the U-Boot defconfig file to point U-Boot to save its environment in the VFAT BOOT partition env_in_fat_qemuarm.patch. You can instead directly provide a custom defconfig in your machine-specific config (ref: qemuarm64-extra.conf).\nuboot_%.bbappend After ensuring that the device containing the U-Boot environment is correctly mounted in userspace (e.g. the BOOT partition as /boot). Create a custom uboot_%.bbappend file and as an example, you can use meta-leda/meta-leda-bsp/recipes-bsp/uboot/uboot-targets/qemuarm64.inc. This .bbappend should, generally do two things:\nTake your custom boot.cmd.in script and compile it to a boot.scr (or boot.scr.uimg) file with mkimage.\nInstall the fw_env.config file in /etc/fw_env.config.\nOptional: Apply any patches, custom settings, etc.\nNote: if you are building for more than one U-Boot-based target extensive use of machine-specific overrides is recommended.\nCustom boot.scr If a custom boot.scr that was compiled with the mkimage tool is in the same partition as the U-Boot binary, U-Boot will run that on boot. This is the point of integration of RAUC and U-Boot. All concepts behind setting up such a script are explained in the rauc documentation.\nGenerally, as a starting point, you can use one of the custom scripts in meta-rauc-community or those in meta-leda: meta-leda/meta-leda-bsp/recipes-bsp/uboot/files/qemuarm64/boot.cmd.in.\nIMPORTANT: Be consistent with your slot names!\nAs it can be seen in the examples, after the “slot retries counting” part of the script is done, the root= and rauc.slot= kernel command line arguments are set, the U-Boot environment is saved in the VFAT boot partition as uboot.env and the selected image is booted.\nThen, from userspace RAUC reads the kernel command line (/proc/cmdline) and the uboot.env (through the fw_printenv/fw_setenv utilities) and decides (based on that) whether a slot is “Good” or “Bad”.\nfw_env.config For RAUC to be able to read and modify the U-Boot environment from userspace, it needs the fw_printenv/fw_setenv utilities to be installed in the distro. This can be done by installing the packages: \"u-boot-fw-utils u-boot-env libubootenv\" through IMAGE_INSTALL or RDEPENDS in a recipe.\nThis, however, is not enough since these utilities, in turn, have to be configured to know where U-Boot stores its environment. This is done through the /etc/fw_env.config file. An example of such a file with all of its different variations can be seen here fw_env.config.\nThe one for Leda quickstart contains a single line:\n/boot/uboot.env 0x0000 0x4000 If you are unsure of the environment size and the device offset, check the defconfig file for your machine, where these two values should be specified as U-Boot compile-time configuration parameters.\nConclusion (U-Boot \u003c-\u003e RAUC integration checklist) Given the following:\nYou have setup U-Boot to save its environment in a known place (device, partition, etc).\nThis device storing the U-Boot environment is mounted in userspace.\nYou have provided a custom boot-script that does the RAUC slot counting.\nYou have installed fw_printenv/fw_setenv and properly setup the /etc/fw_env.config file.\nThe RAUC mark-good-service should successfully go through and mark both RAUC slots as “GOOD”.\nFinal steps - building and flashing Build:\nRun kas build in the root of your repository and wait for the build to finish successfully. If any BitBake errors occur during the build process, you need to fix them before a final flashable image can be built.\nFlash:\nObtain the image-name.wic.bz2 and image-name.wic.bmap files from the tmp/deploy/images directory. Mount your storage and use bmaptool to quickly flash the built image. More information on flashing can be found in the Running on Raspberry Pi section of this documentation.\nIf everything works as intended you should see in the U-Boot output that it found /boot.scr and started executing it. This should lead to a successful boot of your custom Linux distro image with the RAUC-mark-good.service being marked as [OK] in the systemd logs (if your distro uses systemd).\n","categories":"","description":"","excerpt":"The Leda project aims to provide a BitBake meta-layer for building …","ref":"/leda/docs/customization/custom-images/","tags":"","title":"Custom Distros"},{"body":"","categories":"","description":"","excerpt":"","ref":"/leda/docs/build/dev-and-maintenance/rust/","tags":"","title":"Rust Utils"},{"body":"A general utility for monitoring the status of important sdv services/containers/devices.\nChecking the status of kanto-cm containers Kanto CM containers are split into two groups - required and optional. Both groups are checked, but only a warning is issued when an optional container is missing/not working.\nGeneral code for checking the status is:\nif [ -n \"$KANTO_CM_CONTAINERS_OPT\" ]; then printf -- \"$SEPARATOR\\n\" printf -- \"${COL_WHITE}[Kanto CM Containers (OPTIONAL)]${COL_NC}\\n\" if [[ ${CM_STATUS} != *\"inactive\"* ]]; then # \"Optional containers\" KANTO_CM_LIST=$(${KANTO_CMD} list) # removes tabs, splits on pipe and takes the container name column ($2) FOUND_CONTAINERS=($(echo \"$KANTO_CM_LIST\" | awk -F'|' '{gsub(/\\t/, \"\"); print $2}')) # array with all kanto container names # removes tabs, splits on pipe and takes the container status colum ($4) FOUND_CONTAINERS_STATES=($(echo \"$KANTO_CM_LIST\" | awk -F'|' '{gsub(/\\t/, \"\"); print $4}')) # array with all kanto container states KANTO_CM_CONTAINERS_ARR=( $KANTO_CM_CONTAINERS_OPT ) for expectedCtr in ${KANTO_CM_CONTAINERS_ARR[@]}; do CTR_IDX=$(get_array_element_index ${expectedCtr} ${FOUND_CONTAINERS[@]}) if [ ! -z $CTR_IDX ]; then status=${FOUND_CONTAINERS_STATES[$CTR_IDX]} if [ \"$status\" = \"Running\" ]; then printf \" * %-40s : $TEXT_OK\\n\" \"${expectedCtr}\" else printf \" * %-40s : $TEXT_WARN (%s)\\n\" \"${expectedCtr}\" \"$status\" fi else printf \" * %-40s : $TEXT_WARN (%s)\\n\" \"${expectedCtr}\" \"NOT FOUND\" fi done else printf \" * %-40s : $TEXT_FAIL (%s)\\n\" \"Kanto Container Management\" \"Unavailable\" fi fi Here it is important to know that kanto-cm list outputs the list of containers in a different order every time it’s called. That is why, kanto-cm list is invoked once and its output is stored in a variable:\nKANTO_CM_LIST=$(${KANTO_CMD} list) Output:\nID |Name |Image |Status |Finished At |Exit Code | ------------------------------------- |------------------------------------- |------------------------------------------------------------ |---------- |------------------------------ |---------- | d82a406e-80d7-4d2c-8044-3799544fc39a |vum |ghcr.io/eclipse-leda/leda-contrib-vehicle-update-manager/vehicleupdatemanager:main-1d8dca55a755c4b3c7bc06eabfa06ad49e068a48 |Running | |0 | 0f079856-767c-4e8d-b4df-a2323392849f |cloudconnector |ghcr.io/eclipse-leda/leda-contrib-cloud-connector/cloudconnector:main-47c01227a620a3dbd85b66e177205c06c0f7a52e |Exited |2023-01-31T11:58:01.564126452Z |1 | e4cf317e-c2d3-42c7-8f12-8ecf6f9d5d7a |databroker |ghcr.io/eclipse/kuksa.val/databroker:0.2.5 |Running | |0 | 6440a9b6-4fb8-4735-b3de-484286ac705b |feedercan |ghcr.io/eclipse/kuksa.val.feeders/dbc2val:v0.1.1 |Running | |0 | efbd572b-3331-4f19-9b17-7c69511ec5ca |hvacservice-example |ghcr.io/eclipse/kuksa.val.services/hvac_service:v0.1.0 |Running | |0 | 6d9a6f07-1659-4b51-9ddb-6e9ade64f2fd |seatservice-example |ghcr.io/eclipse/kuksa.val.services/seat_service:v0.1.0 |Running | |0 | 06b0ddf2-7c91-41e4-9a00-4213ee361cdf |sua |ghcr.io/eclipse-leda/leda-contrib-self-update-agent/self-update-agent:build-12 |Running | |0 | So we use awk to split on pipe (column), strip unecessary tabs. print $2 then gives us the container name and print $4 - its status.\nsdv-health then proceeds to check if every container specified in the list is available and if its status is Running.\nNote: Exited is considered a fail-state.\nChecking kanto-cm socket This is a simple test -s check for the default socket path.\n","categories":"","description":"","excerpt":"A general utility for monitoring the status of important sdv …","ref":"/leda/docs/build/dev-and-maintenance/shell/sdv-health/","tags":"","title":"sdv-health"},{"body":"","categories":"","description":"","excerpt":"","ref":"/leda/docs/build/dev-and-maintenance/shell/","tags":"","title":"Shell Utils"},{"body":"The Eclipse Leda project will provide system image “recipes” to deliver a functional Linux-based image/distribution in the context of SDV (Software Defined Vehicle), by pulling together individual contributons from the SDV and the larger OSS community.\nThe Eclipse Leda distribution will work with build scripts, package definitions, image build pipelines, etc, with the goal to pull SDV projects and dependecies from the larger OSS community into a working Linux system. Such system images (or other useful forms of delivery, as determined by the project) will be made available for consumption for anyone who is interested in working with the SDV tech stack. These deliveries take the form of container (base) images, installable/flashable image files, etc (again to be evolved by the project team according to community needs). Also in scope is concise and useful documentation for consumers of the project’s deliverables, plus a method of delivering that documentation.\nIn the context described above - the ambition of SDV to build a technology ecosystem for software-defined vehicle concern - a prime challenge will be the combination of these initially diverse components into a coherent and useful whole: all the software components in the world will not have the impact needed to transform the automotive industry unless we can make them play together coherently an form a functional portfolio. As a first step towards that goal, this proposal (Eclipse Leda) is for a “SDV distribution” project that pulls together individual contributor pieces from SDV and the larger OSS community, to deliver a functional and always-available Linux-based image/distribution with two primary goals:\nbe the crystalization point for functionally integrating diverse SDV-scope projects into a working whole\ndeliver a continually available, always working starting image for developers interested in getting going with the SDV tech stack\n","categories":"","description":"","excerpt":"The Eclipse Leda project will provide system image “recipes” to …","ref":"/leda/docs/about/","tags":"","title":"About Leda"},{"body":"Git Authentication For private repositories, we need to separately authenticate against the submodule repositories, as GitHub Codespaces will only inject a token with access rights to the current repository.\nChange to the users home directory\ncd ~ Install Git Credential Manager\ncurl -LO https://raw.githubusercontent.com/GitCredentialManager/git-credential-manager/main/src/linux/Packaging.Linux/install-from-source.sh \u0026\u0026 sh ./install-from-source.sh \u0026\u0026 git-credential-manager-core configure Configure a credential store typ, e.g. git config --global credential.credentialStore plaintext\nVerify with git config --global -l, it should show git-credential-manager-core as the credential helper.\nUpdate the submodules Run git submodule update --recursive\nSee VSCode Issue #109050 for details.\nSetup skopeo Skopeo is needed to download various files during the build:\nsudo mkdir -p /run/containers/1000 sudo chmod a+w /run/containers/1000 skopeo login ghcr.io --authfile ~/auth.json --username \u003cyour GitHub User\u003e Enter your token when asked for the password.\n","categories":"","description":"","excerpt":"Git Authentication For private repositories, we need to separately …","ref":"/leda/docs/build/devenv/github-codespaces/github-codespaces-advanced/","tags":"","title":"Advanced topics"},{"body":"Note: The configuration mentioned in this chapter is already enabled in the run-leda.sh script.\nQEMU General documentation about using CAN-Bus in Qemu: https://www.qemu.org/docs/master/system/devices/can.html\nEnabling Virtual CAN Bus interfaces (vcan) No special parameters are necessary for qemu, as vcan is virtual:\nrunqemu qemux86-64 nographic slirp qemuparams=\"-m 2048\" Bring interface up:\nip link add dev vcan0 type vcan ip link set vcan0 up Enabling CAN Bus interfaces (can) Standalone CAN within Qemu To run a standalone CAN setup, qemu must be instructed to emulate a specific CAN hardware device. We will be using the kvaser_pci device in this example:\nrunqemu qemux86-64 nographic slirp qemuparams=\"-m 2048 -object can-bus,id=canbus0 -device kvaser_pci,canbus=canbus0\" After the image has booted, load the Linux Kernel Module kvaser_pci device driver and configure the CAN-Bus device (eg bitrate) before bringing the interface up:\nroot@qemux86-64:~# modprobe kvaser_pci root@qemux86-64:~# dmesg | grep kvaser [ 9.565149] kvaser_pci 0000:00:04.0: initializing device 10e8:8406 [ 9.569308] kvaser_pci 0000:00:04.0: reg_base=00000000d5a68095 conf_addr=000000002b3c7ef6 irq=20 [ 9.596942] kvaser_pci 0000:00:04.0: xilinx version=13 number of channels=0 root@qemux86-64:~# ip link show type can 4: can0: \u003cNOARP,ECHO\u003e mtu 16 qdisc noop state DOWN mode DEFAULT group default qlen 10 link/can Configure the interface:\nroot@qemux86-64:~# ip link set can0 type can bitrate 1000000 [ 165.519919] kvaser_pci 0000:00:04.0 can0: setting BTR0=0x00 BTR1=0x14 root@qemux86-64:~# ip link set can0 up [ 186.906065] IPv6: ADDRCONF(NETDEV_CHANGE): can0: link becomes ready root@qemux86-64:~# ip link show type can 4: can0: \u003cNOARP,UP,LOWER_UP,ECHO\u003e mtu 16 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10 link/can Tunneling a CAN Interface from the Host runqemu qemux86-64 nographic slirp qemuparams=\"-m 2048 -object can-bus,id=canbus0 -object can-host-socketcan,id=canhost0,if=can0,canbus=canbus0 -device kvaser_pci,canbus=canbus0\" Bring interface up:\nip link add dev can0 type can ip link set can0 type can bitrate 1000000 ip link set can0 up ip link show type can Raspberry Pi CAN HAT Extensions Supported boards:\nBoards with a Microchip MCP251x based CAN chip, such as Waveshare CAN HAT or PiCAN 2 Verify driver is loaded:\n# dmesg | grep mcp [ 8.23543] mcp251x spi0.0 can0: MCP2515 successfully initialized Verify SocketCAN network interface shows up:\n# ip link show type can 3: can0: \u003cNOARP,ECHO\u003e mtu 16 qdisc noop state DOWN mode DEFAULT roup default qlen 10 Continue with configuring the CAN chip and bring up the SocketCAN network interface:\n# ip link set can0 type can bitrate 1000000 # ip link set can0 up # ip link show type can Linux Kernel Modules The following Linux Kernel modules are available on the quickstart images:\nNote: For QEMU, only kvaser_pci is used\nLeda main Kernel peak_pciefd - Socket-CAN driver for PEAK PCAN PCIe/M.2 FD family cards m_can - CAN bus driver for Bosch M_CAN controller m_can_pci - CAN bus driver for Bosch M_CAN controller on PCI bus m_can_platform - M_CAN driver for IO Mapped Bosch controllers softing - Softing DPRAM CAN driver cc770_platform - Socket-CAN driver for CC770 on the platform bus cc770_isa - Socket-CAN driver for CC770 on the ISA bus cc770 - cc770CAN netdevice driver ifi_canfd - CAN bus driver for IFI CANFD controller kvaser_usb - CAN driver for Kvaser CAN/USB devices etas_es58x - Socket CAN driver for ETAS ES58X USB adapters ucan - Driver for Theobroma Systems UCAN devices peak_usb - CAN driver for PEAK-System USB adapters kvaser_pciefd - CAN driver for Kvaser CAN/PCIe devices kvaser_pci - Socket-CAN driver for KVASER PCAN PCI cards f81601 - Fintek F81601 PCIE to 2 CANBUS adaptor driver sja1000_isa - Socket-CAN driver for SJA1000 on the ISA bus plx_pci - Socket-CAN driver for PLX90xx PCI-bridge cards with the SJA1000 chips sja1000 - sja1000CAN netdevice driver ems_pci - Socket-CAN driver for EMS CPC-PCI/PCIe/104P CAN cards peak_pci - Socket-CAN driver for PEAK PCAN PCI family cards sja1000_platform - Socket-CAN driver for SJA1000 on the platform bus vxcan - Virtual CAN Tunnel c_can_platform - Platform CAN bus driver for Bosch C_CAN controller c_can - CAN bus driver for Bosch C_CAN controller c_can_pci - PCI CAN bus driver for Bosch C_CAN/D_CAN controller slcan - serial line CAN interface can_dev - CAN device driver interface vcan - virtual CAN interface can-isotop - PF_CAN isotp 15765-2:2016 protocol can-gw - PF_CAN netlink gateway can-j1939 - PF_CAN SAE J1939 can-raw - PF_CAN raw protocol can-bcm - PF_CAN broadcast manager protocol can - Controller Area Network PF_CAN core Raspberry Pi The following Linux Kernel modules are available on the quickstart image for Raspberry Pi:\ncan - Controller Area Network PF_CAN core vxcan - Virtual CAN Tunnel can-dev - CAN device driver interface can-bcm - PF_CAN broadcast manager protocol can-gw - PF_CAN netlink gateway can-raw - PF_CAN raw protocol can-isotop - PF_CAN isotp 15765-2:2016 protocol can-j1939 - PF_CAN SAE J1939 vcan - virtual CAN interface slcan - serial line CAN interface mcp251x - Microchip 251x/25625 CAN driver mcp251xfd - Microchip 251xFD Family CAN controller driver ems_usb - CAN driver for EMS Dr. Thomas Wuensche CAN/USB interfaces gs_usb - Socket CAN device driver for Geschwister Schneider UG peak_usb - CAN driver for PEAK-System USB adapters ","categories":"","description":"","excerpt":"Note: The configuration mentioned in this chapter is already enabled …","ref":"/leda/docs/general-usage/running-qemu/canbus/","tags":"","title":"CAN Bus"},{"body":"Simulation of cloud connectivity Container Management starts and subscribes to edge/thing/response Cloud Connector starts and publishes the following message to edge/thing/response as soon as the connection is online: { \"deviceId\":\"\u003cnamespace\u003e:\u003cgatewayId\u003e:\u003cdeviceId\u003e\", \"tenantId\":\"\u003ctenantId\u003e\" } namespace is azure.edge for Kanto’s Azure Cloud Connector gatewayId indicates the hostname of the Azure IoT Hub deviceId is the identifier for the device, this can either be part of the Azure Connection String or part of the device authentication certificate (CN) tenantId is a configuration setting in the cloud connector Note: You can simulate the cloud connector trigger by issueing the MQTT message manually on command line:\nmosquitto_pub -t 'edge/thing/response' -m '{\"deviceId\":\"dummy-namespace:dummy-gateway:dummy-device-id\",\"tenantId\":\"dummy-tenant-id\"}' ","categories":"","description":"","excerpt":"Simulation of cloud connectivity Container Management starts and …","ref":"/leda/docs/device-provisioning/container-management/cloud-connectivity/","tags":"","title":"Cloud Connectivity"},{"body":"Setting up Development Environment in GitHub Codespaces Install the GitHub Codespaces Extension Note: When using our DevContainer, the GitHub Codespaces extension is pre-installed.\nStart VSCode Go to Extensions Search for “GitHub Codespaces” Click Install Alternatively, create a new codespace via the GitHub web interface:\nSelect a big enough machine type for Yocto/BitBake, e.g. 16 CPU. You need at leasst 50GB disk space.\nBuilding Leda in a Github Codespace After successfully obtaining and connecting to a codespace you can build Leda either with kas or manually:\nTo build with kas follow the instructions at: Building with kas\nTo build manually: Building manually\nPrivate Repositories When using GitHub Codespaces with submodules and private repositories, a separate tool for git authentication is required (see VSCode issue #109050), as the authentication token provided to the GitHub Codespaces virtual machine only allows access to the main repository.\nGit Credential Manager: https://aka.ms/gcm\nInstallation:\ncurl -LO https://raw.githubusercontent.com/GitCredentialManager/git-credential-manager/main/src/linux/Packaging.Linux/install-from-source.sh \u0026\u0026 sh ./install-from-source.sh \u0026\u0026 git-credential-manager-core configure ","categories":"","description":"","excerpt":"Setting up Development Environment in GitHub Codespaces Install the …","ref":"/leda/docs/build/devenv/github-codespaces/","tags":"","title":"Codespaces"},{"body":"Thanks for your interest in this project and in our community.\nhttps://projects.eclipse.org/projects/automotive.leda Contact Contact the project developers via the project’s “dev” list.\nhttps://accounts.eclipse.org/mailing-list/leda-dev Developer resources Information regarding source code management, builds, coding standards, and more.\nhttps://projects.eclipse.org/projects/automotive.leda/developer The project maintains the following source code repositories\nhttps://github.com/eclipse-leda/leda https://github.com/eclipse-leda/leda-distro https://github.com/eclipse-leda/meta-leda Publications Eclipse Leda Introduction Video - YouTube, 2min Eclipse SDV - First Contribution Day (June 2022) - Session Recording, YouTube, 26min Eclipse SDV - Second Contribution Day (September 2022) - Session Recording, YouTube, 30min Eclipse Leda - Slides SDV Contribution Day - September 2022 - Slides (PDF) ","categories":"","description":"","excerpt":"Thanks for your interest in this project and in our community. …","ref":"/leda/docs/project-info/community/","tags":"","title":"Community"},{"body":"The example build configurations in this repository are based on the official BitBake Quickstart tutorial and have been extended to include Leda SDV components.\nBuild Setup To set up your own BitBake build configuration, follow the BitBake documentation and include meta-leda in your bblayers.conf and add the SDV packages into your local.conf.\nThe Leda build is mainly using the kas tool for a simplified maintenance of the BitBake Configuration files. The kas configuration files are located in kas/\nheader: version: 12 distro: leda machine: qemux86-64 target: sdv-image-all repos: ... meta-leda: url: \"https://github.com/eclipse-leda/meta-leda\" refspec: main layers: meta-leda-bsp: meta-leda-components: meta-leda-distro: Leda Metalayer The meta-leda layer conatins the BitBake Classes and Recipes to integrate SDV Components into a BitBake based build setup.\nPlease see https://github.com/eclipse-leda/meta-leda for more information.\nRecipes for containerized components The SDV.EDGE stack is based on a containerized architecture and the intention is to have as much components containerized as possible, to ensure a high degree of isolation and updateability. To ensure some degree of flexibility and control, certain core components may also be installed as native services.\nTo automatically deploy the containers of the SDV reference implementation and example applications and services, the build configurations will deploy a couple of deployment specifiction files into the auto-deployment folder /data/var/containers/manifests.\nAt start time, these containers will be automatically deployed:\nCloud Connector Self Update Agent Vehicle Update Manager Vehicle API / Vehicle Abstraction Layer Data Broker (Eclipse Kuksa) Example Seat Service (CAN-bus implementation) For a full list of containers, see meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers\nRecipes for containerized applications OpenEmbedded’s meta-virtualization already contains some recipes and reusabled classes for building virtualization and containerized applications.\nmeta-leda extends that functionality by using skopeo to package container images. To minimize the runtime requirements (dependencies, disk usage), an approach to pre-load container images and its layers directly into the content storage of the container runtime is followed.\nBuilding containers with Yocto For components which can either be installed natively or as container, it can be beneficial to build these containers using Yocto as well. An example is in meta-leda-distro-container/recipes-sdv/sdv-containers/cyclonedds-example-container_0.1.bb.\n","categories":"","description":"","excerpt":"The example build configurations in this repository are based on the …","ref":"/leda/docs/build/concepts/","tags":"","title":"Concepts"},{"body":" Milestone 0.1.0-M1 Latest Release Artifacts Note: There are no official releases yet. The artifacts available on the Release page are for testing the build and release workflows. They should be considered as unstable nightly builds from the main branch. Releases marked -M1, -M2, -RC1 etc. are preparations for official releases according to the Eclipse Release process.\nGo to the Eclipse Leda Releases page and download the release archive for the respective machine. The release archives container the disk image and the respective Linux kernel:\nMachine Filename Description QEMU x86_64 eclipse-leda-qemu-x86_64.tar.xz For running QEMU x86 64-Bit QEMU ARM 64 eclipse-leda-qemu-arm64.tar.xz For running QEMU ARM 64-Bit Raspberry Pi 4 eclipse-leda-raspberrypi.tar.xz For running on Raspberry Pi 4 (SD-Card Image) Using GitHub CLI tool To download all files of the latest release using the GitHub CLI:\nInstall GitHub CLI, e.g. for Ubuntu:\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list \u003e /dev/null sudo apt update sudo apt install gh Authenticate to GitHub:\ngh auth login Download Leda latest release:\nOn Linux:\nmkdir leda \u0026\u0026 cd leda gh release download \\ --pattern '*.zip' \\ --pattern 'eclipse-leda-*' \\ --repo eclipse-leda/leda-distro On Windows:\ngh release download --pattern \"*.zip\" --pattern \"eclipse-leda-*\" --repo eclipse-leda/leda-distro Continue with Running Eclipse Leda on QEMU or Running Eclipse Leda on Raspberry Pi 4\n","categories":"","description":"","excerpt":" Milestone 0.1.0-M1 Latest Release Artifacts Note: There are no …","ref":"/leda/docs/general-usage/download-releases/","tags":"","title":"Download latest release"},{"body":" Publish/Subscribe messaging infrastructure for cloud connectivity by Eclipse Kanto local messaging for applications and SDV system components via an MQTT message broker connection to a backend messaging hub, such as Azure IoT Hub or the IoT Suite device identification and authentication for cloud connectivity by using TLS device certificates Container runtime An OCI-compliant container orchestration for vehicle applications and services by Eclipse Kanto containerd.io as the default container runtime. Both layers of container runtimes can be exchanged with other implementations A Vehicle Update Manager to orchestrate deployments of Vehicle Applications, configurations and base operating system updates An example Vehicle Seat Service implementation to showcase the Eclipse Velocitas programming model, the Eclipse Kuksa.VAL vehicle databroker and the Covesa Vehicle Signal Specification the communication with basic vehicle communication networks such as CAN-Bus (CAN Feeder) A Self Update Agent for firmware-over-the-air (FOTA) updates, using an A/B deployment strategy Integration with RAUC An OpenTelemetry collector and example configurations to collect and publish logs and metrics of containerized Vehicle Applications to the cloud backend for further processing The features of the reusable build recipes implemented as an OpenEmbedded metalayer meta-leda are:\nBuild recipes for a Yocto-based distribution to build SDV-related software components Build recipes for customizations of the target device’s storage structure to enable A/B system updates Build recipes for pre-packaging container images into the device during the manufacturing process to minimize initial online provisioning time A customized minimal setup for use on constrained devices and a full setup with convenient developer tools Ready images for virtual devices, for automated testing and evaluation purposes, eg QEMU ARM-64 Ready images for physical devices, for evaluation and demo purposes, eg Raspberry Pi 4 ","categories":"","description":"","excerpt":" Publish/Subscribe messaging infrastructure for cloud connectivity by …","ref":"/leda/docs/about/features/","tags":"","title":"Features"},{"body":"Create a new GitHub Runner for this repo Start with creating a new azure VM:\nUbuntu Server Latest, currently 20.04 Size Standard D16ds v5 The admin user should be called “runner” Once the VM is ready:\nStop the VM Go to “Disk” and resize the OS disk to 512 GB Start the VM again Run the script to setup the runner Log on to the VM as runner. Either copy the scripts/PrepVMasGHRunner.sh onto the VM or create a new script:\nnano prep.sh Copy the content of the PrepVMasGHRunner.sh from this repo into the new file, save it and make it executable:\nchmod 755 prep.sh Call it with the token and the next available nummer, see below how to get this items:\n./prep.sh \"ASYVOMU........DTCFCMBA\" 3 In the Azure portal go the VM, go to the “network” section and delete the rule opening port 22. Congratulation, you are done!\nHow to get the token and the number to call the script In the repo, go to “Settings” -\u003e “Actions”. You see the currently provisioned runners:\nPick the next number and pass it to the script.\nTo get the token press the green button in the above screenshot. The token is in the command:\n","categories":"","description":"","excerpt":"Create a new GitHub Runner for this repo Start with creating a new …","ref":"/leda/docs/build/devenv/github-runner/","tags":"","title":"GitHub Runner"},{"body":"The project aims to provide an integration point for Open Source components for the Software Defined Vehicle. For vehicle software systems, there are a lot of requirements to consider. Some of these requirements are taken into account for Leda’s quickstart setups, thereas some other requirements can only be met once in a production environment and by customizing the target device image.\nThe following document will list some of these requirements and give an explanation on why they are met in the Leda quickstart distribution.\nOverview Provide an example operating system and configuration for constrained in-vehicle devices Integrate software-defined-vehicle Open Source components to showcase the available features and their state of maturity Demonstrate the use and interaction of open protocols and specifications, such as the specifications from the The Connected Vehicle Systems Alliance (COVESA) OpenTelemetry specs and components Eclipse IoT related specifications for software rollouts and digital twin representations ","categories":"","description":"","excerpt":"The project aims to provide an integration point for Open Source …","ref":"/leda/docs/about/goals/","tags":"","title":"Goals"},{"body":"Baseline (no apps installed) Baseline: 400 MB\nInstalled components:\nContainer Management: runc, containerd, container-management System Services: systemd, openssh, mosquitto, mosquitto-clients No cloud connector or edgecontainerd yet. No self update agent No containers, no vehicle apps etc. root@qemux86-64:/bin# df -h Filesystem Size Used Avail Use% Mounted on /dev/root 2.5G 506M 1.8G 22% / Memory Usage: 200MB root@qemux86-64:/# free total used free shared buff/cache available Mem: 1.9G 329.6M 1.4G 16.6M 222.2M 1.6G Swap: Component Details Dependencies\ncni (container networking): 51 MB containerd-ctr: 26 MB containerd: 46 MB dapr cli: 38 MB helm cli: 43 MB runc: 10 MB SDV Components\nvehicle-data-cli: 2.3 MB (dynamic) Medium:\nLinux Kernel (Poky minimal / Leda distro kernel): 8 MB / 21 MB oci-image-tool: 9 MB oci-runtime-tool: 7 MB sshd: 1 MB libstdc++: 2 MB lic: 2 MB libcrypto: 3 MB containerd-shim: 7 MB containerd-shim-runc-v1: 9 MB containred-shim-runc-v2: 9 MB libsystemd: 1 MB busybox: 1 MB ","categories":"","description":"","excerpt":"Baseline (no apps installed) Baseline: 400 MB\nInstalled components: …","ref":"/leda/docs/build/misc/diskusage/","tags":"","title":"Resource Consumptions"},{"body":" Initial Open Source contribution expected by Q2 2022 (Done) A first milestone build is expected end of 2022 (Done) Plan for the first release cycle to be created in Q1/2023 Release cycles are planned every 3-6 months Release planning will be conducted together with corresponding Eclipse projects Backlog The Leda team maintains a backlog roadmap using GitHub projects at https://github.com/orgs/eclipse-leda/projects/1/views/1\nFuture Work The project intends to be the integration and collaboration platform for Software defined Vehicle functionality.\nExemplary future work:\nMigrate to official Eclipse Kanto releases for Cloud Connector, Container Management and Vehicle Update Manager Include reference implementations from the Eclipse Software Defined Vehicle working group projects: Eclipse Velocitas Eclipse Kuksa Eclipse SommR Eclipse Chariott Eclipse Backend function Bindings (BfB) Include and showcase more features regarding development, operation and monitoring of Vehicle Services and Vehicle Applications If you have feedback, please use GitHub Issues\n","categories":"","description":"","excerpt":" Initial Open Source contribution expected by Q2 2022 (Done) A first …","ref":"/leda/docs/about/roadmap/","tags":"","title":"Roadmap"},{"body":"By using the dockerized Leda quickstart images, the SDV vehicle edge components can be evaluated on emulated X86-64 and ARM64 system images, without having to install QEMU and dependencies manually.\nIf you want to execute the image without Docker, please see Running on QEMU. This allows to tweak the startup script, modify the emulated hardware device and set up advanced network configurations.\nThere are two options to run Leda:\nDocker: Simple, restricted to one container Docker Compose: Advanced, allows networking between containers Recommendations A Linux host with 4 vCPUs, 8GB of RAM and SSD storage is recommended Docker Docker The easiest way is to run a single instance of Leda in a Docker container:\nRun the Leda Docker quickstart image:\ndocker run -it ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86 Login with root\nStop the Docker container\nshutdown now Note: If you need to stop the container from outside, use the docker stop \u003cid\u003e command from a separate terminal.\nPrivileged Containers When run as a privileged container, QEMU will try to set up a TAP network and use KVM acceleration. Network and CPU will be faster, depending on the host system.\nTo be able to use these host devices, QEMU needs access to the following devices:\n/dev/kvm /dev/net/tun Example command:\ndocker run -it --privileged --device=/dev/kvm:/dev/kvm --device=/dev/net/tun:/dev/net/tun ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86 Exposing additional ports To also expose ports to connect to ssh, mqtt or the Kuksa databroker, add the port mappings to the Docker command:\ndocker run -it --privileged -p 2222:2222 -p 1883:1883 -p 30555:30555 ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86:latest The following ports are specifically of interest and exposed by the docker container:\n2222 for SSH (mapped internally to 22) 1880 - free slot reserved for user service 1883 for MQTT 8888 - free slot reserved for user service 30555 for Kuksa Databroker Note: In unprivileged mode, only these ports are mapped by the Docker container and forwarded to the Leda system. In privileged mode, all TCP ports can be exposed, which will then be forwarded from the Docker container into the Leda system. See the entrypoint script for details.\nRunning ARM-64 version To run the ARM-64 bit version of the image, use the leda-quickstart-arm64 container image:\ndocker run -it ghcr.io/eclipse-leda/leda-distro/leda-quickstart-arm64:latest Docker Compose A more convenient way to setup advanced scenarios is to use Docker Compose. There is a Docker Compose configuration for an Eclipse Leda setup in resources/docker-compose.\nIt will start up the following containers:\nLeda Quickstart image (QEMU x86-64) Leda Quickstart image (QEMU ARM-64) Web Server with pre-built RAUC Update Bundles MQTT Bridge DNS Proxy (Allows QEMU to use the Docker DNS) Usage Get the Docker Compose configuration file and additional dockerfiles from the https://github.com/eclipse-leda/leda-distro repository:\ngit clone --filter=blob:none https://github.com/eclipse-leda/leda-distro cd leda-distro/resources/docker-compose Starting the containers with:\ndocker compose up --detach --wait Log in to a development shell inside of the docker network:\ndocker compose run --rm devshell Stopping the containers:\ndocker compose down Docker Compose Services Checking all containers are running or exited successfully:\n$ docker compose ps NAME COMMAND SERVICE STATUS PORTS leda-arm64 \"/docker/leda-quicks…\" leda-arm64 running (healthy) 1883/tcp, 0.0.0.0:2002-\u003e2222/tcp, 0.0.0.0:30556-\u003e30555/tcp leda-bundle-server \"/docker-entrypoint.…\" leda-bundle-server running (healthy) 0.0.0.0:8080-\u003e80/tcp leda-dns-proxy \"dnsmasq -k\" dns-proxy running 53/tcp, 0.0.0.0:5353-\u003e53/udp leda-initializer \"/bin/sh -c /root/le…\" leda-initializer exited (0) leda-mqtt-broker \"/docker-entrypoint.…\" mqtt-broker running (healthy) 0.0.0.0:1883-\u003e1883/tcp leda-x86 \"/docker/leda-quicks…\" leda-x86 running (healthy) 1883/tcp, 0.0.0.0:30555-\u003e30555/tcp, 0.0.0.0:2001-\u003e2222/tcp Network setup As the networking is a bit more complicated to set up with emulated network inside of QEMU, the following explanation is helpful to understand networking better.\nAll docker compose containers are attached to a network called leda-bridge and leda-network and can see each other The QEMU instances use a TAP network inside of each leda-quickstart-xxx container and do a NAT network translation to their own container The Docker internal DNS server is being used. This is implemented by a DNS Proxy container, which will forward incoming DNS requests to the Docker DNS running on the 127.0.0.x network. In unprivileged mode: Only the exposed ports are forwarded from the docker container into the QEMU process: mosquitto 1883, ssh 2222 and kuksa.val databroker 30555. In privileged mode, all TCP ports are forwarded from the Docker container into the QEMU process and the special port 2222 is forwarded to ssh port. Developer Shell Developer Shell:\ndocker compose run --rm devshell From there, you can log in to either Leda on QEMU x86-64, or log in to Leda on QEMU ARM-64.\nssh leda-x86 ssh leda-arm64 To run an additional terminal in the developer shell, execute this:\ndocker compose exec devshell /bin/bash Interacting with Eclipse Leda Check the general system status sdv-health Device Provisioning Run the provisioning script:\nsdv-provision Copy the fingerprints\nGo to Azure IoT Hub, create a new device\nUse the certificate’s common name (CN) as Device Id - on Leda, this defaults to a part of the MAC Address\nSelect X.509 Self-Signed authentication type and enter both fingerprints\nClick Save\nMQTT Broker Bridge graph LR; A[\"MQTT Container on docker host localhost:1883\"] -- Bridge --\u003e B[leda-x86:31883]; A -- Bridge --\u003e C[leda-arm64:31883]; B--\u003eB1[mosquitto service leda-x86:1883]; C--\u003eC1[mosquitto service leda-arm64:1883]; The Docker Compose setup will also start an Eclipse Mosquitto message broker as a bridge to both Leda instances. This allows a user or developer to monitor messages sent by or received by both virtual devices.\nConnect your MQTT client to mqtt-broker.leda-network by using the exposed port 1883 on the host:\nmosquitto_sub -h localhost -p 1883 -t '#' -v Docker Networking You need to enable IP forwarding from Docker containers to make networking work. The containers (leda-arm64, leda-x86) need to run with --privileged as they change iptables rules for proper forwarding of network packets.\nSee Docker documentation for bridge networking for details.\nsudo sysctl net.ipv4.conf.all.forwarding=1 sudo iptables -P FORWARD ACCEPT Each Eclipse Leda instance (ARM64, x86_64) is running within a QEMU emulated network (192.168.7.2), which itself is contained in a containerized network called leda-network (192.168.8.x).\nThe containers wrapping the QEMU instances will forward the following ports to the respective QEMU process:\nSSH on port 2222 Mosquitto on port 1883 DHCP and DNS setup Each Leda-QEMU container is running a local DHCP on the tap0 network interface and listens for DHCP requests by the Leda Distro running inside of QEMU. The DHCP server will respond with the same IP address (192.168.7.2) to the request from QEMU.\nThe DHCP response contains a DNS nameserver pointing to the dns-proxy.leda-network (192.168.8.14) IP, which in turn forwards to Docker’s internal 127.0.0.11 nameserver. This allows the QEMU guests to resolve Docker Compose Services by their service name, e.g. leda-bundle-server.leda-network.\nVolumes The /root path inside of the Leda containers is mounted as a volume and contains the raw disk image and runner scripts for the QEMU Leda distribution. Changes on the QEMU filesystem are made persistent on a copy of the QCOW2 disk image, so that restarting the device will keep any changes.\nTo reset to the original state, delete the respective docker volumes and restart the containers:\ndocker compose down docker compose rm --force --stop --volumes docker volume rm leda-arm64 docker volume rm leda-x86 Profiles Profiles can be used to determine which containers (services) docker compose should be starting by default. This is mostly used to have the devshell container not start up by default.\ntools: Contains docker containers which are not essential at runtime, must useful for testing and development purposes ","categories":"","description":"","excerpt":"By using the dockerized Leda quickstart images, the SDV vehicle edge …","ref":"/leda/docs/general-usage/docker-setup/","tags":"","title":"Running on Docker"},{"body":"If you want to execute the image without building first, grab the latest release or build artifacts from https://github.com/eclipse-leda/leda-distro/\nRecommendations A Linux host with 8 vCPUs, 16GB of RAM and SSD storage is recommended Your Linux user should be sudoer to allow TAP network interfaces to be set up QEMU x86_64 Install Qemu, e.g. for Ubuntu:\nsudo apt-get update -y sudo apt-get install -y xz-utils qemu-system-x86-64 Download latest Eclipse Leda release\nUncompress the archive\ntar xf eclipse-leda-qemu-x86_64.tar.xz Run QEMU on Linux:\n./run-leda.sh Run QEMU on Windows:\nrun-leda.cmd Login as root without password on login prompt\nVerify and wait until container runtime is started: systemctl status container-management\nOptional: Check the system health: sdv-health\nNote: The status of some containers (e.g. cloud connector) are expected to stay in FAILED status as long as the Device Provisioning steps are not completed.\nContinue with Device Provisioning\nQEMU ARM 64-Bit Install Qemu, e.g. for ARM 64-Bit: sudo apt install qemu-system-aarch64\nDownload latest Eclipse Leda release\nUncompress the archive\ntar xf eclipse-leda-qemu-arm64.tar.xz Run QEMU on Linux:\n./run-leda.sh Run QEMU on Windows:\nrun-leda.cmd Login as root without password on login prompt\nVerify and wait until container runtime is started: systemctl status container-management\nOptional: Check the system health: sdv-health\nNote: The status of some containers (e.g. cloud connector) are expected to stay in FAILED status as long as the Device Provisioning steps are not completed.\nContinue with Device Provisioning\n","categories":"","description":"","excerpt":"If you want to execute the image without building first, grab the …","ref":"/leda/docs/general-usage/running-qemu/","tags":"","title":"Running on QEMU"},{"body":"What you need:\nA Raspberry Pi 4B (64 Bit) with 2 GiB of RAM or more, recommended is 8 GiB Network connection (Ethernet or Wifi) with transparent internet access Optional keyboard and display (makes it easier to troubleshoot) Steps:\nDownload the latest released SD-Card Image: eclipse-leda-raspberrypi.tar.xz\nUncompress the SD Card image:\napt-get install -y xz-utils tar xf eclipse-leda-raspberrypi.tar.xz bzip2 -d -f sdv-image-all-raspberrypi4-64.wic.bz2 Flash the sdv-image-all-raspberrypi4.wic file to an SD-Card\nOn Linux: Install bmap tools: sudo apt-get install -y bmap-tools Insert SD Card and check which device is mounted: sudo fdisk -l Unmount the device: sudo umount /dev/mmcblk[X] sudo bmaptool copy --bmap sdv-image-all-raspberrypi4-64.wic.bmap sdv-image-all-raspberrypi4-64.wic /dev/mmcblk[X] Note: Using bmap is much faster but works the same as with plain dd if=\u003cwic-file\u003e of=dev/mmcblk[x]. On Windows: Raspberry Pi Imager Balena Etcher Optional: If you need to adapt the network configuration eg Wifi credentials, edit the configuration files on the boot partition.\nShutdown the Raspberry and insert the SD-Card into the Raspberry Pi SD-Card slot at the bottom\nPower on your Raspberry to boot the image\nLogin with root\nCheck disk space:\nThe raspberry-growdisk system service will do this automatically on first boot.\nTo manually enlarge the available disk space on the SD-Card, resize the disk partition: parted /dev/mmcblk0 resizepart 6 100% \u0026\u0026 resize2fs /dev/mmcblk0p6.\nNote: Due to changes in the disk partition, the partition number (6 in the example) may have changed.\nVerify with df -h.\nVerify and wait until container runtime is started: systemctl status container-management\nOptional: Check the system health: sdv-health\nContinue with Device Provisioning\n","categories":"","description":"","excerpt":"What you need:\nA Raspberry Pi 4B (64 Bit) with 2 GiB of RAM or more, …","ref":"/leda/docs/general-usage/raspberry-pi/","tags":"","title":"Running on Raspberry Pi"},{"body":"Health check The sdv-health utility displays a status overview of some important dependencies and device configurations for the SDV edge stack. The sdv health utility can be configured using the sdv.conf configuration file.\nUsage:\n# sdv-health Example output:\nVersion Information The Leda image version and build time will be displayed at the top in the first category:\nOS Release: Year and codename of the release version Image Version: Name of the image and more specific version information, such as the git tag or commit id Build timestamp in yyyMMddHHmmss notation Note: The information is read from the system base file in /etc/os-release:\nroot@qemux86-64:~# cat /etc/os-release BUILD_ID=\"20230309083051\" DISTRO_CODENAME=\"Dracon\" ID=leda IMAGE_VERSION=\"0.0.5-41-g82f2b12\" NAME=\"Eclipse Leda\" PRETTY_NAME=\"Eclipse Leda 2023 (Dracon)\" VERSION=\"2023 (Dracon)\" VERSION_CODENAME=\"Dracon\" VERSION_ID=0.0.5-41-g82f2b12 Bus networks If available, vehicle bus network information, such as the status of the CAN-Bus, will be displayed iin its own category. This helps to quickly identify if there problems with the hardware connectivity for automotive bus networks.\nPorts The health utility checks the TCP ports of specific services. This helps to identify if these services are up and running and potentiallyconnectable via external network interfaces.\nServices and Containers The services category shows the status of required and optional containers. The required containers are supposed to be up and running for the SDV.EDGE stack to be correctly up and running. If any of these core components have a failed state, the functionality is impacted.\nThe optional containers are for additional features and for example applications. These containers may not be necessary for each use case and hence will be marked as a warning if they are not up and running. The overview still helps to identify which containers are working properly.\nErrors, Warnings, Failed states When there are errors or warnings related to the status of SDV related components, the health utility will print out these error states, and if available also a more detailed error message.\nIn the following example, the health utility helps the troubleshooting process:\nThe container runtime is properly started: “Kanto CM” is OK in the “SDV Ports” section and the “container-management” service is OK in the “SDV Services” section\". Some containers are in state “OK”, which means there is no general issue with the container runtime. The cloud connector is in a “Stopped” state, which indicates that the user manually stopped the container by using “kanto-cm stop -n cloud-connector”. The sua container is in a “Exited” state, which indicates the process exited with an error code. ","categories":"","description":"","excerpt":"Health check The sdv-health utility displays a status overview of some …","ref":"/leda/docs/general-usage/utilities/sdv-health/","tags":"","title":"SDV Health"},{"body":"The Seat Adjuster use case has been derived from the Eclipse Velocitas Seat Adjuster example, the Eclipse Kuksa.VAL Seat Service example and the Digital.Playground Prototyping Library\nDescription The Seat Adjuster use cases demonstrates the idea of having a cloud-based driver profile hosted by a third-party web service, which is then used by a custom application to move the driver seat to certain positions.\nExamples range from simple personalization to dynamic seat control (such as periodic back massages) based on personal health treatment plans by an health insurance organization. A driver could opt-in to such a service, which would lead to the ad-hoc installation of a seat adjuster vehicle application when the driver enters the vehicle. The seat adjuster application would then contact the health insurance webservice to retrieve the driver’s personal treatment plan for back massage and start moving the motors in certain intervals, to ease or prevent back pain during long driving periods.\nThis example focuses on the technical aspect, namely the interface between such an assumed application with the high-level logic, and the lower-level backend service (Seat Service), which controls the communication to the underlying hardware (Seat ECU). In this case, the Vehicle Signal Specification and the simple signal for seat position is used exemplarily.\nArchitecture Overview Cloud or mobile trigger: not part of the Leda image, but can be simulated by issueing MQTT messages Eclipse Velocitas - Vehicle Application: Seat Adjuster (to be deployed by user as part of the Velocitas tutorial) Eclipse Kuksa.VAL - Example Service: Seat Service (pre-installed) Eclipse Kuksa.VAL - Data Broker (pre-installed) Seat ECU and the separate Seat Motor hardware: not part of the Leda image, but can be emulated using virtual CAN-Bus. The Kuksa Seat Service container contains configuration options to use VCAN Data Flow In the high-level data flow, the northbound applications interact with the Vehicle Abstraction Layer via the data broker:\nflowchart TB seatadjuster[Seat Adjuster] databroker[(Kuksa.VAL\nData Broker)] seatservice[Seat Service] seatadjuster -- \"Vehicle.Cabin.Seat.Row1.Pos1.Position\" --\u003e databroker databroker \u003c-.-\u003e seatservice Detailed: Setting position In this tutorial, let’s have a more detailed look into the involved interfaces in the data flow for setting a desired seat position.\nThe Client can be a local app, e.g. deployed in the Infotainment domain and provide a user interface to the driver. It could also be a remotely deployed cloud application, sending the same request to move the seat via cloud messaging infrastructure.\nflowchart TB client[Client] anotherClient[Another Client] seatadjuster[Seat Adjuster] databroker[(Kuksa.VAL\nData Broker)] mqttRequest[[MQTT topic\nseatadjuster/setPosition/request]] %% mqttResponse[[MQTT topic\nseatadjuster/setPosition/response]] %% mqttCurrent[[MQTT topic\nseatadjuster/currentPosition]] seatservice[Seat Service] canbus[CAN-Bus and Seat ECU] client -- \"JSON Request: position, requestId\" --\u003e mqttRequest anotherClient -.-\u003e mqttRequest mqttRequest --\u003e seatadjuster seatadjuster -- \"Set Desired\nVehicle.Cabin.Seat.Row1.Pos1.Position\ngRPC\" --\u003e databroker databroker -- \"Publish\nVehicle.Cabin.Seat.Row1.Pos1.Position\n(Actuator)\" --\u003e seatservice seatservice -- \"CAN Frame: SECU1_CMD1\nCAN-ID 0x705\" --\u003e canbus The Data Broker and its use of the Vehicle Signal Specification represents the abstraction layer, to make the application’s interface independent of the actual physical seat service.\nThe Seat Service uses the physical layer (e.g. CAN-Bus) to communicate with the vehicle actuators.\nResponses and current position In this data flow diagram, it shows how the information about the processing of the request to set the desired position is handled, as well as continuous updates to inform clients about the current position while the seat is moving towards the desired position.\nflowchart TD client[Client] anotherClient[Another Client] seatadjuster[Seat Adjuster] databroker[(Kuksa.VAL\nData Broker)] %% mqttRequest[[MQTT topic\nseatadjuster/setPosition/request]] mqttResponse[[MQTT topic\nseatadjuster/setPosition/response]] mqttCurrent[[MQTT topic\nseatadjuster/currentPosition]] seatservice[Seat Service] canbus[CAN-Bus and Seat ECU] canbus -- \"CAN Frame: SECU1_STAT\nCAN-ID 0x712\" --\u003e seatservice seatservice -- \"Feed\nVehicle.Cabin.Seat.Row1.Pos1.Position\n(Sensor)\" --\u003e databroker databroker -- \"Publish\nVehicle.Cabin.Seat.Row1.Pos1.Position\" --\u003e seatadjuster seatadjuster -- \"Once\" --\u003e mqttResponse seatadjuster -- \"While seat is moving\" --\u003e mqttCurrent mqttResponse -- \"SetPosition Response\n(Accepted / Error)\" --\u003e client mqttCurrent --\u003e client mqttCurrent -.-\u003e anotherClient Safety Considerations Attention: Safety considerations are not in scope for this example tutorial. This example is for demonstrating the general approach. Actual safety requirements must be handled within the Seat ECU as the lowest level component to guard against non-safe use of the seat motors. Non-ASIL domains are not certified for safety requirements. Please pay attention when following the physical CAN tutorial and attaching physical actuators to not harm anybody by accidental movements of seat motors.\nHowever, the Seat Adjuster example application contains a rudimentary “Safe State” condition check: it will only allow to move the seat when the vehicle is not moving.\nThe condition is using VSS path notation: Vehicle.Speed == 0 (see main.py#L82 in v0.9.0)\nNote: The Kuksa.VAL CAN Feeder, which is deployed by default on Eclipse Leda is constantly updating the Vehicle.Speed. You need to disable the feedercan container, otherwise the Seat Adjuster application will decline the request and not move the seat.\nGetting started The following steps are based on Velocitas 0.9.0 and Leda 0.1.0:\nFollow the Velocitas Seat Adjuster tutorial: fork, build and deploy your clone of the seat adjuster example (v0.9.0)\nDownload and run the Leda quickstart image, or run it in Docker:\ndocker run -it ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86 Deploy your seat adjuster application to the container runtime\n3.1 Manually by using kanto-cm:\nkanto-cm create \\ --name seatadjuster-app \\ --e=\"SDV_SEATSERVICE_ADDRESS=grpc://seatservice-example:50051\" \\ --e=\"SDV_MQTT_ADDRESS=mqtt://mosquitto:1883\" \\ --e=\"SDV_VEHICLEDATABROKER_ADDRESS=grpc://databroker:55555\" \\ --e=\"SDV_MIDDLEWARE_TYPE=native\" \\ --hosts=\"databroker:container_databroker-host, mosquitto:host_ip, seatservice-example:container_seatservice-example-host\" \\ ghcr.io/\u003cYOUR_ORG\u003e/seat-adjuster-app:latest kanto-cm start --name seatadjuster-app kanto-cm logs --name seatadjuster-app or\n3.2 Provide a deployment descriptor in /var/containers/manifests. An example deployment descriptor can be found in meta-leda-components. Details on the deployment can be found in Leda Vehicle Applications\nsystemctl restart kanto-auto-deployer Ensure the databroker and the seat service containers are running and you know how to check their log files (kantui, kanto-cm)\nkanto-cm logs --name seatservice-example Subscribe to MQTT topics `seatadjuster/#’ to see the responses from the seat adjuster app:\nmosquitto_sub -t 'seatadjuster/#' -v Disable the feedercan container: kanto-cm stop -n feedercan to stop updating the Vehicle.Speed signal. If the feedercan container is not stopped, the seatadjuster-app will respond with the following error message:\nseatadjuster/setPosition/response {\"requestId\": \"12345\", \"result\": {\"status\": 1, \"message\": \"Not allowed to move seat because vehicle speed is 9.0 and not 0\"}} Publish an MQTT message for the seat adjuster application to set the maximum position to 1000 (which is the equivalent to 100%):\nmosquitto_pub -t seatadjuster/setPosition/request -m '{\"position\": 1000, \"requestId\": \"12345\"}' The expected output responses on MQTT topics should look like this:\nseatadjuster/setPosition/request {\"position\": 1000, \"requestId\": \"12345\"} seatadjuster/setPosition/response {\"requestId\": \"12345\", \"result\": {\"status\": 0, \"message\": \"Set Seat position to: 1000\"}} seatadjuster/currentPosition {\"position\": 00} seatadjuster/currentPosition {\"position\": 10} seatadjuster/currentPosition {\"position\": 20} seatadjuster/currentPosition {\"position\": 30} seatadjuster/currentPosition {\"position\": 40} seatadjuster/currentPosition {\"position\": 50} ... Seat Adjuster The Seat Adjuster application needs to be reconfigured, as Velocitas SDK by default uses the DAPR middleware. On Eclipse Leda, there is no DAPR middleware installed by default and hence, the Velocitas application will use the Native middleware type.\nAlso, the hostnames of dependent services need to be configured according to the actual network setup in Eclipse Leda’s container runtime:\nSDV_SEATSERVICE_ADDRESS=grpc://seatservice-example:50051 SDV_MQTT_ADDRESS=mqtt://mosquitto:1883 SDV_VEHICLEDATABROKER_ADDRESS=grpc://databroker:55555 SDV_MIDDLEWARE_TYPE=native Hostname configuration also needs to be updated accordingly:\ndatabroker:container_databroker-host mosquitto:host_ip seatservice-example:container_seatservice-example-host Prototyping The pseudo-code for the Seat Adjuster application could look like the following excerpt from the Digital.Playground example:\nfrom sdv_model import Vehicle vehicle = Vehicle() on_user_profile_changed(Issuer): vehicle.Cabin.Seat.Row1.Pos1.Height.set(profile[Issuer][\"VerticalHeight\"]) vehicle.Cabin.Seat.Row1.Pos1.Position.set(profile[Issuer][\"HorizontalPosition\"]) In the next step, this prototype can be taken to the next level of implementation by using the Velocitas example to express it like this, with possibly more logic:\n@subscribe_topic(\"seatadjuster/setPosition/request\") async def on_set_position_request_received(self, data_str: str) -\u003e None: vehicle_speed = (await self.Vehicle.Speed.get()).value ... if vehicle_speed == 0: try: await self.Vehicle.Cabin.Seat.Row1.Pos1.Position.set(position) response_data[\"result\"] = { \"status\": 0, \"message\": f\"Set Seat position to: {position}\", } except ValueError as error: response_data[\"result\"] = { \"status\": 1, \"message\": f\"Failed to set the position {position}, error: {error}\", } except Exception: response_data[\"result\"] = { \"status\": 1, \"message\": \"Exception on set Seat position\", } else: error_msg = f\"\"\"Not allowed to move seat because vehicle speed is {vehicle_speed} and not 0\"\"\" response_data[\"result\"] = {\"status\": 1, \"message\": error_msg} await self.publish_event(response_topic, json.dumps(response_data)) Seat Service The Seat Service is a Vehicle Service example implementation.\nIt communicates with the physical vehicle layer, in this case either a virtual or physical CAN bus, to control the Seat ECU.\nThe example container is configured to use emulated CAN-Bus and deployed by default.\nVehicle Signal The VSS Path under control by Seat Service is Vehicle.Cabin.Seat.Row1.Pos1.Position:\nSignal Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.\nThe value is the distance measured in millimeters.\nThe example implementation supports values between 0 and 1000 millimeters.\nNote: This range of valid values is not reflected in the standard Vehicle Signal Specification. OEMs would overlay the VSS tree with actual Min/Max values, depending on the specific seat hardware available in the specific vehicle model.\nTesting Whether you are running the seatservice-example with a simulated CAN or a physical (emulated) CAN, the seatservice-example container included in the Leda Quickstart image provides a simple client application that can be used to test the GRPC interface.\nTo set the seat position to x%, take x*10 and truncate it to an integer \u003cposition\u003e. Then using the sdv-ctr-exec script issue the following command:\n$ sdv-ctr-exec -n seatservice-example /app/bin/seat_svc_client \u003cposition\u003e You can now check the logs (either with kanto-cm logs or kantui) and you should be able to see the seatservice-example application responding to the command by moving the seat to the desired position.\nVirtual CAN-Bus You will have to generate initial CAN frames that will emulate the car ECU responding to the service:\n$ cangen -v can0 -L 8 -I 712 -D r -n 5 can0 712#4F.BF.B0.6B.5F.2D.54.09 can0 712#13.2E.98.7E.77.11.99.5B can0 712#15.70.87.07.73.24.3A.7A can0 712#99.7F.F5.3F.FB.99.00.04 can0 712#FE.1C.D5.55.22.86.3A.1F You can now start tracing CAN frames written to the bus with candump can0\nFrom now on when a request to change the seat position is issued you will be able to see the corresponding CAN frames in the trace.\nNote: On QEMU you can tunnel the host CAN bus to the guest: Tunneling a CAN Interface from the Host.\nHardware CAN-Bus The default configuration of the Seat Service is using simulated VCAN. If you want to switch to a physical CAN-Bus interface, the container needs to have access to the CAN-Bus hardware.\nSuch a CAN-Bus device might be a Raspberry Pi setup with an MCP251x-based CAN-Hat extension or a QEMU image with an emulated kvaser_pci device (enabled on the Leda QEMU Quickstart images by default).\nThis setup would require some adjustments to the container manifest in order for the container to have access to the physical CAN-Bus.\nMake Seat Service container privileged and run on the host network interface:\n\"host_config\": { ... \"network_mode\": \"host\", \"privileged\": true, ... } Remove all port mappings and extra hosts (set \"extra_hosts\": [] and \"port_mappings\": []) for the container as it’s now running in host-networking mode (host_ip variable no longer available) and all ports are directly exposed.\nSet the address to the databroker to localhost:30555:\n\"config\": { \"env\": [ ... \"BROKER_ADDR=127.0.0.1:30555\", ... ], ... } Reconfigure the seat controller application to use the physical CAN interface, please see Eclipse Kuksa.VAL seat_controller/README.md for details:\nSC_CAN=can0 CAN=can0 All the necessary changes combined for clarity as a single diff can be found below:\n--- ../meta-leda-fork/meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers/example_dev/seatservice.json\t2023-03-06 11:32:00.771754434 +0200 +++ seatservice-new.json\t2023-03-06 11:37:12.967182044 +0200 @@ -14,26 +14,16 @@ \"hooks\": [], \"host_config\": { \"devices\": [], - \"network_mode\": \"bridge\", - \"privileged\": false, + \"network_mode\": \"host\", + \"privileged\": true, \"restart_policy\": { \"maximum_retry_count\": 0, \"retry_timeout\": 0, \"type\": \"unless-stopped\" }, \"runtime\": \"io.containerd.runc.v2\", - \"extra_hosts\": [ - \"databroker-host:host_ip\" - ], - \"port_mappings\": [ - { - \"protocol\": \"tcp\", - \"container_port\": 50051, - \"host_ip\": \"localhost\", - \"host_port\": 30051, - \"host_port_end\": 30051 - } - ], + \"extra_hosts\": [], + \"port_mappings\": [], \"log_config\": { \"driver_config\": { \"type\": \"json-file\", @@ -58,9 +48,11 @@ }, \"config\": { \"env\": [ - \"BROKER_ADDR=databroker-host:30555\", - \"RUST_LOG=info\", - \"vehicle_data_broker=info\" + \"CAN=can0\", + \"SC_CAN=can0\", + \"BROKER_ADDR=127.0.0.1:30555\", + \"RUST_LOG=info\", + \"vehicle_data_broker=info\" ], \"cmd\": [] }, References https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Cabin/SingleSeat.vspec https://github.com/eclipse/kuksa.val.services/tree/main/seat_service https://eclipse.dev/velocitas/docs/about/use_cases/seat_adjuster/ https://github.com/eclipse-velocitas/vehicle-app-python-sdk/tree/v0.9.0/examples/seat-adjuster https://github.com/eclipse-leda/meta-leda/blob/main/meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers/example/seatadjuster-app.json.disabled https://github.com/eclipse-leda/meta-leda/blob/main/meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers/example/seatservice.json ","categories":"","description":"","excerpt":"The Seat Adjuster use case has been derived from the Eclipse Velocitas …","ref":"/leda/docs/app-deployment/seat-adjuster/","tags":"","title":"Seat Adjuster"},{"body":"This chapter describes the steps necessary to perform a local (without cloud) self update of the operating system.\nSelf-Update using RAUC Update Bundles On host: Update bundle sdv-rauc-bundle-qemux86-64.raucb is in current folder\nNote: In the development environment, the update RAUC Update Bundle is located in the BitBake machine-specific output folder Example location is tmp/deploy/images/qemux86-64\nOn host: Start a dummy web server for serving the update file\npython3 -m http.server --bind 192.168.7.1 On host: open two new terminals - one for monitoring and one for triggering the self-update\nTerminal 1: To view the progress, watch the MQTT topics selfupdate/desiredstate and selfupdate/desiredstatefeedback:\nmosquitto_sub -h 192.168.7.2 -p 1883 -t \"selfupdate/#\" Terminal 2: Trigger the actual self update process by publishing an MQTT message to selfupdate/desiredstate:\nmosquitto_pub -h 192.168.7.2 -p 1883 -t \"selfupdate/desiredstate\" -f start-update-example.json Switch to a terminal in the guest\nOn guest: After the self update process completed, check the status:\nrauc status --detailed Self-Update Trigger Message start-update-example.json file:\n{ \"activityId\": \"random-uuid-as-string\", \"timestamp\": 123456789, \"payload\": { \"domains\": [ { \"id\": \"self-update\", \"components\": [ { \"id\": \"os-image\", \"version\": \"${VERSION_ID}\", \"config\": [ { \"key\": \"image\", \"value\": \"http://leda-bundle-server/sdv-rauc-bundle-qemux86-64.raucb\" } ] } ] } ] } } Example Message Flows Current State Initial response message on startup from self update agent in topic selfupdate/currentstate, or upon request by sending message to selfupdate/currentstate/get\nRequest:\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1676332092 } Response:\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1675345910, \"payload\": { \"domains\": [ { \"id\": \"self-update\", \"components\": [ { \"id\": \"os-image\", \"version\": \"bundle_version_not_available\" } ] } ] } } Desired State External trigger to update via desired state on topic selfupdate/desiredstate:\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 123456789, \"payload\": { \"domains\": [ { \"id\": \"self-update\", \"components\": [ { \"id\": \"os-image\", \"version\": \"${VERSION_ID}\", \"config\": [ { \"key\": \"image\", \"value\": \"http://leda-bundle-server/sdv-rauc-bundle-qemux86-64.raucb\" } ] } ] } ] } } Initialization response by Self Update Agent on topic selfupdate/desiredstatefeedback\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1675347152, \"payload\": { \"status\": \"IDENTIFIED\", \"message\": \"Self-update agent is about to perform an OS image update.\", \"actions\": [] } } Responses while downloading by Self Update Agent on topic selfupdate/desiredstatefeedback\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1675347152, \"payload\": { \"status\": \"RUNNING\", \"message\": \"Self-update agent is performing an OS image update.\", \"actions\": [ { \"component\": { \"id\": \"self-update:os-image\", \"version\": \"${VERSION_ID}\" }, \"status\": \"DOWNLOADING\", \"progress\": 0, \"message\": \"Downloading 0.0 MiB...\" } ] } } Response by Self Update Agent on topic selfupdate/desiredstatefeedback when download successfully finished:\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1675347154, \"payload\": { \"status\": \"RUNNING\", \"message\": \"Self-update agent is performing an OS image update.\", \"actions\": [ { \"component\": { \"id\": \"self-update:os-image\", \"version\": \"${VERSION_ID}\" }, \"status\": \"DOWNLOAD_SUCCESS\", \"progress\": 100, \"message\": \"Downloaded 108.9 MiB...\" } ] } } Response by Self Update Agent on topic selfupdate/desiredstatefeedback while performing the installation:\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1675347159, \"payload\": { \"status\": \"RUNNING\", \"message\": \"Self-update agent is performing an OS image update.\", \"actions\": [ { \"component\": { \"id\": \"self-update:os-image\", \"version\": \"${VERSION_ID}\" }, \"status\": \"UPDATING\", \"progress\": 20, \"message\": \"RAUC install...\" } ] } } Response by Self Update Agent on topic selfupdate/desiredstatefeedback when installation completed successfully:\n{ \"activityId\": \"\u003cuuid\u003e\", \"timestamp\": 1675347186, \"payload\": { \"status\": \"COMPLETED\", \"message\": \"Self-update completed, reboot required.\", \"actions\": [ { \"component\": { \"id\": \"self-update:os-image\", \"version\": \"${VERSION_ID}\" }, \"status\": \"UPDATE_SUCCESS\", \"progress\": 100, \"message\": \"Writing partition completed, reboot required.\" } ] } } ","categories":"","description":"","excerpt":"This chapter describes the steps necessary to perform a local (without …","ref":"/leda/docs/device-provisioning/self-update/self-update-tutorial/","tags":"","title":"Self Update Tutorial"},{"body":"Sharing a directory with the guest When you want to copy files between the host and the guest, an easy way is to use an SFTP tunnel. With sshfs, you can mount a local directory to a remote directory via SSH.\nPre-Requisites Installation of needed packages:\nRun apt-get install sshfs on your host Enable CORE_IMAGE_EXTRA_INSTALL += \" openssh-sftp-server\" in local.conf of your image (e.g. in the local_conf_header section in your kas file) Verify SFTP connection working with sftp -P 2222 root@localhost Transfering files from host to guest When you want to copy files from the host to the guest, an easy way is to use an SFTP tunnel. With sshfs, you can mount a local directory to a remote directory via SSH.\nCreate a mount point on your host: mkdir remote Open the SSH Filesystem tunnel: sshfs root@localhost:/ remote/ -p 2222 Check files: ls -al remote/ - you should see the root filesystem of the device now You can now easily copy files: cp foo.txt remote/home/root/ Transfering files from guest to host Note: The reverse direction, e.g. initiating an SSH tunnel from within the device to the host, is currently not supported by the installed software on the image.\n","categories":"","description":"","excerpt":"Sharing a directory with the guest When you want to copy files between …","ref":"/leda/docs/general-usage/running-qemu/filetransfer/","tags":"","title":"Transferring Files"},{"body":"Validating the release Steps to validate if a release is properly working:\nCreate a new pre-release from your branch\nDownload the release artifacts onto a clean system.\nDo not use your build environment, to minimize the impact of existing environment configuration from BitBake etc.\nRun the run-leda scripts to execute Qemu\nNote: You should test each of the release archives, for each target machine.\nFollow the Device Provisioning guide\nPerform some verification tests (see below)\nCleanup: Delete the pre-release and the git tag:\ngit push --delete origin \u003ctagname\u003e Ideas for manual verification steps Note: These are just for manual testing, as we intend to extend the automated tests as much as possible.\nOperating system level Run sdv-health on the shell Verify disk partitions and RAUC status, e.g. rauc status Verify network interface and CAN-Bus with ip addr Container runtime Check status of containers with kantui ","categories":"","description":"","excerpt":"Validating the release Steps to validate if a release is properly …","ref":"/leda/docs/build/release/validation/","tags":"","title":"Validating"},{"body":"Preparation Obtain the Docker Engine for your distribution and add your non-privileged user to the docker group (sudo usermod -aG docker $USER ) Install Visual Studio Code Visual Studio Code: Development Containers Open Visual Studio Code Open Command Palette (F1) and select Clone repository in Container Volume Select eclipse-leda/meta-leda and the main branch. Adapt proxy configurations if necessary (.devcontainer/proxy.sh) For a clean remote build machine, you may want to set up a development environment on GitHub CodeSpaces\nBuilding Leda in a VSCode DevContainer: After successfully setting up your DevContainer you can build Leda either with kas or manually:\nTo build with kas follow the instructions at: Building with kas\nTo build manually: Building manually\nAuthentication The build process requires online connection and you must be authenticated to access private repositories.\nCreate a GitHub Personal Access Token (PAT) at https://github.com/settings/tokens and grant read:packages permission Use Configure SSO and authorize your PAT for the organization On the build host, authenticate to ghcr.io: skopeo login ghcr.io --authfile ~/auth.json --username \u003cusername\u003e and enter the PAT as password You may need to create the folder where skopeo is storing authentication information beforehand: sudo mkdir -p /run/containers/1000 sudo chmod a+w /run/containers/1000 Start the bitbake build process ","categories":"","description":"","excerpt":"Preparation Obtain the Docker Engine for your distribution and add …","ref":"/leda/docs/build/devenv/vscode-devcontainer/","tags":"","title":"VSCode DevContainer"},{"body":"Note: This part of the Leda meta-layer and quickstart image is currently under active development and this documentation page may not represent the actual state of VUM\nThe vehicle update manager container requires the following configuration:\nContainer needs to run in privileged mode to enable automatic reboot.\nNote: This is enabled by default on the Leda Quickstart images to simplify automated testing.\nConnection to MQTT broker, defaults to THINGS_CONN_BROKER=tcp://mosquitto:1883\nEnable container orchestration feature: THINGS_FEATURES=ContainerOrchestrator\nOptional configuration options are:\nSELF_UPDATE_ENABLE_REBOOT=true Enable automatic reboot after a successfull application of the update bundle. SELF_UPDATE_TIMEOUT=30m Timeout for downloading and installing an update bundle. Example Deployment Specification apiVersion: v1 kind: ServiceAccount metadata: name: vehicle-update-manager --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: vehicle-update-manager rules: - apiGroups: - '*' resources: - '*' verbs: - '*' --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: vehicle-update-manager subjects: - kind: ServiceAccount name: vehicle-update-manager namespace: default roleRef: kind: ClusterRole name: vehicle-update-manager apiGroup: rbac.authorization.k8s.io --- apiVersion: apps/v1 kind: Deployment metadata: name: vehicle-update-manager spec: selector: matchLabels: component: vehicle-update-manager template: metadata: labels: component: vehicle-update-manager spec: serviceAccountName: vehicle-update-manager containers: - name: vehicle-update-manager image: \u003crepository\u003e/vehicleupdatemanager:\u003ctag\u003e imagePullPolicy: IfNotPresent securityContext: privileged: true env: - name: SELF_UPDATE_TIMEOUT value: 30m - name: SELF_UPDATE_ENABLE_REBOOT value: \"true\" - name: THINGS_CONN_BROKER value: tcp://mosquitto:1883 - name: THINGS_FEATURES value: ContainerOrchestrator volumeMounts: - mountPath: /proc name: proc volumes: - hostPath: path: /proc name: proc imagePullSecrets: - name: ghcr-io ","categories":"","description":"","excerpt":"Note: This part of the Leda meta-layer and quickstart image is …","ref":"/leda/docs/device-provisioning/vehicle-update-manager/vehicle-update-manager-configuration/","tags":"","title":"Configuration"},{"body":"Kanto-auto-deployer (KAD) This service has been implemented as a stopgap solution by the Leda team since as of now the Kanto CM-native mechanism for initial container deployment does not suit the needs of the Leda Quickstart image well.\nIn-depth documentation on its operation and development can be found in Kanto Auto deployer.\nIn the Leda Distro KAD runs as a service that continuously monitors the directory defined with the BitBake variable KANTO_MANIFESTS_DEV_DIR in the distro config recipes. By default, the Leda quickstart images use KANTO_MANIFESTS_DEV_DIR=/data/var/containers/manifests\". So, these manifests are again stored in the persistent data-partition and can be modified after the image has been deployed.\nImportant: KAD supports the Kanto Container Management Manifest Template AND the Container Internal State Representation. For future compatiblity reasons it is recommended that you choose Kanto Container Management Manifest Template.\nA standard set of containers is deployed through meta-leda, the manifests for which can be found in meta-leda/meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers/core and meta-leda/meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers/example.\nThe advantage of this service is that it can be restarted very quickly (systemctl restart kanto-auto-deployer), without having to restart the whole container-management service. The implemented filewatcher (the --daemon flag) allows you to quickly create/edit (or even touch them) container manifests on the device that would be on-the-fly deployed after saving. This allows for rapid testing when creating new container manifests.\nKanto Container Management init-dir This feature of Kanto Container Managament by the Kanto Teams is currently under development and hence unstable. That is why it is not used as of the test-0.0.6 release of Leda Distro and 0.1.0-M1 release of meta-leda.\n","categories":"","description":"","excerpt":"Kanto-auto-deployer (KAD) This service has been implemented as a …","ref":"/leda/docs/customization/deploying-containers/","tags":"","title":"Deploying Containers"},{"body":"TLDR: To deploy a container in the final Leda image, all you generally need to do is add the manifest in the kanto-containers directory and re-build.\nKanto-CM does not provide (currently) a stable feature that allows for the automatic deployment of containers through manifest files similar to k3s’ automated deployment of k8s-manifests found in the /var/lib/rancher/k3s/server/manifests directory.\nThis can be worked around via a bash script for each container that runs on boot and makes sure it’s deployed. Even though this approach is functional it is not very structured and would require a lot repeating code.\nThat is why the “Kanto Auto deployer” tool was developed. It directly implements the ideas in Communicating with Кanto-CM via gRPC.\nThe compiled binary takes a path to a directory containing the json manifests, parses them into Rust structures and sends gRPC requests to kanto container management to deploy these containers.\nManifest structure Because Kanto CM uses different JSON formats for the interal state representation of the container (from the gRPC API) and for the deployment via the Container Management-native init_dir-mechanism, KAD supports both through the “manifests_parser” module. The conversion between formats is automatic (logged as a warning when it’s attempted) so you do not need to provide extra options when using one or the other.\nContainer Management Manifests Format This is the CM-native format, described in the Kanto-CM documentation. It is the recommended format since KAD is supposed to be replaced by native CM deployment modules in the future and this manifest format will be compatible with that.\nIt also allows you to ommit options (defaults will be used). KAD will issue a log warning when the “manifests_parser” attempts to convert this manifest format to the gRPC message format (internal state representation).\nInternal State Representation The KAD “native” manifests format uses the exact same structure for its manifests as the internal representation of container state in kanto container management. This manifest format does not allow keys in the json to be ommited, so these manifests are generally larger/noisier. For example:\n{ \"id\": \"\", \"name\": \"databroker\", \"image\": { \"name\": \"ghcr.io/eclipse/kuksa.val/databroker:0.2.5\", \"decrypt_config\": null }, \"host_name\": \"\", \"domain_name\": \"\", \"resolv_conf_path\": \"\", \"hosts_path\": \"\", \"hostname_path\": \"\", \"mounts\": [], \"hooks\": [], \"host_config\": { \"devices\": [], \"network_mode\": \"bridge\", \"privileged\": false, \"restart_policy\": { \"maximum_retry_count\": 0, \"retry_timeout\": 0, \"type\": \"unless-stopped\" }, \"runtime\": \"io.containerd.runc.v2\", \"extra_hosts\": [], \"port_mappings\": [ { \"protocol\": \"tcp\", \"container_port\": 55555, \"host_ip\": \"localhost\", \"host_port\": 30555, \"host_port_end\": 30555 } ], \"log_config\": { \"driver_config\": { \"type\": \"json-file\", \"max_files\": 2, \"max_size\": \"1M\", \"root_dir\": \"\" }, \"mode_config\": { \"mode\": \"blocking\", \"max_buffer_size\": \"\" } }, \"resources\": null }, \"io_config\": { \"attach_stderr\": false, \"attach_stdin\": false, \"attach_stdout\": false, \"open_stdin\": false, \"stdin_once\": false, \"tty\": false }, \"config\": { \"env\": [ \"RUST_LOG=info\", \"vehicle_data_broker=debug\" ], \"cmd\": [] }, \"network_settings\": null, \"state\": { \"pid\": -1, \"started_at\": \"\", \"error\": \"\", \"exit_code\": 0, \"finished_at\": \"\", \"exited\": false, \"dead\": false, \"restarting\": false, \"paused\": false, \"running\": false, \"status\": \"\", \"oom_killed\": false }, \"created\": \"\", \"manually_stopped\": false, \"restart_count\": 0 } The only difference to the actual internal state representation is that fields in the manifest can be left empty (\"\") if they are not important for the deployment. These values will be filled in with defaults by kanto-cm after deployment.\nFor example, you do not need to specify the container “id” in the manifest, as an unique uuid would be assigned automatically after deployment.\nContainer deployment in Leda Kanto-auto-deployer can run as a one-shot util that goes through the manifest folder (default: /data/var/containers/manifests) and deploys required containers.\nWhen you pass the --daemon flag it would enable the “filewatcher” module that would continuously monitor the provided path for changes/creation of manifests.\nThe Bitbake recipe for building and installing the auto deployer service can be found at kanto-auto-deployer_git.bb.\nThis recipe also takes all manifests in the kanto-containers directory and installs them in the directory specified by the KANTO_MANIFESTS_DIR BitBake variable (weak default: /var/containers/manifests).\nImportant: To deploy a container in the final Leda image, all you generally need to do is add the manifest in the kanto-containers directory and re-build.\nConditional compilation of the filewatcher module To reduce binary bloat the --daemon option is namespaced under the filewatcher conditional compilation flag (enabled by default). To compile KAD without the filewatcher module run: cargo build --release --no-default-features. (Implemented in Leda Utils PR#35)\n","categories":"","description":"","excerpt":"TLDR: To deploy a container in the final Leda image, all you generally …","ref":"/leda/docs/build/dev-and-maintenance/rust/kanto-auto-deployer/","tags":"","title":"Kanto Auto deployer (KAD)"},{"body":"The Eclipse Leda quickstart image has CAN-Bus kernel modules and some CAN hardware drivers pre-installed. However, some hardware configuration needs to be adapted at boot time depending on the specific CAN-Extension being attached to the device.\nOn Raspberry Pi, there is a /boot/config.txt file where you can configure the dtoverlay options accordingly.\nNote: After modification, the device requires rebooting for the changes to take effect.\nMCP2515 based modules Products:\nWaveshare RS485 CAN HAT for Raspberry Pi dtoverlay=mcp2515-can0,oscillator=12000000,interrupt=25,spimaxfrequency=2000000 MCP2518FD based modules Products:\nWaveshare 2-Channel Isolated CAN FD Expansion HAT for Raspberry Pi, Multi Protections dtoverlay=2xMCP2517FD #dtoverlay=2xMCP2518FD-spi0 ","categories":"","description":"","excerpt":"The Eclipse Leda quickstart image has CAN-Bus kernel modules and some …","ref":"/leda/docs/general-usage/raspberry-pi/raspberry-can-hats/","tags":"","title":"CAN-Bus extensions"},{"body":"The Dog Mode use case has been derived from the Eclipse Velocitas Dog Mode example and the Eclipse Kuksa.VAL HVAC Service example.\nDescription In the Dog Mode use case, an existing vehicle service (such as HVAC for Heating, Ventilation and Air Conditioning) is used for another use case. When a driver enables the dog mode, the vehicle will keep the climate in a status to accomodates the pet while the driver is gone for a few minutes.\nThe focus on this example is to show how an additional application can reuse existing functionality for new use cases. The vehicle service being used does not need to be adapted for the new use case. The new use case is deployed as an additional functionality, separated from the rest of the existing system.\nArchitecture Overview Cloud or mobile trigger: not part of the Leda image, but can be simulated by issueing MQTT messages Eclipse Velocitas - Vehicle Application: Dog Mode (to be deployed by user as part of the Velocitas tutorial) Eclipse Kuksa.VAL - Example Service: HVAC Service (pre-installed) Eclipse Kuksa.VAL - Data Broker (pre-installed) Getting started Follow the Velocitas tutorial: build and deploy your clone of the dog mode example\nDownload and run the Leda quickstart image\nDeploy the application to the container runtime, either manually by using kanto-cm create or by providing a deployment descriptor in /var/containers/manifests. An example deployment descriptor can be found in meta-leda-components. Details on the deployment can be found in Leda Vehicle Applications\nEnsure the databroker and the service containers are running and you know how to check their log files\nMonitor vehicle data: mosquitto_sub -t dogmode/display\nEnable dog mode by using the databroker-cli\nconnect set Vehicle.Cabin.DogMode 1 ","categories":"","description":"","excerpt":"The Dog Mode use case has been derived from the Eclipse Velocitas Dog …","ref":"/leda/docs/app-deployment/dog-mode/","tags":"","title":"Dog Mode"},{"body":" Download latest Eclipse Leda release Run Eclipse Leda on emulated Qemu devices or on Raspberry Pi 4 Configure device, e.g. provision the device Explore the device tools Develop your first Vehicle App using Eclipse Velocitas template Deploy a Vehicle App to the device ","categories":"","description":"","excerpt":" Download latest Eclipse Leda release Run Eclipse Leda on emulated …","ref":"/leda/docs/general-usage/","tags":"","title":"Getting Started"},{"body":"The KantoUI tool is a text-based user interface for conveniently managing containers in the Kanto Container Management. It supports simple navigation using keyboard and mouse to select a specific container. Commands to start, stop, remove and re-deploy containers are available along with a functionality to retrieve the application logs of a selected container.\nKanto User Interface Usage:\nkantui Example output:\nCommand Line Options Print command line help:\nroot@qemux86-64:~# kantui --help kantui 0.2.0 A TUI for Kanto CM that allows easier management of deployed containers. Requires root. USAGE: kantui [OPTIONS] OPTIONS: -c, --config-file-path \u003cCONFIG_FILE_PATH\u003e Set a custom path for the kantui configuration file [default: /etc/kantui/kantui_conf.toml] -h, --help Print help information -V, --version Print version information Note: All config values can be overridden through env variables prefixed with KANTUI_, e.g. KANTUI_STOP_TIMEOUT=5 overrides the timeout before SIGKILL is sent to be 5 seconds. Keyboard commands Arrow keys Up and Down to select a container Arrow keys Left and Right to select a column Enter to change the sort ordering of the currently selected column S to start the selected container which is currently not running P to stop the selected container R to remove a container L to show the log output of a container D to redeploy an existing container (rereads deployment descriptor) Q to quit kantui Note: The mouse can be used to select ui items when holding the Shift key.\nStarting, Stopping, Removing containers To use the lifecycle commands on a container:\nSelect a container by using the mouse or the arrow keys. The selected container is highlighted. Press one of the lifecycle commands, e.g. s, p or r Wait for the value in the State column to change, before issueing the next command. Note: When using the lifecycle commands for containers (Start, Stop, Remove), it may take a few seconds before the UI is updated with the status changes. The amount of time before a container is forcefully killed is determined by the stop_timeout configuration option.\nShow container Logs To view the container’s log output:\nSelect a container by using the mouse or the arrow keys. Press the L key Log output will be displayed (tail, oldest messages first) Use the arrow keys Up and Down or drag the scrollbar using your mouse to scroll through the log Close the Log viewer by pressing Enter or clicking on the OK button Note: The log output is not followed automatically. Close the dialog and reopen to see new output.\nRedeploying containers To redeploy a container, e.g. when a deployment descriptor has changed on disk:\nSelect a container by using the mouse or the arrow keys. Press the P key to stop the container Press the R key to remove the container Press the D key to invoke the Kanto Auto Deployer, which will redeploy the missing containers Note: Only containers managed by Kanto Auto Deployer will be redeployed.\nColumn Sorting To sort a column:\nSelect the column using the Left and Right arrow keys Press Enter to activate sorting Press Enter again on a sorted column to invert sort order (Ascending -\u003e Descending -\u003e Ascending) Note: The selected sort order is not persisted and will reset to the default on restart: By ID, ascending\nConfiguration File The default location of the configuration file is /etc/kantui/kantui_conf.toml:\n# General Configuration Options socket_path = \"/run/container-management/container-management.sock\" # Path to kanto-cm unix socket stop_timeout = 5 # timeout (integer) in seconds before a SIGKILL is sent after a SIGTERM [keyconfig] start_btn_name = \"[S]tart\" start_kbd_key = \"s\" stop_btn_name = \"Sto[P]\" stop_kbd_key = \"p\" remove_btn_name = \"[R]emove\" remove_kbd_key = \"r\" logs_btn_name = \"[L]ogs\" logs_kbd_key = \"l\" quit_btn_name = \"[Q]uit\" quit_kbd_key = \"q\" redeploy_btn_name = \"Re[D]eploy\" redeploy_kbd_key = \"d\" # Includes a shell lexer so anything that would be a valid shell command can be used # No pipes/redirects allowed. # N.B.: Command inherits kantui's privileges (root) redeploy_command = \"systemctl restart kanto-auto-deployer.service\" ","categories":"","description":"","excerpt":"The KantoUI tool is a text-based user interface for conveniently …","ref":"/leda/docs/general-usage/utilities/kantui/","tags":"","title":"KantUI"},{"body":"Follow these steps to do a manual device provisioning:\nGenerate the device certificate (eg using openssl) and sign it with your CA. Log in to Azure Portal, Go to Azure Iot Hub and create a new device Select the proper authentication type, e.g. X.509 Self-signed or X.509 CA Signed Copy the device certificate (cert file and key file) to the device to /data/var/certificate Restart cloud connector service or container. Create a device in Azure IoT Hub For the device to be connectable, it needs to be known to the cloud service first. In these steps, we will create a new device identity by using Azure IoT Hub.\nPre-Requisites:\nVirtual device must already be started with runqemu ... or leda\nNote: For Raspberry Pi, please follow the manual steps below and adapt the SSH connection options to the IP of your Raspbery Pi.\nThe virtual device needs to be remotely accessible via ssh port 2222 on the host’s localhost (Qemu port forwarding in userspace) or via ssh port 22 on the IP address 192.168.7.2 (Qemu virtual networking using TAP network interface)\nThe container runtime needs to have started successfully, check with sdv-health\nA Device has been created in Azure IoT Hub\nNote: Do NOT create an “edge” device.\nConfigure authentication on device For the proper device authentication, the device management backend authority needs to issue a device-specific certificate and sign it. This is a complex process and subject to the specific situation.\nFor the Leda quickstart images, the software configuration is prepared with dummy certificates which need to be replaced.\nATTENTION: The Leda example device certificates are public and insecure, they only serve demonstration purposes. You need to replace the intermediate certificates and device certificates with your own.\nGenerate a device certificate using openssl Sign it with your intermediate CA certificate Put it into /data/var/certificate/ Restart the cloud connector service or container: systemctl restart cloud-connector or kanto-cm stop -n cloudconnector --force; kanto-cm start -n cloudconnector When finished, continue with\nDeploying a Vehicle App Performing a Self Update Private container registries Please refer to the Container Registries on how to configure private container registries.\n","categories":"","description":"","excerpt":"Follow these steps to do a manual device provisioning:\nGenerate the …","ref":"/leda/docs/device-provisioning/manual-provisioning/","tags":"","title":"Manual Provisioning"},{"body":"Initializing BitBake environment Initialize the build environment and start the build for QEMU:\nkas build kas/leda-qemux86-64.yaml Building specific recipes General usage:\nkas build kas/leda-qemux86-64.yaml --target \u003crecipename\u003e Metalayer Structure meta-leda-bsp \\-- classes // Reusable BitBake Classes, eg for offline container image pre-caching \\-- conf // Distribution specific configurations, eg version numbers, release codename \\-- recipes-bsp // Board Support Packages, eg specifics for QEMU and Raspberry Pi meta-leda-components \\-- classes // Reusable BitBake Classes, eg for offline container image pre-caching \\-- conf // Distribution specific configurations, eg version numbers, release codename \\-- recipes-sdv |-- eclipse-leda // Build recipes for Eclipse Leda Incubator components |-- eclipse-kuksa // Build recipes for Eclipse Kuksa |-- eclipse-cyclonedds // Build recipes for Eclipse CycloneDDS |-- northstar // Build recipes for Northstar Container Runtime |-- packagegroups // Grouping packages \\-- sdv-base // SDV Base Bundle: fstab, can0.network |--- base-files |--- SDV Core Utilities \\--- SDV Utilities |-- sdv-containers // Container images recipes for pre-caching / airgap installation |--- Cloud Agent |--- Data Broker |--- Feeder CAN |--- OTel Collector |--- Self Update Agent |--- Vehicle Update manager |--- Example Seat Service \\--- ... |-- sdv-core // SDV Core Bundle |--- SDV RAUC Bundle // RAUC Update Bundle Manifest \\-- tools // Convenience tools for the \"full\" image, eg nerdctl and kantui meta-leda-distro \\-- classes // Reusable BitBake Classes, eg for offline container image pre-caching \\-- conf // Distribution specific configurations, eg version numbers, release codename \\-- recipes-containers // Container related configuration recipes (containerd, nerdctl) \\-- recipes-core // Core recipes (base-files, systemd) \\-- recipes-kernel // Kernel configuration, eg kernel modules, logging, virtio \\-- recipes-sdv-distro // Image definitions \\-- wic // WIC Kickstarter files - Partition layouts meta-leda-distro-container \\-- classes // Reusable BitBake Classes, eg for offline container image pre-caching \\-- conf // Distribution specific configurations, eg version numbers, release codename \\-- recipes-sdv // Build containers with Yocto Base Bundle Contains the recipes to build and install the minimal set of dependencies for the SDV stack on the edge device. With these minimal components, the SDV stack should be able to bootstrap itself.\nCAN-Bus Kernel Configuration To enable support for CAN bus related modules, the kernel needs to be reconfigured. This is done by the sdv-canbus-modules.inc include file in the recipes-kernel/linux folder, which patches Poky’s linux-yocto recipe.\nVerifying and displaying the current kernel configuration: bitbake -e virtual/kernel\nTo verify the recipe and the kernel configuration: bitbake linux-yocto -c kernel_configcheck -f\nThe kernel config file can be found in: ./tmp/work/qemux86_64-poky-linux/linux-yocto/*/linux-qemux86_64-standard-build/.config\nCore Bundle Contains the recipes to build and install additional SDV components, which are required for a proper runtime setup.\nContainers Contains the recipes for pre-installing specific containers into the container management at runtime. This is mainly for pre-caching container image layers onto the device to speed up the initial deployment but can also be used to enable offline usecases.\nBuild Host System Requirements Yocto Project 4.0 (kirkstone) or higher 100GB+ free disk space per build configuration Online connection for fetching sources and container images ","categories":"","description":"","excerpt":"Initializing BitBake environment Initialize the build environment and …","ref":"/leda/docs/build/metalayer/","tags":"","title":"Metalayer"},{"body":"Container Management The container management will respond to the cloud connectivity status message by initially sending a list of containers:\nContainer Management responds with a list of containers in the topic e/\u003ctenantId\u003e/\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers { \"topic\": \"\u003ctenantId\u003e/\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers/things/twin/commands/modify\", \"headers\": { \"response-required\": false }, \"path\": \"/features/SoftwareUpdatable\", \"value\": { \"definition\": [ \"org.eclipse.hawkbit.swupdatable:SoftwareUpdatable:2.0.0\" ], \"properties\": { \"status\": { \"softwareModuleType\": \"oci:container\", \"installedDependencies\": { \"ghcr.io%2Feclipse%2Fkuksa.val%2Fdatabroker.\u003cuuid\u003e:0.2.5\": { \"group\": \"ghcr.io/eclipse/kuksa.val/databroker\", \"name\": \"\u003cuuid\u003e\", \"version\": \"0.2.5\" }, \"ghcr.io%2Feclipse%2Fkuksa.val.services%2Fseat_service.\u003cuuid\u003e:v0.1.0\": { \"group\": \"ghcr.io/eclipse/kuksa.val.services/seat_service\", \"name\": \"\u003cuuid\u003e\", \"version\": \"v0.1.0\" }, \"ghcr.io%2Feclipse-leda%2Fleda-contrib-cloud-connector%2Fcloudconnector.\u003cuuid\u003e:latest\": { \"group\": \"ghcr.io/eclipse-leda/leda-contrib-cloud-connector/cloudconnector\", \"name\": \"\u003cuuid\u003e\", \"version\": \"latest\" }, \"ghcr.io%2Feclipse-leda%2Fleda-contrib-self-update-agent%2Fself-update-agent.\u003cuuid\u003e:build-20\": { \"group\": \"ghcr.io/eclipse-leda/leda-contrib-self-update-agent/self-update-agent\", \"name\": \"\u003cuuid\u003e\", \"version\": \"build-20\" }, \"ghcr.io%2Feclipse-leda%2Fleda-contrib-vehicle-update-manager%2Fvehicleupdatemanager.\u003cuuid\u003e:latest\": { \"group\": \"ghcr.io/eclipse-leda/leda-contrib-vehicle-update-manager/vehicleupdatemanager\", \"name\": \"\u003cuuid\u003e\", \"version\": \"latest\" } } } } } } Container Management answers with an additional message for each container in the topic e/\u003ctenantId\u003e/\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers { \"topic\": \"\u003ctenantId\u003e/\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers/things/twin/commands/modify\", \"headers\": { \"response-required\": false }, \"path\": \"/features/Container:\u003cuuid\u003e\", \"value\": { \"definition\": [ \"com.bosch.iot.suite.edge.containers:Container:1.5.0\" ], \"properties\": { \"status\": { \"name\": \"seatservice-example\", \"imageRef\": \"ghcr.io/eclipse/kuksa.val.services/seat_service:v0.1.0\", \"config\": { \"domainName\": \"seatservice-example-domain\", \"hostName\": \"seatservice-example-host\", \"env\": [ \"VEHICLEDATABROKER_DAPR_APP_ID=databroker\", \"BROKER_ADDR=databroker-host:30555\", \"RUST_LOG=info\", \"vehicle_data_broker=info\" ], \"restartPolicy\": { \"type\": \"UNLESS_STOPPED\" }, \"extraHosts\": [ \"databroker-host:host_ip\" ], \"portMappings\": [ { \"proto\": \"tcp\", \"hostPort\": 30051, \"hostPortEnd\": 30051, \"containerPort\": 50051, \"hostIP\": \"localhost\" } ], \"networkMode\": \"BRIDGE\", \"log\": { \"type\": \"JSON_FILE\", \"maxFiles\": 2, \"maxSize\": \"1M\", \"mode\": \"BLOCKING\" } }, \"createdAt\": \"2023-02-02T08:46:33.792687313Z\", \"state\": { \"status\": \"RUNNING\", \"pid\": 13627, \"startedAt\": \"2023-02-02T09:51:08.049572297Z\", \"finishedAt\": \"2023-02-02T09:50:51.752255799Z\" } } } } } ","categories":"","description":"","excerpt":"Container Management The container management will respond to the …","ref":"/leda/docs/device-provisioning/container-management/orchestration/","tags":"","title":"Orchestration"},{"body":"The bootable Leda Quickstart images are disk image with multiple partitions:\nTwo bootloader partitions, to enable A/B update process A separate partition to hold bootloader status information An optional rescue partition with basic operating system and tooling Two rootfs partitions with a full installation of the operating system, to enable A/B update process A data partition for storing container runtime data Partition Layout for QEMU x86-64 The x86_64 image uses GRUB as a bootloader and the partition layout is as follows:\nPartition Layout for QEMU ARM-64 The partition layout for QEMU ARM-based images are comparable, except:\nBootloader is replaced with U-Boot Partition Layout for Raspberry Pi The partition layout for Raspberry Pi images are comparable, except:\nBootloader is replaced with U-Boot The last partition (the data partition) is marked as growable, to allow the use of the larger SD-Card capacities for container runtime data ","categories":"","description":"","excerpt":"The bootable Leda Quickstart images are disk image with multiple …","ref":"/leda/docs/build/misc/partitioning/","tags":"","title":"Partition Layout"},{"body":"Leda integrates RAUC as a reference implementation and example configuration. It allows the evaluation of the concepts, mechanisms and involved software components in an emulated, virtual environment or on physical devices.\nChecking the RAUC Status Get the current RAUC boot status:\nrauc status Example output:\nroot@qemux86-64:~# rauc status === System Info === Compatible: Eclipse Leda qemu86-64 Variant: Booted from: rootfs.1 (SDV_B) === Bootloader === Activated: rootfs.1 (SDV_B) === Slot States === o [rootfs.1] (/dev/sda5, ext4, inactive) bootname: SDV_B mounted: / boot status: good x [rootfs.0] (/dev/sda4, ext4, booted) bootname: SDV_A boot status: good Forcing to boot the other slot To manually force the device to boot into another slot, mark the current booted slot as bad, mark the other partitions as active and perform a reboot:\nrauc status mark-bad booted rauc status mark-active other reboot now Testing the rescue system By marking both root slots as bad, the bootloader is supposed to boot the rescue system:\nrauc status mark-bad rootfs.0 rauc status mark-bad rootfs.1 reboot now Example output of rauc:\no [rootfs.1] (/dev/sda5, ext4, inactive) bootname: B boot status: bad o [rootfs.0] (/dev/sda4, ext4, booted) bootname: A mounted: / boot status: bad Customizations The configurations can be customized by applying or patching the following files:\nRAUC Configuration file: meta-leda/recipes-bsp/rauc/files/qemux86-64/system.conf Bootloader Configuration file: meta-leda/recipes-bsp/grub/files/grub.cfg The physical disk partition configuration: meta-leda/recipes-sdv/wic/qemux86-grub-efi.wks RAUC System Configuration The RAUC System Configuration is the central configuration of the RAUC Update system.\nExample:\n[system] compatible=Eclipse Leda qemu86-64 bootloader=grub grubenv=/grubenv/grubenv statusfile=/data/rauc.status [keyring] path=ca.cert.pem [slot.efi.0] device=/dev/sda type=boot-gpt-switch region-start=4M region-size=100M [slot.rescue.0] device=/dev/sda3 type=ext4 readonly=true [slot.rootfs.0] device=/dev/sda4 type=ext4 bootname=SDV_A [slot.rootfs.1] device=/dev/sda5 type=ext4 bootname=SDV_B GRUB Bootloader Configuration The GRUB bootloader has a configuration file which describes which partitions are bootable, which partition they are located at and a reference to RAUC’s slot name.\nThe configuration also contains RAUC specific logic and variables required for a proper integration. Please see the full grub.cfg in the source repository and RAUC Documentation - Integration - GRUB for details.\nExcerpt:\n... menuentry \"SDV Slot A (OK=$SDV_A_OK TRY=$SDV_A_TRY)\" { linux (hd0,4)/boot/bzImage root=/dev/vda4 $CMDLINE rauc.slot=SDV_A } menuentry \"SDV Slot B (OK=$SDV_B_OK TRY=$SDV_B_TRY)\" { linux (hd0,5)/boot/bzImage root=/dev/vda5 $CMDLINE rauc.slot=SDV_B } U-Boot Bootloader Configuration Similarly to GRUB, integration of RAUC with U-Boot requires custom boot scripting. A highly detailed explaination can, again, be found in the official RAUC Documentation - Integration - U-Boot.\nMeta-Leda provides such integration recipes and scripts for all U-boot based targets, for which a Leda Quickstart image is available (qemuarm64, qemuarm and rpi4-64). For example:\nMain uboot_%.bbappend Qemuarm custom script integration recipe Qemuarm custom boot.scr Note: A custom U-Boot device defconfig might be required for some devices to be integrated with RAUC. Leda Quickstart images patch the default defconfigs for qemuarm64 and qemuarm to save the U-Boot environment in a VFAT BOOT partition.\nDisk Partitioning with OpenEmbedded Image Creator (WIC) The OpenEmbedded Image Creator is used in BitBake to actually create full disk images with multiple partitions.\nThese disk images are machine specific and the structure of the partitions are configured in OpenEmbedded Kickstart files (*.wks).\nExcerpt qemux86-grub-efi.wks Note: The excerpt is exemplary, please see the sources for a full representation and documentation.\nbootloader --ptable gpt part --fixed-size 50M --source rawcopy --sourceparams=\"file=efi-boot.vfat\" --fstype=vfat --label boot --active part --fixed-size 10M --source rawcopy --sourceparams=\"file=grubenv.vfat\" --fstype=vfat --label grubenv part /rescue --source rootfs --fstype=ext4 --label rescue part / --source rootfs --fstype=ext4 --label root_a part / --source rootfs --fstype=ext4 --label root_b part /data --fixed-size 4G --fstype=ext4 --label data ","categories":"","description":"","excerpt":"Leda integrates RAUC as a reference implementation and example …","ref":"/leda/docs/device-provisioning/self-update/rauc-integration/","tags":"","title":"RAUC Integration"},{"body":"There are multiple variants on how to set up a build environment:\nwith GitHub Codespaces - recommended for developers with restricted internet access, such as corporate proxies, or with Windows hosts with VSCode DevContainer - recommended for Linux hosts Custom setup - for teams ","categories":"","description":"","excerpt":"There are multiple variants on how to set up a build environment:\nwith …","ref":"/leda/docs/build/devenv/","tags":"","title":"Setup development environment"},{"body":"The following message flow is an example for the Self Update use case. The message is triggered by command line via Azure IoT Hub.\nsequenceDiagram autonumber actor flops as Fleet Operations participant backend as Digital Twin participant vum as Vehicle Update Manager participant sua as Self Update Agent participant device as Device flops -\u003e\u003e backend: Rollout Campaign backend --\u003e\u003e vum: Device Command Live Message: yamlApply Note left of backend: C2D Message vum --\u003e\u003e sua: selfupdate/desiredstate SelfUpdateBundle loop Download sua --\u003e\u003e sua: Downloading sua --\u003e\u003e vum: selfupdate/desiredstatefeedback vum --\u003e\u003e backend: progress end loop Installation sua --\u003e\u003e device: Installing Note right of device: RAUC Update Bundle sua --\u003e\u003e vum: selfupdate/desiredstatefeedback vum --\u003e\u003e backend: progress end sua --\u003e\u003e vum: Installed rect rgb(100, 255, 150) sua --\u003e\u003e backend: FINISHED_SUCCESS end opt Reboot vum --\u003e\u003e device: SysRq Reboot end Messages The following describes the message flow with example messages in more detail. The following variables are used for dynamic parts of the messages:\n\u003ccuid\u003e - A Correlation ID in form of a UUID \u003cselfUpdateRequestYaml\u003e or \u003cpayload\u003e- The Desired State Self Update Request message in YAML, as defined by the Self Update Agent API \u003chub\u003e - The name or identifier of the message hub \u003cdevice\u003e - The device identifier used by the message hub or other components to identify the device. Cloud backend sends the Self-Update Request Message as YAML embedded into an Azure IoT Hub C2D Message Envelope:\nPayload:\n{ \"appId\": \"mc-ota-update\", \"cmdName\": \"desiredstate.update\", \"cId\": \"\u003ccuid\u003e\", \"eVer\": \"2.0\", \"pVer\": \"1.0\", \"p\": \u003cselfUpdateRequestYaml\u003e } Cloud Connector validates envelope and transforms request message into a ContainerOrechestrator message:\nTopic: command//azure.edge:\u003chub\u003e:\u003cdevice\u003e:edge:containers/req/\u003ccuid\u003e/yamlApply\nBody (json):\n{ \"topic\": \"azure.edge/\u003chub\u003e:\u003cdevice\u003e:edge:containers/things/live/messages/yamlApply\", \"headers\": { \"content-type\": \"application/json\", \"correlation-id\": \"\u003ccuid\u003e\"}, \"path\": \"/features/ContainerOrchestrator/inbox/messages/yamlApply\", \"value\": { \"correlationId\": \"\u003ccuid\u003e\", \"payload\": \"\u003cpayload\u003e\" } } } Note: Payload (Yaml encoded in JSON) omitted here for clarity, see next step.\nVehicle Update manager extracts payload and forward the message to the Self Update Agent message inbox:\nTopic: selfupdate/desiredstate\nMessage:\napiVersion: sdv.eclipse.org/v1 kind: SelfUpdateBundle metadata: name: self-update-bundle-example spec: bundleDownloadUrl: http://leda-bundle-server/sdv-rauc-bundle-qemux86-64.raucb bundleName: swdv-arm64-build42 bundleTarget: base bundleVersion: v1beta3 The Self Update Agent response with status messages during download and installation phases.\nTopic: selfupdate/desiredstatefeedback\nMessage:\napiVersion: sdv.eclipse.org/v1 kind: SelfUpdateBundle metadata: name: \"self-update-bundle-example\" spec: bundleDownloadUrl: \"http://leda-bundle-server/sdv-rauc-bundle-qemux86-64.raucb\" bundleName: \"swdv-arm64-build42\" bundleTarget: base bundleVersion: v1beta3 state: message: Entered Downloading state name: downloading progress: 0 techCode: 0 Once finished, the Vehicle Update Manager will also return a FINISHED_SUCCESS message for the conversation with the backend.\nTopic: e/defaultTenant/azure.edge:\u003chub\u003e:\u003cdevice\u003e:edge:containers\nMessage:\n{ \"topic\": \"azure.edge/\u003chub\u003e:\u003cdevice\u003e:edge:containers/things/twin/commands/modify\", \"headers\": { \"response-required\":false }, \"path\": \"/features/ContainerOrchestrator/properties/status/state\", \"value\": { \"manifest\": [], \"status\": \"FINISHED_SUCCESS\", \"correlationId\":\"\u003ccuid\u003e\" } } ","categories":"","description":"","excerpt":"The following message flow is an example for the Self Update use case. …","ref":"/leda/docs/device-provisioning/vehicle-update-manager/message-flow/","tags":"","title":"Message Flow"},{"body":"The k8s ecosystem comes with a lot of utilies that allow for the easier management of containers (such as k9s). The kantui util aims to be a “nice” text user interface that lets the user start/stop/remove/get logs of deployed containers in kanto-cm.\nDevelopment notes This tool is again based on the ideas in Communicating with Кanto-CM via gRPC.\nIt spins up two threads - an UI thread (drawing/updating UI) and an IO thread (communicating with kanto-cm via gRPC). The communication between these two threads happens over an async-priority-channel with ListContainers request having a lower priority than Start/Stop/Remove/Get Logs (“user interaction”) requests.\nThis in an “eventually fair” mechanism of communication. That way even if kanto-cm is handling a slow request (such as stopping a container that does not respect SIGTERM) the UI thread is never blocked, allowing for a responsive-feeling UI. The size of the channel is 5 requests and the UI is running at 30 fps. Thus even if the UI gets out-of-sync with the actual state of container management it would be “only” for 5 out 30 frames.\nCursive and ncurses-rs The cursive crate is used as a high level “framework” as it allows very easy handling of UI events via callbacks, though this might be prone to callback hell.\nThe default backend for cursive is ncurses-rs which a very thin Rust wrapper over the standart ncurses library. This in theory would be the optimal backend for our case as ncurses is a very old and stable library that has buffering (other backends lead to flickering of the UI on updates) and is dynamically linked (smaller final binary size).\nThe ncurses-rs wrapper however is not well-suited to cross-compilation as it has a custom build.rs that generates a small C program, compiles it for the target and tries to run it on the host. The only reason for this C program to exist is to check the width of the char type. Obviously, the char type on the host and the target might be of different width and this binary might not even run on the host machine if the host and target architectures are different.\nAfter coming to the conclusion that the ncurses-rs backend was not suitable, kantui was migrated to the termion backend + the cursive_buffered_backend crate which mitigates the flickering issue.\n[dependencies] ... cursive_buffered_backend = \"0.5.0\" [dependencies.cursive] default-features=false version = \"0.16.2\" features = [\"termion-backend\"] This completely drops the need for ncurses-rs but results in a slightly bigger binary (all statically linked).\nBitbake Recipe The recipe was created following the guidelines in Generating bitbake recipes with cargo-bitbake and can be found in meta-leda/meta-leda-components/recipes-sdv/eclipse-leda/.\nFuture improvement notes The gRPC channel can get blocked thus effectively “blocking” the IO-thread until it is freed-up again. Maybe open a new channel for each request (slow/resource heavy)?\nReorganize the code a bit, move all generic functionally in the lib.rs.\n","categories":"","description":"","excerpt":"The k8s ecosystem comes with a lot of utilies that allow for the …","ref":"/leda/docs/build/dev-and-maintenance/rust/kantui/","tags":"","title":"Kantui"},{"body":"BSP packages for emulated WiFi devices (QEMU) and hardware device drivers are provided in meta-leda for supported hardware. They usually do not require extra configuration.\nFor a guide on how to connect to a wireless network check the Connecting to Wi-Fi networks page.\nRaspberry Pi 4B 64 The required kernel modules and binary blobs are provided with the sdv-wifi-kernel-config.inc config file and the packagegroup-sdv-rpi4wifi packagegroup. These are included in sdv-image-full.bb and sdv-image-minimal.bb by default.\nIf you, however, decide to define your own custom image based on Custom Distros, you would have to make sure the packagegroup is installed to enable WiFi connectivity.\nQEMU QEMU images provide the kernel modules necessary to set-up a virtual wlan interface and connect it to a virtual wifi network. This can be useful in various testing scenarios.\nTo create and link a virtual WiFi interface to eth0, boot your QEMU image and run:\n$ ip link add link eth0 name wlan0 type virt_wifi The SSID of the virtual network you can connect to is VirtWifi.\nNote: Leda Quickstart QEMU images set the name of the default virtual ethernet interface to eth0 through kernel CMDLINE configurations (net.ifnames=0 biosdevname=0). If you are building a custom image with a different kernel CMDLINE replace eth0 with the name of your virtual interface (check ifconfig).\n","categories":"","description":"","excerpt":"BSP packages for emulated WiFi devices (QEMU) and hardware device …","ref":"/leda/docs/general-usage/wifi-configuration/","tags":"","title":"Wifi Configuration"},{"body":"The self update agent (SUA) is a component responsible for the OS Update process. SUA is communicating on MQTT interface via usage of defined messages. Internally, SUA uses RAUC to perform the update.\nFollowing sequence diagram shows the happy path example of communication between components.\nProcess Overview sequenceDiagram participant m as MQTT Broker participant s as SUA participant r as RAUC s --\u003e\u003e m: connect loop Wait for message: selfupdate/desiredstate Note left of s: Initial start s -\u003e\u003e m: selfupdate/currentstate Note left of s: Trigger for OTA m -\u003e\u003e s: selfupdate/desiredstate s -\u003e\u003e m: selfupdate/desiredstatefeedback: downloading 0% s -\u003e\u003e s: download bundle s -\u003e\u003e m: selfupdate/desiredstatefeedback: downloading 51% s -\u003e\u003e r: install s -\u003e\u003e m: selfupdate/desiredstatefeedback: installing 0% r -\u003e\u003e r: install r -\u003e\u003e s: share progress: e.g. 51% s -\u003e\u003e m: selfupdate/desiredstatefeedback: installing 51% r -\u003e\u003e s: installation ready s -\u003e\u003e m: selfupdate/desiredstatefeedback: installed s -\u003e\u003e m: selfupdate/desiredstatefeedback: idle end MQTT Message Definitions MQTT messages are specified as follows:\nselfupdate/desiredstate Topic Direction Description selfupdate/desiredstate IN This message triggers the update process. The payload shall contain all data necessary to obtain the update bundle and to install it. apiVersion: \"sdv.eclipse.org/v1\" kind: SelfUpdateBundle metadata: name: self-update-bundle-example spec: bundleName: swdv-arm64-build42 bundleVersion: v1beta3 bundleDownloadUrl: https://example.com/repository/base/ bundleTarget: base selfupdate/currentstate Topic Direction Description selfupdate/currentstate OUT This message is being sent once, on SUA start. It contains information about currently installed OS version. apiVersion: \"sdv.eclipse.org/v1\" kind: SelfUpdateBundle metadata: name: self-update-bundle-example spec: bundleVersion: v1beta3 selfupdate/desiredstatefeedback Topic Direction Description selfupdate/desiredstatefeedback OUT This message is being sent by SUA to share current progress of triggered update process. This is the OUT counterpart of selfupdate/desiredstate input message. apiVersion: \"sdv.eclipse.org/v1\" kind: SelfUpdateBundle metadata: name: self-update-bundle-example spec: bundleName: swdv-arm64-build42 bundleVersion: v1beta3 bundleDownloadUrl: https://example.com/repository/base/ bundleTarget: base state: name: \"idle|installing|etc.\" progress: 0|51|99|etc., techCode: 0|1|5|etc., message: \"Cannot download from url|Bundle already installed|etc.\" state enum State name field can have one of following values:\nState Description Additional payload data uninitialized When the SUA is not configured yet - idle Configured and waiting for messages - downloading Downloading the bundle file progress installing Performing installation progress installed Installation process was successful, new OS version is installed on inactive disc Slot. Important: to finish the OTA process, reboot is required, and it shall be performed by another component, such as the Vehicle Update Manager. - failed Error occurred techCode techCode values techCode field is providing additional details to the state value. It is especially useful for the failed state, as it can specify the reason of failure.\nValue Description 0 OK, no error 1001 Download failed 2001 Invalid Bundle 3001 Installation failed 4001 Update rejected, bundle version same as current OS version 5001 Unknown Error ","categories":"","description":"","excerpt":"The self update agent (SUA) is a component responsible for the OS …","ref":"/leda/docs/device-provisioning/self-update/api/","tags":"","title":"API Reference"},{"body":"After setting up your VSCode DevContainer or GitHub Codespace you can proceed with the actual build process. Here you have two choices - either using the kas-build system or setting up the build manually.\nBuilding with kas This is the easiest way to build leda semi-automatically\ncd /workspaces/meta-leda-fork/ Open the VSCode terminal and run kas build Note: you can alter the build options by modifying the .config.yaml file in the trunk of the repository Building manually You can also build Leda manually if more customization of the build process is required.\nexport LEDA_WORKDIR=/workspaces/meta-leda-fork/\ncd ${LEDA_WORKDIR}\nClone the Poky repository with the required release, e.g. kirkstone and pull updates if necessary:\ngit clone git://git.yoctoproject.org/poky cd poky git checkout -t origin/kirkstone -b kirkstone git config pull.rebase false git pull Prepare the build environment:\nsource oe-init-build-env Dry-run a build of the Linux Kernel recipe using BitBake:\nbitbake --dry-run linux-yocto Checkout the meta-layer dependencies for Leda:\ncd $LEDA_WORKDIR git clone -b kirkstone https://github.com/rauc/meta-rauc.git meta-rauc git clone -b kirkstone https://github.com/rauc/meta-rauc-community.git meta-rauc-community git clone -b kirkstone https://git.yoctoproject.org/meta-virtualization meta-virtualization git clone -b kirkstone https://git.openembedded.org/meta-openembedded meta-openembedded Change to the poky/build directory (generated from the oe-init-build-env script automatically)\nAdd all the necessary meta-layers:\nbitbake-layers add-layer ${LEDA_WORKDIR}/meta-rauc bitbake-layers add-layer ${LEDA_WORKDIR}/meta-rauc-community/meta-rauc-qemux86 bitbake-layers add-layer ${LEDA_WORKDIR}/meta-openembedded/meta-oe bitbake-layers add-layer ${LEDA_WORKDIR}/meta-openembedded/meta-filesystems bitbake-layers add-layer ${LEDA_WORKDIR}/meta-openembedded/meta-python bitbake-layers add-layer ${LEDA_WORKDIR}/meta-openembedded/meta-networking bitbake-layers add-layer ${LEDA_WORKDIR}/meta-virtualization bitbake-layers add-layer ${LEDA_WORKDIR}/meta-leda-components bitbake-layers add-layer ${LEDA_WORKDIR}/meta-leda-bsp bitbake-layers add-layer ${LEDA_WORKDIR}/meta-leda-distro Dry run:\nDISTRO=leda bitbake --dry-run sdv-image-all Real build:\nDISTRO=leda bitbake sdv-image-all You can also build one of the target recipies this way:\nDISTRO=leda bitbake kanto-container-management Note: in this case you can set the target architecture and other build options in the build/local.conf file\n","categories":"","description":"","excerpt":"After setting up your VSCode DevContainer or GitHub Codespace you can …","ref":"/leda/docs/build/devenv/build-kas-manually/","tags":"","title":"Building with kas/manually"},{"body":"Container Metrics Container-level metrics, such as CPU utilization or memory usage, can be retrieved on-demand and continuously by enabling the container metrics events. This is done by sending a request to the topic command//\u003cnamespaceId\u003e:\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers/req/\u003ccorrelationId\u003e/request:\nEnable Container Metrics with a frequency of 5s: { \"topic\": \"dummy-namespace/dummy-gateway:dummy-device-id:edge:containers/things/live/messages/request\", \"headers\": { \"timeout\": \"10\", \"response-required\": true, \"content-type\": \"application/json\", \"correlation-id\": \"3fdc463c-293c-4f39-ab19-24aef7944550\" }, \"path\": \"/features/Metrics/inbox/messages/request\", \"value\": { \"frequency\": \"5s\" } } Example command line:\nmosquitto_pub -t command//dummy-namespace:dummy-gateway:dummy-device-id:edge:containers/req/3fdc463c-293c-4f39-ab19-24aef7944550/request -m '{\"topic\":\"dummy-namespace/dummy-gateway:dummy-device-id:edge:containers/things/live/messages/request\",\"headers\":{\"timeout\":\"10\",\"response-required\":true,\"content-type\":\"application/json\",\"correlation-id\":\"3fdc463c-293c-4f39-ab19-24aef7944550\"},\"path\":\"/features/Metrics/inbox/messages/request\",\"value\":{\"frequency\":\"5s\"}}' Container Metrics answers with an additional message for each container in the topic e/\u003ctenantId\u003e/\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers { \"topic\": \"\u003ctenantId\u003e/\u003cgatewayId\u003e:\u003cdeviceId\u003e:edge:containers/things/twin/commands/modify\", \"headers\": { \"response-required\": false }, \"path\": \"/features/Container:\u003cuuid\u003e\", \"value\": { \"definition\": [ \"com.bosch.iot.suite.edge.containers:Container:1.5.0\" ], \"properties\": { \"status\": { \"name\": \"seatservice-example\", \"imageRef\": \"ghcr.io/eclipse/kuksa.val.services/seat_service:v0.1.0\", \"config\": { \"domainName\": \"seatservice-example-domain\", \"hostName\": \"seatservice-example-host\", \"env\": [ \"VEHICLEDATABROKER_DAPR_APP_ID=databroker\", \"BROKER_ADDR=databroker-host:30555\", \"RUST_LOG=info\", \"vehicle_data_broker=info\" ], \"restartPolicy\": { \"type\": \"UNLESS_STOPPED\" }, \"extraHosts\": [ \"databroker-host:host_ip\" ], \"portMappings\": [ { \"proto\": \"tcp\", \"hostPort\": 30051, \"hostPortEnd\": 30051, \"containerPort\": 50051, \"hostIP\": \"localhost\" } ], \"networkMode\": \"BRIDGE\", \"log\": { \"type\": \"JSON_FILE\", \"maxFiles\": 2, \"maxSize\": \"1M\", \"mode\": \"BLOCKING\" } }, \"createdAt\": \"2023-02-02T08:46:33.792687313Z\", \"state\": { \"status\": \"RUNNING\", \"pid\": 13627, \"startedAt\": \"2023-02-02T09:51:08.049572297Z\", \"finishedAt\": \"2023-02-02T09:50:51.752255799Z\" } } } } } To disable Container Metrics, send a request with frequency of 0s:\nmosquitto_pub -t command//dummy-namespace:dummy-gateway:dummy-device-id:edge:containers/req/3fdc463c-293c-4f39-ab19-24aef7944550/request -m '{\"topic\":\"dummy-namespace/dummy-gateway:dummy-device-id:edge:containers/things/live/messages/request\",\"headers\":{\"timeout\":\"10\",\"response-required\":true,\"content-type\":\"application/json\",\"correlation-id\":\"3fdc463c-293c-4f39-ab19-24aef7944550\"},\"path\":\"/features/Metrics/inbox/messages/request\",\"value\":{\"frequency\":\"0s\"}}' ","categories":"","description":"","excerpt":"Container Metrics Container-level metrics, such as CPU utilization or …","ref":"/leda/docs/device-provisioning/container-management/container-metrics/","tags":"","title":"Container Metrics"},{"body":" Dependency Type License URL poky OpenEmbedded Metalayer MIT https://www.yoctoproject.org/software-item/poky/ meta-virtualization OpenEmbedded Metalayer MIT https://git.yoctoproject.org/meta-virtualization meta-networking OpenEmbedded Metalayer MIT https://git.yoctoproject.org/meta-networking meta-rauc OpenEmbedded Metalayer MIT https://github.com/rauc/meta-rauc meta-openembedded OpenEmbedded Metalayer MIT https://git.openembedded.org/meta-openembedded meta-security OpenEmbedded Metalayer MIT https://git.yoctoproject.org/meta-security meta-rauc-community OpenEmbedded Metalayer MIT https://github.com/rauc/meta-rauc-community meta-raspberrypi OpenEmbedded Metalayer MIT https://git.yoctoproject.org/meta-raspberrypi ","categories":"","description":"","excerpt":" Dependency Type License URL poky OpenEmbedded Metalayer MIT …","ref":"/leda/docs/project-info/dependencies/","tags":"","title":"Dependencies"},{"body":"The device needs to be configured before it can make a connection to the cloud.\nThe following initial configuration steps are required:\nCreate a device in the cloud backend, such as Azure IoT Hub Configure authentication on device Configure credentials for accessing private container registries ","categories":"","description":"","excerpt":"The device needs to be configured before it can make a connection to …","ref":"/leda/docs/device-provisioning/","tags":"","title":"Device Provisioning"},{"body":"Run the full build To setup the environment and build the Leda image, please refer to: Setup development environment.\nRunning QEMU from existing build Use kas shell -c \"runqemu qemux86-64 ovmf kvm nographic\" \u003ckas-configs\u003e to execute the image. Replace qemux86-64 with one of the other qemu machines, such as qemuarm64 Use the keyword slirp to enable user-networking which does not require root privileges on the host. tun is default but requires setup on the host. Continue with Device Provisioning Variations of runqemu command line Use runqemu ovmf ovmf will enable the UEFI support for IA32 (x86) and X64 (x86-64) guests, for testing the dual-boot capabilities and SDV Self-Update mechanisms All other options are now part of the default Leda distribution configuration (see leda-qemu-settings.inc) Continue with Device Provisioning Running QEMU in the background To start QEMU in the background enter, use nohup and bring the process into the background.\nnohup runqemu qemux86-64 nographic qemuparams=\"-m 2048 -pidfile qemu.pid\" \u0026 The image is then reachable via ssh root@192.168.7.2 This will write a file qemu.pid in the current directory including the process ID of QEMU. Once done, kill -9 \u003cqemu.pid\u003e kills the process.\nRunning with kas-shell If you’ve chosen to build the Leda image with kas, you can use the kas-shell to run QEMU, with kas setting up the environment for you. To do that change to the main working directory and run:\nkas shell -c 'runqemu slirp nographic ovmf sdv-image-full' DHCP Configuration As the Leda Quickstart image will try to retrieve its IP address via DHCP broadcast request, it is good to run a DHCP daemon on the host, listening on the respective TAP network interface of QEMU. This will then simulate a LAN with DHCP server and let’s us control which IP address gets assigned to multiple QEMU instances.\nThe run-dhcp.sh utility will run an ISC-DHCP server on the host. The default configuration has a couple of MAC addresses preconfigured.\n","categories":"","description":"","excerpt":"Run the full build To setup the environment and build the Leda image, …","ref":"/leda/docs/build/run-build/","tags":"","title":"Run the build"},{"body":"Displays the current device configuration, such as Device ID.\nNote: Requires the Cloud Connector component to be configured and running.\nUsage:\nsdv-device-info Usage Synposis: ./sdv-device-info [options] [command]\nFull help:\nroot@qemux86-64:~# sdv-device-info --help sdv-device-info v0.2 Usage: /usr/bin/sdv-device-info [options] [command] Show SDV device configuration information Example: /usr/bin/sdv-device-info show Commands: show : Display configuration (default command) help : This message env : Format output for use in scripts Options: --ansi | -a : Don't use colored output. --norestart | -n : Do not automatically restart services --verbose | -v : Enable verbose mode. --help | -h : This message. Use in scripts To use device information on other scripts, it may be useful to source the device information variables into the current environment variable context:\nSynposis: source ./sdv-device-info env\nExample:\n$ source ./sdv-device-info env $ echo $DEVICE_ID exampledevice1 ","categories":"","description":"","excerpt":"Displays the current device configuration, such as Device ID.\nNote: …","ref":"/leda/docs/general-usage/utilities/sdv-device-info/","tags":"","title":"SDV Device Info"},{"body":"Eclipse Leda is using the Robot Framework for black box tests and system tests.\nThe black box tests are supposed to only use public API from SDV components, for example the MQTT interface of the Self Update Agent. The system tests are supposed to test on Leda Distro level and can use shell and SSH commands to verify system behavior, e.g. performing a reboot.\nTest Execution: an external trigger, such as the ./test-docker.sh shell script, starts the leda-tests container. Docker Compose ensures that the needed containers are built and started. The test cases and test resources are copied into the leda-tests container at build time. The Robot process is started and performs the execution of all test cases Black box test cases use the MQTT interface to connect to the test target and publish messages System level test cases use SSH to connect to the test target and execute commands Test reports are written to a mounted volume, so that they are available on the host for further processing Run the tests The easiest way to run the test cases is to run it in the Docker Compose setup:\nClone the leda-distro repository:\ngit clone https://github.com/eclipse-leda/leda-distro Optional: Build both images (qemuarm64 and qemux86-64) using kas / BitBake. If you omit this step, docker compose will download the latest container images from the Eclipse Leda Container Registry on ghcr.io.\nkas build kas/leda-qemux86-64.yml kas build kas/leda-qemuarm64.yml Switch to the docker-snapshot directory:\ncd resources/docker-snapshot/ Run the Leda Tests\n./test-docker.sh Test Reports The output of test-docker.sh will show the test results from Robot.\nThe test reports and debug logs are available on the host’s filesystem in the path resources/docker-snapshot/leda-tests-reports\noutput.xml - The main Robot output report report.html - A Robot HTML summary report leda-tests-xunit.xml - A xUnit report file suitable for rendering with various tools log.html - A Robot HTML report with the test execution log leda-tests-debug.log - Debug log file of the test execution, helpful during implementation of test cases and troubleshooting of failed tests The xunit report is being used to visualize the test execution results in the GitHub Workflow:\nExample Test Report:\nAdding new tests The tests are located in the following locations of the leda-distro repository:\nresources/docker-snapshot/dockerfiles/leda-tests - Robot Tests which are executed inside of a Docker Compose setup tests/src/robot - Robot Tests which can be executed on the build host with a Leda Runqemu instance running General steps are:\nDecide whether to implement a system-level test or a black-box integration test Add the test case to an existing, matching .robot file. If no matching test suite can be found, create a new .robot file. Prefix with the order number, e.g. 33__my-new-test.robot Check if a refactoring of new keywords may be worthwhile for better reusability. ","categories":"","description":"","excerpt":"Eclipse Leda is using the Robot Framework for black box tests and …","ref":"/leda/docs/build/tests/","tags":"","title":"Automated Tests"},{"body":"When deploying containerized applications, the container runtime will pull container images from a (remote) container registry.\nThe pulled container images and their layers are then stored in a local storage.\nPrivate Container Registries To be able to pull container images, the container runtime needs access to the container registry. Some container registries require authentication. The Kanto Container Manager can be configured to use credentials when accessing remote container registries.\nIn the Leda images, the sdv-kanto-ctl tools allows to easily add authentication to the container manager configuration:\nsdv-kanto-ctl add-registry -h \u003cregistryhostname\u003e -u \u003cyour_username\u003e -p \u003cyour_password\u003e For example, to access container images from GitHub Packages in a private repository, you need a GitHub Personal Access Token (PAT) with the read: packages scope. Then, add the repository as shown below:\nsdv-kanto-ctl add-registry -h ghcr.io -u github -p \u003cYour_GitHub_PersonalAccessToken\u003e sdv-kanto-ctl will make the necessary modifications to /etc/container-management/config.json and restarts the container-management.service systemd unit, so that the changes take effect. You may need to recreate or restart the container if a previous pull failed.\nPlease see the Eclipse Kanto Container Manager Configuration reference for details.\n","categories":"","description":"","excerpt":"When deploying containerized applications, the container runtime will …","ref":"/leda/docs/device-provisioning/container-management/container-registries/","tags":"","title":"Container Registries"},{"body":"In the Leda Robot Tests, keywords are used for reusable functionality. Common keywords are defined in resources/docker-snapshot/dockerfiles/leda-tests/leda_keywords.resource\nThe goal is to treat the Leda Quickstart image as a black box, utilizing as much as possible with public APIs.\nInteraction with Self Update Agent Trigger to start update: Send a “Desired State Request” to the target, to install a RAUC Update Bundle Connect and Subscribe to Listen: Wait for the asynchronous messages which indicate a successful installation of an update Arbitrary Commands Nevertheless, during implementation of test cases, it may be necessary to execute lower level processes for system level tests. For that, a fallback is possible to execute arbitrary test commands via remote SSH connection. These commands are executed through another docker container running in the same Docker network (leda-network) and allow access to the target QEMU instances:\nLeda Execute: Execute an arbitrary shell command via SSH on the test target ","categories":"","description":"","excerpt":"In the Leda Robot Tests, keywords are used for reusable functionality. …","ref":"/leda/docs/build/tests/robot-keywords/","tags":"","title":"Robot Keywords"},{"body":"Note: The Rust tests are being replaced with test cases implemented in Robot.\nCross Compiling to X86_64 on Ubuntu 20.04 There is currently a step to cross-compile tests to X86_64. In order to successfully run the step, you need to make sure that the following artifacts are available on the runner:\nrustc + cargo: curl https://sh.rustup.rs -sSf | sh docker: follow https://docs.docker.com/engine/install/ubuntu/ and afterwards https://docs.docker.com/engine/install/linux-postinstall/ build-essential: sudo apt-get install build-essential cross (0.1.16): cargo install cross --version 0.1.16 jq: sudo apt-get install jq -y You may restart your current shell so that all components are available as env vars.\n","categories":"","description":"","excerpt":"Note: The Rust tests are being replaced with test cases implemented in …","ref":"/leda/docs/build/tests/rust-tests/","tags":"","title":"Rust Tests"},{"body":"The provisioning helper script can be used to manually perform a device provisioning with a cloud backend.\nIt is meant as a convenient tool for developers, who wish to connect their device to a selfmanaged cloud backend directly. In a production environment, the device provisioning functionality is implemented either by the Cloud Connector component.\nThe provisioning script currently supports the following backend and authentication options:\nAzure IoT Hub Connection String Device Certificates Azure IoT Device Provisioning Service Device Certificates Usage The sdv-provision script is interactive and asks for the type of backend and authentication option:\nroot@qemux86-64:~# sdv-provision Checking Eclipse Leda Device Provisioning configuration... - Certificates directory exists Checking Device ID - Based on network device: eth0 - Device ID: 52-54-21-4c-f9-5a Checking whether either IdScope or ConnectionString is configured - Neither Id Scope file nor ConnectionString found, needs manual configuration Do you want to use the global Azure IoT Device Provisioning Service (DPS) by using an Id Scope, or do you want to use a direct connection to a specific Azure IoT Hub using a Connection String? d) Azure IoT Device Provisioning Service (DPS) with Id Scope h) Azure IoT Hub with Connection String Choose:d Please enter your Id Scope of the Azure IoT Device Provisioning Service:example Recreating the Cloud Connector container... Checking device certificates - All device certificates are present - Primary device certificate: /data/var/certificates/device.crt - Primary device private key: /data/var/certificates/device.key - Secondary device certificate: /data/var/certificates/device2.crt - Secondary device private key: /data/var/certificates/device2.key Fingerprints (add these to the Azure IoT Hub Device) - Primary thumbprint: 1B172ED3D06F4E25AFFEF675ADCE519457FFFFFF - Secondary thumbprint: B6CD5EACE96E9D0448BCB0BAED2DEE87AFFFFFFF Once a configuration has been selected, the script will:\nGenerate a random Device Id (based on physical network address) Store the Device Id in /etc/deviceid Generate a primary self-signed device certificate pair Generate a secondary self-signed device certificate pair Store the certificates in /data/var/certificates/ Reconfigure the container descriptor in /data/var/containers/manifests_dev/cloudconnector.json Restarting the Cloud Connector container Print the key fingerprints, used for onboarding the device in Azure IoT Device Provisioning Service Reconfiguration Note: Re-running the script will only print the existing configuration.\nTo reconfigure the device and use different options, perform the following steps:\nDelete the generated files\nrm /data/var/certificates/azure.idscope rm /data/var/certificates/azure.connectionstring rm /data/var/certificates/device*.crt rm /data/var/certificates/device*.key Rerun the script\nsdv-provision ","categories":"","description":"","excerpt":"The provisioning helper script can be used to manually perform a …","ref":"/leda/docs/general-usage/utilities/sdv-provision/","tags":"","title":"SDV Provision"},{"body":"This chapter contains use cases and examples for SDV applications.\nSome of these example are taken from the following sources:\nDigital.Auto and its playground Eclipse Velocitas tutorials Eclipse Kuksa.VAL examples ","categories":"","description":"","excerpt":"This chapter contains use cases and examples for SDV applications. …","ref":"/leda/docs/app-deployment/","tags":"","title":"Vehicle Applications"},{"body":"To generically interact with the Vehicle Signals which are managed in the Eclipse Kuksa.VAL Databroker, you can either use the natively installed databroker-cli command line tool, or use the CLI tool from an updated and released containerized image.\nKuksa Databroker CLI To install a new version of the Kuksa Databroker CLI container, follow these steps:\nCreate the container in Kanto:\nkanto-cm create --i --t --network=host --name=databroker-cli ghcr.io/eclipse/kuksa.val/databroker-cli:master Start the command line tool within a container in interactive mode:\nkanto-cm start --a --i --name databroker-cli In the databroker shell, connect to the databroker via the URL http://127.0.0.1:30555/:\nconnect http://127.0.0.1:30555/ Kuksa Client To install a new version of the Kuksa Client container, follow these steps:\nPull the container image\nctr --namespace kanto-cm image pull ghcr.io/eclipse/kuksa.val/kuksa-client:master Create the container in Kanto Namespace:\nctr --namespace kanto-cm container create --net-host --tty ghcr.io/eclipse/kuksa.val/kuksa-client:master kuksa-client Start the container in detached mode:\nctr --namespace kanto-cm tasks start --detach kuksa-client Start the command line tool with additional command line options:\nctr --namespace kanto-cm tasks exec --tty --exec-id sometask kuksa-client /kuksa-client/bin/kuksa-client --port 30555 --protocol grpc --insecure ","categories":"","description":"","excerpt":"To generically interact with the Vehicle Signals which are managed in …","ref":"/leda/docs/app-deployment/kuksa-databroker/","tags":"","title":"VSS \u0026 Kuksa.VAL"},{"body":"This chapter contains a reference of the vehicle signal metadata from the Vehicle Signal Specification Release 3.1.\nThe Vehicle Signals Specification is a tree of standardized information signals.\nIt starts with the Vehicle root node.\n","categories":"","description":"","excerpt":"This chapter contains a reference of the vehicle signal metadata from …","ref":"/leda/docs/vss/","tags":"","title":"Vehicle Signals"},{"body":"\n","categories":"","description":"","excerpt":"\n","ref":"/leda/docs/about/architecture/","tags":"","title":"Architecture"},{"body":"The cloud connector is used in the context of Device Provisioning and cloud backend connectivity.\nOverview Leda Cloud Connector for Azure IoT Hub is a fork (extended and adapted) of the generic Eclipse Kanto’s Azure connector that is being able to process cloud-to-device and device-to-cloud messages as defined for the Software-Defined Vehicle cloud backend.\nRuntime The SDV cloud connector will come up with pluggable architecture that will allow easy transformation of the incoming cloud-to-device command messages (SDV message envelope) to a format suitable and understandable by the rest of the in-vehicle components and vice-versa. It shall be possible to map SDV messages to and from Eclipse Hono and Eclipse Ditto messages using simple configuration, rules written in JSON; thus allowing this component to work together with other Eclipse Kanto components too.\nSource Repository Source Repository: https://github.com/eclipse-leda/leda-contrib-cloud-connector\nBuilding and Deployment The Cloud Connector can either be installed natively into the system image by using the respective Yocto recipe leda-contrib-cloud-connector_git.bb, or the cloud connector can be deployed as a container.\nNative Installation A native installation has the advantage that no additional container runtime is required. In some vehicle system architectures, there are separate devices for connectivity and for general computation. The actual physical device for connectivity may hence have less ressources available which then requires a native installation of such core components.\nAdd the recipe to the image in your Yocto configuration: IMAGE_INSTALL += \"leda-contrib-cloud-connector\" Override the configuration in /etc/cloud-connector/config.json Create the device certificate The cloud-connector can be managed (start, stop, restart) using systemd: systemctl restart cloud-connector Container Installation When the connectivity components can be deployed on the more generic compute module, where a container runtime is available, the cloud connector can also be deployed as a container. This is the default for the Eclipse Leda quickstart images.\nInitial deployment and configuration steps are:\nOn first start, the auto deployment will deploy and start the cloud connector container automatically, but with invalid default values or missing device certificates. The user needs to adapt the device authentication to suit his needs, e.g. creating and providing a device certificate. Check the /data/containers/cloud-connector.json deployment descriptor for the correct location of the certificate files. After this configuration has been done once, the container needs to be restarted using the Kanto CLI: kanto-cm restart -n cloud-connector ","categories":"","description":"","excerpt":"The cloud connector is used in the context of Device Provisioning and …","ref":"/leda/docs/leda-incubator/cloud-connector/","tags":"","title":"Cloud Connector"},{"body":"Thanks for considering to contribute to Eclipse Leda. We really appreciate the time and effort you want to spend helping to improve the project.\nIn order to get you started as fast as possible we need to go through some organizational issues first, though.\nEclipse Development Process This Eclipse Foundation open project is governed by the Eclipse Foundation Development Process and operates under the terms of the Eclipse IP Policy.\nhttps://eclipse.org/projects/dev_process https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf Eclipse Contributor Agreement Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).\nhttp://www.eclipse.org/legal/ECA.php Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.\nFor more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit\nMaking Your Changes Fork the repository on GitHub. Create a new branch for your changes. Note: When forking multiple repositories (eg most of the time, you also need to make modifications to meta-leda), please use the same branch name of each repository. Make your changes following the code style guide for the respective type of content: BitBake Recipes: https://www.openembedded.org/wiki/Styleguide Documentation: https://www.docsy.dev/docs/best-practices/ Shell Scripts (Example Style Guide): https://google.github.io/styleguide/shellguide.html When you create new files make sure you include a proper license header at the top of the file (see License Header section below). Make sure you include test cases for non-trivial features. Make sure the test suite passes after your changes. Commit your changes into that branch. Use descriptive and meaningful commit messages. Start the first line of the commit message with the a GitHub Issue number if available and a title e.g. [#9865] Add token based authentication. Squash multiple commits that are related to each other semantically into a single one. Make sure you use the -s flag when committing as explained above. Push your changes to your branch in your forked repository. Once you’re satisfied with your contribution, open a Pull Request and Eclipse Leda Committers will start with the review of your changes. Note: When working with multiple repositories, you need to open separate Pull Requests for each repository. Adding Documentation to Hugo Add the markdown document to the appropriate folder in the path leda/content/en. Add the front-matter --- title: \"title of the file\" date: 2022-05-09T13:43:25+05:30 --- Additional front matter that can be added – url : \"specifying a definite url to the file\" weight : 10 (used for ordering your content in lists. Lower weight gets higher precedence.) The images need to be put in path leda/static/assets. The image reference should be /assets/image.jpg in the markdown file. (Note: Do not use relative paths or url) In case you are creating a new folder, create _index.md file with the front matter only. Running Locally Install hugo version 0.98.0 extended Release v0.98.0 · gohugoio/hugo (github.com) Install Docsy theme in the path leda/themes/docsy – #Run this command from root directory of velocitas-docs git clone https://github.com/google/docsy.git themes/docsy Install pre-requisites cd themes/docsy/userguide/ npm install npm install --save-dev postcss From the leda directory run the command hugo server visit localhost:1313 to see the rendered static site. Submitting the Changes Submit a pull request via the normal GitHub UI.\nAfter Submitting Do not use your branch for any other development, otherwise further changes that you make will be visible in the PR. License Header Please make sure any file you newly create contains a proper license header like this:\n# /******************************************************************************** # * Copyright (c) 2022 Contributors to the Eclipse Foundation # * # * See the NOTICE file(s) distributed with this work for additional # * information regarding copyright ownership. # * # * This program and the accompanying materials are made available under the # * terms of the Apache License 2.0 which is available at # * https://www.apache.org/licenses/LICENSE-2.0 # * # * SPDX-License-Identifier: Apache-2.0 # ********************************************************************************/ You should, of course, adapt this header to use the specific mechanism for comments pertaining to the type of file you create.\nImportant\nPlease do not forget to add your name/organization to the LICENSE file’s Copyright Holders section. If this is not the first contribution you make, then simply update the time period contained in the copyright entry to use the year of your first contribution as the lower boundary and the current year as the upper boundary, e.g.\nCopyright 2017, 2018 ACME Corporation\nBuild On every PR merge a pipeline run will be triggered. This run will trigger the hugo docs build Hugo v0.98.0 extended is set up for the runner Docsy theme is setup for beautification of static site Then dependencies are installed for the theme Static site is generated and stored in a folder \"public\" The contents of public are committed to gh_pages branch which is exposed to host the github pages ","categories":"","description":"","excerpt":"Thanks for considering to contribute to Eclipse Leda. We really …","ref":"/leda/docs/project-info/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"The Vehicle Signal Specification has a lot of standard Vehicle Signals already defined.\nHowever, if you want to add additional custom signals or mappings from CAN-Bus for the Kuksa.VAL dbc2val feeder, the VSS data model needs to be customized and regenerated.\nThe following steps can be performed on a development machine to regenerate VSS data model with custom a vspec mapping.\nConcepts Setup workspace Defining the VSS Overlay Regenerate VSpec JSON Generate a candump Databroker and dbc2val containers Testing with data Concepts VSS Overlay The VSS Overlay concept allows to override the standard signals in the specification with custom signals. It defines metadata attributes like signal name, datatype, description etc.\nIn addition, the vspec file allows to add custom metadata, such as the dbc node in the following example:\nVehicle.Speed: type: sensor datatype: float dbc: message: Kombi_01 signal: KBI_angez_Geschw interval_ms: 1000 See Eclipse Kuksa documentation about dbc2val mapping for details.\nThere are also ways to automatically transform the CAN-Bus signal values into VSS values:\nMapping of literal values, such as enums and booleans Mathematical transformations Full and partial transformations Setup workspace Required tools Git Docker Python 3 can-utils a YAML/JSON text editor Depending on your host OS, you may need to install the packages first:\nsudo apt-get update sudo apt-get install can-utils git docker python3 Workspace structure You need the following files in your workspace folder:\n./custom.dbc - The vehicle-specific DBC file. You can use the Tesla Model 3 example or check out the opendbc project. ./custom.vspec - The VSS overlay from the previous step Defining the VSS Overlay The definition of an VSS overlay is a manual process. It requires research, browsing the existing VSS catalog and deep knowledge of the vehicle signals. Especially knowing the semantic of a signal and how to map it between DBC and VSS is a complex task.\nNote: The Leda team is not aware of any advanced tooling to support the automation of this task.\nCreate a new file custom.vspec. Use YAML format For each identified signal: Look up if there already is a corresponding signal in VSS. You may use the Digital.Auto Playground or the spec directly. Add a new top-level entry to the custom.vspec file. The key is the full VSS path name in dot notation. Add the corresponding dbc node Add the signal attribute and enter the name of the CAN-Bus signal name in the DBC Add additional attributes such as interval_ms, message or transform. Note: The attributes signal, interval_ms and transform are evaluated by dbc2val. The attribute message is only evaluated by the below demo script and is optional.\nExample:\n# CAN Message: Kombi_01 Vehicle.Speed: type: sensor datatype: float dbc: message: Kombi_01 signal: KBI_angez_Geschw interval_ms: 1000 # CAN Message: FS_Position_01 Vehicle.Cabin.Seat.Row1.Pos1.Position: type: sensor datatype: float dbc: message: FS_Position_01 signal: FSS_Laenge_Pos interval_ms: 1000 These two extensions will be added to the combined VSS tree:\nRegenerating VSpec The script vspec2json.py from COVESA VSS Tools can then be used to merge the overlay file with the standard specification.\nFor Leda devices, you can use kanto-cm to run the tool as a container:\n# Copy custom.dbc and custom.vspec to /home/root # Run in /home/root kanto-cm create --name vspec2json --rp no --mp=\"/home/root:/data\" ghcr.io/eclipse-leda/leda-vss-vspec2json:main kanto-cm start --a --i --name vspec2json For developer workstations, there is a convenient pre-built Docker container:\ndocker run --name vspec2json --rm -v `pwd`:/data ghcr.io/eclipse-leda/leda-vss-vspec2json:main Or, if you want to run vspec2json from the sources, clone the repository and invoke it like this:\ngit clone \\ --recurse-submodules \\ --branch v3.1 \\ --single-branch \\ --depth 1 \\ https://github.com/COVESA/vehicle_signal_specification python3 vehicle_signal_specification/vss-tools/vspec2json.py \\ -e dbc \\ -o custom.vspec \\ --uuid \\ --json-pretty \\ --json-all-extended-attributes \\ ../vehicle_signal_specification/spec/VehicleSignalSpecification.vspec \\ custom_vss_dbc.json With the resulting file custom_vss_dbc.json and the corresponding DBC file, the dbc2val feeder can relay the signals to the databroker. dbc2val can either read from a CAN-Dump file (generated by candump from can-utils) in an endless loop, or can listen on actual virtual or physical CAN interfaces.\nThe output should look like this:\n$ ls custom.dbc custom.vspec $ docker run --name vspec2json --rm -v `pwd`:/data ghcr.io/eclipse-leda/leda-vss-vspec2json:main INFO Output to json format INFO Known extended attributes: dbc INFO Added 54 units from /vss/spec/units.yaml INFO Loading vspec from /vss/spec/VehicleSignalSpecification.vspec... INFO Applying VSS overlay from /data/custom.vspec... INFO Autocreating implicit branch Vehicle INFO Autocreating implicit branch Cabin INFO Autocreating implicit branch Seat INFO Autocreating implicit branch Row1 INFO Autocreating implicit branch Pos1 INFO Calling exporter... INFO Generating JSON output... INFO Serializing pretty JSON... INFO All done. $ ls custom.dbc custom.vspec custom_vss_dbc.json Databroker Container Ensure the databroker container is up and running:\nOn developer workstation:\ndocker run --name databroker --detach --rm -p 55555:55555/tcp ghcr.io/eclipse/kuksa.val/databroker:0.3.1 On Leda device (if not already running)\nkanto-cm start --name databroker Testing with data To see actual data, we need to use the candump or another CAN source and feed that data into the databroker. After that is running, we can use the databroker-cli tool to subscribe to the example VSS signals.\nGenerate a candump To generate a candump for testing purposes, start the candump tool and listen for some packets.\nIn the following example, the first 20 CAN frames are being recorded and the command will exit.\ncandump -L -n 20 vcan0 \u003e candump.log If you do not have an external CAN source, you may want to simulate CAN frames. There is a Python library for parsing DBC files, which also let’s you encode and send the actual CAN messages.\nAn example script could look like this:\nNote: Due to GPL-3 licensing, the Leda quickstart image does not contain some Python standard libraries. This script will not run on a Leda quickstart image.\nimport random import time from pprint import pprint import yaml import cantools import can can_bus = can.interface.Bus('vcan0', bustype='socketcan') db = cantools.database.load_file('custom.dbc') with open(\"custom.vspec\", \"r\") as stream: try: vspec = yaml.safe_load(stream) for key in vspec: message_name=vspec[key]['dbc']['message'] signal_name=vspec[key]['dbc']['signal'] example_message = db.get_message_by_name(message_name) # Initialize an empty message data = {} for signal in example_message.signals: data[signal.name] = False pprint(\"Message: %s\" % example_message) # Send 10 frames with random data for x in range(10): data[signal_name] = random.uniform(0,100) encoded_data = example_message.encode(data) message = can.Message(arbitration_id=example_message.frame_id, data=encoded_data) pprint(\"CAN Frame: %s\" % message) can_bus.send(message) # Wait up to 1 second time.sleep(random.random()) except yaml.YAMLError as exc: print(exc) Example output:\n\"Message: message('Kombi_01', 0x30b, False, 8, {None: 'MQB'})\" ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 b9 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 16 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 ca 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 ad 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 b0 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 79 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 1b 01') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 19 01') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 0a 00') ('CAN Frame: Timestamp: 0.000000 ID: 0000030b X Rx ' 'DL: 8 00 00 00 00 00 00 b0 00') \"Message: message('FS_Position_01', 0x6be, False, 8, None)\" ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 59 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 31 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 29 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 07 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 40 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 55 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 54 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 07 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 62 00 00 00 00 00 00 00') ('CAN Frame: Timestamp: 0.000000 ID: 000006be X Rx ' 'DL: 8 59 00 00 00 00 00 00 00') dbc2val on workstation Get the latest sources:\ngit clone https://github.com/eclipse/kuksa.val.feeders Looping a CAN dump recording:\nkuksa.val.feeders/dbc2val/dbcfeeder.py \\ --dumpfile candump.log \\ --canport vcan0 \\ --server-type kuksa_databroker \\ --dbcfile custom.dbc \\ --mapping custom_vss_dbc.json Listening on CAN interface:\n# CAN must be set up up front, e.g. # modprobe vcan # ip link add dev vcan0 type vcan # ip link set vcan0 up kuksa.val.feeders/dbc2val/dbcfeeder.py \\ --canport vcan0 \\ --use-socketcan \\ --server-type kuksa_databroker \\ --dbcfile /custom/custom.dbc \\ --mapping /custom/custom_vss_dbc.json dbc2val on Leda device To run the dbc2val feeder on Leda, you can use kanto-cm (instead of docker) to create the respective containers.\nNote: Due to Issue #73, the container ghcr.io/eclipse/kuksa.val.feeders/dbc2val:v0.1.1 cannot be used with SocketCAN. Please use a later release or build the container from the sources after fixing the bug. Alternatively, use the candump file instead of SocketCAN.\nRemove any existing dbc2val container:\nkanto-cm remove --force --name dbc2val Create the new container in Kanto Container Management:\nkanto-cm create \\ --name dbc2val \\ --mp=\"/home/root:/data\" \\ --e=VDB_ADDRESS=\"databroker:30555\" \\ --e=USECASE=\"databroker\" \\ --network=host \\ --privileged \\ ghcr.io/eclipse/kuksa.val.feeders/dbc2val:v0.1.1 \\ /dist/dbcfeeder-exe \\ --canport vcan0 \\ --use-socketcan \\ --usecase databroker \\ --dbcfile /data/custom.dbc \\ --mapping /data/custom_vss_dbc.json Note: The host networking and privileged is used to allow the container access to the CAN sockets.\nStart the container:\nkanto-cm start --a --i --name dbc2val Check the logs to verify container is running:\nkanto-cm logs --name dbc2val Querying via CLI To be able to see the changes, you may want to use the Kuksa Databroker CLI:\ndocker run --rm -it --network host ghcr.io/eclipse/kuksa.val/databroker-cli:0.3.1 Now, depending on the way how the dbc2val feeder has been started (candump vs. socketcan), you will either already see data from the candump loop.\n","categories":"","description":"","excerpt":"The Vehicle Signal Specification has a lot of standard Vehicle Signals …","ref":"/leda/docs/app-deployment/kuksa-databroker/custom-vss-mappings/","tags":"","title":"Custom Vehicle Signals"},{"body":"\nManually creating a Release triggers the release workflow. The release workflow calls the build workflow. The build workflow indirectly depends on the sstate cache being prebuilt manually (see optimizations below) The build workflow runs a full build of the SDV-Image-All disk image for all target machines. A separate job is used for each target machine, to ensure an image build for a target machine can finish within 6 hours. Each build contains the creation of SBOM artifacts and the check for CVEs. The SBOM artifacts are in SPDX JSON format and packaged per target machine’s disk image (SDV-Image-Full to include all packages). The OSS License Scanning (using the OSS Review Toolkit) is done asynchronously on a separate fork, as it currently uses a proprietary infrastructure. The ORT-based infrastructure of Eclipse is planned to be used in the future. The web report is attached as a build artifact on the internal fork and not accessible by public currently. Once the build workflow’s jobs are finished, the release workflow will finalize by attaching the release artifacts as assets to the release. Note: While the build workflow and release workflows are in progress, the GitHub release page of that release does not show any other assets besides the source archives. The release artifacts (eclipse-leda-.tar.xz) will only be visible once all workflows have finished.\nLimitations on standard runners As the GitHub-managed runners are optimized for ephemeral build use cases and a Yocto-based build process is very consuming in regards to CPU and disk capacity, a few optimizations need to be done before being able to run a full build or even a release workflow on limited GitHub-managed standard runners.\nPlease see the documentation about GitHub Hosted Runners for current specs.\nResource Standard GitHub Runner Recommended for Yocto CPU 2-core CPU (x86_64) 16-core CPU (x86_64) RAM 7 GB of RAM 16 GB of RAM Disk 14 GB of SSD 128+ GB of SSD Time max. 6 hours / job not limited In general, GitHub recommends to split a build process into smaller chunks, which can then fit into the constraints.\nOptimizations The following optimizations have been implemented for the Eclipse Leda public repository and its build workflow:\nRemote SState Cache: To minimize build time and disk usage, a remote sstate-cache mirror is being used. The mirror is hosted by one of the project sponsors on european Azure infrastructure and available as public HTTP mirror to anonymous Leda builds. The mirror is provided as best-effort, does not provide any kind of service level and may not be available at all times.\nNote: To use the mirror, set the BB_HASHSERVE, MIRROR_SERVER, SSTATE_MIRRORS and related configuration settings. See the mirrors.yaml for a full sample.\nPrebuilding: To fill the remote sstate cache mirror, another build infrastructure is being used. The repository fork has been configured with additional credentials to authenticate against the remote mirror for uploading the built packages. To ensure these steps are not run on the public OSS repository, the workflow steps use additional conditions to check for the owner of the repository. This is a workaround due to a known issue on GitHub Actions.\nChunking of the build steps: To minimize bandwidth transfer, a local GitHub Action Cache is being used. This cache is per target machine and filled with a separate workflow. The Prebuild sstate build jobs will run the BitBake process for 4 hours and then gracefully shut down. The build process will finish the current tasks. The remaining time (max. runtime for GitHub Runners is 6 hours) is used to package and upload the packages to the cache. If the 4 hours of build time are not enough, it may be required to re-run the same job more often.\nNote: The disadvantage of this approach is that each run requires a significant lead time where the remote cache is downloaded, the recipes get parsed again, the build task dependencies are compiled etc. On a persistent runner, this time can be spared.\nRerun on sstate miss: When BitBake is missing a package in the sstate mirror (it may exist in the Hash Equivalence Server though), BitBake will log an Error and continue to run the recipe. However, as the cache-miss is logged as error, BitBake will exit with an error code, indicating a failed build, which in turn would mark the GitHub Job as failed, too. To circumvent this problem, the BitBake build process is executed in a loop (max. 3 retries) to ensure that with the current state, all packages can be built without errors, eventually succeeding with the buid.\nAlways upload GitHub Cache: Under normal circumstances, the GitHub Cache action will update the cache on success of the build job - to not poison the cache with failed builds. However, as the Leda build workflows run for a very long time and may fail due to other reasons, the goal is to still reuse the sstate-cache as much as possible. For that reason, the pat-s/always-upload-cache GitHub action is being used, as it will also upload the cache on failed builds.\n","categories":"","description":"","excerpt":"\nManually creating a Release triggers the release workflow. The …","ref":"/leda/docs/build/github/","tags":"","title":"GitHub Workflow"},{"body":"Download eclipse-leda-logo.zip\nFor Screen White background 2182x794, white, transparent Black background 2182x794, black, opaque Credits: prothesis / kanellos @ 99designs.com | Font: https://www.dafont.com/olney.font 916x916, black For Print File File Format Color model eclipse-leda-logo_01_cmyk.ai Adobe Illustrator CMYK, Black background eclipse-leda-logo_01_cmyk.eps Encapsulated PostScript CMYK, Black background eclipse-leda-logo_01_cmyk.pdf Portable Document Format CMYK, Black background eclipse-leda-logo_01_rgb.ai Adobe Illustrator RGB, Black background eclipse-leda-logo_01_rgb.jpg JPEG RGB, Black background, 2480x2480 eclipse-leda-logo_01_rgb.png PNG RGB, Black background, 2480x2480 eclipse-leda-logo_02_cmyk.ai Adobe Illustrator CMYK, Transparent background eclipse-leda-logo_02_cmyk.eps Encapsulated PostScript CMYK, Transparent background eclipse-leda-logo_02_cmyk.pdf Portable Document Format CMYK, Transparent background eclipse-leda-logo_02_rgb.ai Adobe Illustrator RGB, Transparent background eclipse-leda-logo_02_rgb.jpg JPEG RGB, White background, 2480x2480 eclipse-leda-logo_02_rgb.png PNG RGB, Transparent background, 2480x2480 eclipse-leda-logo_03_cmyk_cropped.svg Scalable Vector Graphics CMYK, Transparent background, Cropped eclipse-leda-logo_03_cmyk.svg Scalable Vector Graphics CMYK, Transparent background Colors Primary Color: #6daed1 Secondary Color: #804096 ","categories":"","description":"","excerpt":"Download eclipse-leda-logo.zip\nFor Screen White background 2182x794, …","ref":"/leda/docs/project-info/logo/","tags":"","title":"Project Logo"},{"body":"Meta-leda and the Leda-quickstart image provide a utility sdv-provision that simplifies the device provisioning procedure.\nConnecting to the device Since the procedure includes copying and pasting device IDs, it is recommended to connect to the device over a ssh connection. sdv-motd provides an easy way to find your device’s ip. More information on connecting via ssh can be found here.\nProvisioning via a connection string Device-side After connecting via ssh run sdv-provision.\nExample output:\nroot@qemux86-64:~# sdv-provision Checking Eclipse Leda Device Provisioning configuration... - Certificates directory exists Checking Device ID - Based on network device: eth0 - File does not exist, creating: /etc/deviceid - Device ID: XX-XX-XX-XX-XX-XX Checking whether either IdScope or ConnectionString is configured - Neither Id Scope file nor ConnectionString found, needs manual configuration Do you want to use the global Azure IoT Device Provisioning Service (DPS) by using an Id Scope, or do you want to use a direct connection to a specific Azure IoT Hub using a Connection String? d) Azure IoT Device Provisioning Service (DPS) with Id Scope h) Azure IoT Hub with Connection String Choose: Note the generated Device ID (XX-XX-XX-XX-XX-XX).\nType h /Azure IoT Hub with Connection String/ and press Enter.\nPaste your Azure IoT Hub Connection String: HostName=\u003cIoT Hub in Azure\u003e.azure-devices.net;DeviceId=\u003cXX-XX-XX-XX-XX-XX\u003e and press enter. Where \u003cIoT Hub in Azure\u003e is your Azure IoT Hub name.\nAzure Portal Go to https://portal.azure.com/ and to your Azure IoT Hub named \u003cIoT Hub in Azure\u003e. Choose Devices -\u003e Add Device. Enter the Device ID XX-XX-XX-XX-XX-XX generated on the previous step as Device ID. Pick X.509 Self-Signed and paste the two thumbprints generated by sdv-provision. Save. Device-Side After all of the above steps have been completed, connect back to your device and restart the cloudconnector container by running:\nkanto-cm stop -n cloudconnector --force kanto-cm start -n cloudconnector Or alternatively use:\n$ kantui And restart the container from the TUI.\n","categories":"","description":"","excerpt":"Meta-leda and the Leda-quickstart image provide a utility …","ref":"/leda/docs/device-provisioning/script-provisioning/","tags":"","title":"Provisioning with sdv-provision"},{"body":"QEMU’s command line option can get quiet complex. Yocto is providing a convenient wrapper script called runqemu, which takes configurations into account which have been populated during the build process and also takes care of TAP networking setup and teardown. Unfortunately, it can only be used within an OpenEmbedded build environment.\nRunning without runqemu: when you need more control over qemu options\nqemu-system-x86_64 -kernel .\\bzImage-qemux86-64.bin -nographic -m 2G -append \"console=ttyS0 root=/dev/vda1\" -drive file=.../sdv-image-full-qemux86-64.ext4 Running with runqemu: simple and some convenient flags are supported\nrunqemu ovmf sdv-image-full Running with leda: no options, runs the default settings only\nleda Enabling KVM for better performance The performance of qemux86_64 is much better when KVM can be used. Try running with:\nrunqemu ovmf kvm Note: You may need to set up KVM for your host machine first, please refer to How to enable KVM for Poky qemu\n/workspaces/leda-distro/build-sdv-x86_64 (imageformatcleanup ✗) $ ls -al /dev/kvm crw-rw---- 1 root kvm 10, 232 May 16 06:46 /dev/kvm ","categories":"","description":"","excerpt":"QEMU’s command line option can get quiet complex. Yocto is providing a …","ref":"/leda/docs/build/runqemu/","tags":"","title":"Runqemu"},{"body":"The sdv-motd script provides an alternative motd profile, which displays some additional information after login.\nThe script does not have any command line options.\nExample output:\n","categories":"","description":"","excerpt":"The sdv-motd script provides an alternative motd profile, which …","ref":"/leda/docs/general-usage/utilities/sdv-motd/","tags":"","title":"SDV MotD"},{"body":"The quickstart image contains the following utilities. These utility scripts are meant to be convenience tools for users and developers. They help to experiment with the container deployment, device provisioning or vehicle data access.\nsdv-health: Show SDV software components health status kantui: A text user interface for kanto-cm to manage containers (start, stop, logs, redeploy all) sdv-device-info: Show and update device information sdv-provision: Generate device certificates and configuration of cloud connection sdv-motd: Message-of-the-Day shown after login prompt can-forward: Forwarding a CAN-bus network interface into a containerized Vehicle Application kanto-auto-deployer: Automatically deploys containers on boot. Runs as a systemd service, and can also be invoked by a user directly. sdv-ctr-exec: Execute arbitrary commands in existing containers sdv-kanto-ctl: Manage the Kanto Container Management configuration via CLI Note: These scripts are not meant to be reused or called from production software. Their behaviour or command line syntax is not a stable API and should not be trusted for automation purposes. For details, please see leda-utils\n","categories":"","description":"","excerpt":"The quickstart image contains the following utilities. These utility …","ref":"/leda/docs/general-usage/utilities/","tags":"","title":"Utilities"},{"body":"The can-forward help script can be used to forward an existing CAN-Bus interface on the host system to a container process.\nNote: Warning! The script does not yet support Kanto (or containerd) as a container runtime. It has been implemented for k3s.\nUsage root@qemux86-64:~# can-forward --help Usage: /usr/bin/can-forward {-h} {-p PID} {-c container} \u003chw_can\u003e hw_can Host CAN hw interface to forward. Default: can0 -c container Attemmpt to get netns PID from a running container: (docker, ctr). Default: seat_service -p PID Use provided PID for transferring vxcan interface (e.g.: docker inspect -f '{{ .State.Pid }}' container) -h Prints this message The script performs the following steps:\nFind the process ID of the target container process Check and modprobe vxcan Check and modprobe can-gw Create a new virtual CAN interface (vxcanX) Create a new virtual CAN interface (vxcanX+1) Link both interfaces together Move the second interface (vxcanX+1) into the namespace of the target container Set up a bi-directional CAN-Bus packet forwarding between both interfaces using cangw ","categories":"","description":"","excerpt":"The can-forward help script can be used to forward an existing CAN-Bus …","ref":"/leda/docs/general-usage/utilities/can-forward/","tags":"","title":"CAN Forward"},{"body":"Automatically deploys containers to the Kanto Container Management based on deployment descriptors from a given path. All deployment descriptors in the manifests folder will be deployed (created and started) on startup of the service. The directory will then be monitored for creation of/changes to manifests and those changes will be redeployed.\nUsage Usage:\n$ kanto-auto-deployer --help kanto-auto-deployer 0.2.0 Automated deployment of Kanto Container Management Manifests USAGE: kanto-auto-deployer [OPTIONS] [MANIFESTS_PATH] ARGS: \u003cMANIFESTS_PATH\u003e Set the path to the directory containing the manifests [default: .] OPTIONS: -d, --daemon Run as a daemon that continuously monitors the provided path for changes -h, --help Print help information -s, --socket-cm \u003cSOCKET_CM\u003e Set the path to the Kanto Container Management API socket [default: /run/container-management/container-management.sock] -V, --version Print version information Example:\n# Use container manifests from current working directory root@qemux86-64:/data/var/containers/manifests# kanto-auto-deployer [2023-04-18T10:27:21Z INFO kanto_auto_deployer] Running initial deployment of \"/data/var/containers/manifests\" [2023-04-18T10:27:21Z INFO kanto_auto_deployer] Reading manifests from [/data/var/containers/manifests] [2023-04-18T10:27:21Z WARN kanto_auto_deployer::manifest_parser] Failed to load manifest directly. Will attempt auto-conversion from init-dir format. [2023-04-18T10:27:21Z INFO kanto_auto_deployer] Already exists [cloudconnector] [2023-04-18T10:27:21Z WARN kanto_auto_deployer::manifest_parser] Failed to load manifest directly. Will attempt auto-conversion from init-dir format. [2023-04-18T10:27:21Z INFO kanto_auto_deployer] Already exists [databroker] # Use container manifests from specified directory root@qemux86-64:~# kanto-auto-deployer /data/var/containers/manifests/ [2023-04-18T10:27:44Z INFO kanto_auto_deployer] Running initial deployment of \"/data/var/containers/manifests\" [2023-04-18T10:27:44Z INFO kanto_auto_deployer] Reading manifests from [/data/var/containers/manifests] [2023-04-18T10:27:44Z WARN kanto_auto_deployer::manifest_parser] Failed to load manifest directly. Will attempt auto-conversion from init-dir format. [2023-04-18T10:27:44Z INFO kanto_auto_deployer] Already exists [cloudconnector] [2023-04-18T10:27:44Z WARN kanto_auto_deployer::manifest_parser] Failed to load manifest directly. Will attempt auto-conversion from init-dir format. [2023-04-18T10:27:44Z INFO kanto_auto_deployer] Already exists [databroker] Nоte: The warnings from the manifest_parser module are normal and expected when the manifest is in the Container Management Manifests Format\nUsage as systemd service In the Leda quickstart images, kanto-auto-deployer is installed as a systemd service.\nNote the service uses the --daemon flag that asks KAD to continuously monitor the specified directory (see last line of logs).\nThe service unit configuration file is located in /lib/systemd/system/kanto-auto-deployer.service:\n[Unit] Description=Kanto Auto Deployer After=network-online.target container-management.service Wants=network-online.target container-management.service Requires=container-management.service [Install] WantedBy=multi-user.target [Service] Restart=on-failure RestartSec=5s ExecStart=/usr/bin/kanto-auto-deployer /data/var/containers/manifests --daemon Example output:\nroot@qemux86-64:/lib/systemd/system# systemctl status kanto-auto-deployer.service * kanto-auto-deployer.service - Kanto Auto Deployer Loaded: loaded (/lib/systemd/system/kanto-auto-deployer.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2023-04-18 10:22:10 UTC; 3min 55s ago Main PID: 525 (kanto-auto-depl) Tasks: 10 (limit: 4708) Memory: 1.4M CGroup: /system.slice/kanto-auto-deployer.service `- 525 /usr/bin/kanto-auto-deployer /data/var/containers/manifests --daemon Apr 18 10:22:48 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:22:48Z INFO kanto_auto_deployer] Creating [sua] Apr 18 10:23:04 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:04Z INFO kanto_auto_deployer] Created [sua] Apr 18 10:23:04 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:04Z INFO kanto_auto_deployer] Starting [sua] Apr 18 10:23:05 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:05Z INFO kanto_auto_deployer] Started [sua] Apr 18 10:23:05 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:05Z WARN kanto_auto_deployer::manifest_parser] Failed to load manifest directly. Will attempt auto-conversion from init-dir format. Apr 18 10:23:05 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:05Z INFO kanto_auto_deployer] Creating [vum] Apr 18 10:23:10 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:10Z INFO kanto_auto_deployer] Created [vum] Apr 18 10:23:10 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:10Z INFO kanto_auto_deployer] Starting [vum] Apr 18 10:23:11 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:11Z INFO kanto_auto_deployer] Started [vum] Apr 18 10:23:11 qemux86-64 kanto-auto-deployer[525]: [2023-04-18T10:23:11Z INFO kanto_auto_deployer] Running in daemon mode. Continuously monitoring \"/data/var/containers/manifests\" ","categories":"","description":"","excerpt":"Automatically deploys containers to the Kanto Container Management …","ref":"/leda/docs/general-usage/utilities/kanto-auto-deployer/","tags":"","title":"Kanto Auto Deployer (KAD)"},{"body":"The Vehicle Update Manager delegates two different types of updates:\nThe Desired State on the container layer The Self Update on operating system layer Desired State The Desired State is applied at runtime on the container layer.\nThis type of update mechanism can update vehicle applications, vehicle services and other containers together with configuration resources or data files at runtime. If the applications support it, the rollout can also use high-availability strategies, such as rolling deployments.\nSelf Update The Self Update is applied on reboot of the device only.\nThis type of update mechanism is used for system-level updates which require the operating system to be rebooted to take effect.\n","categories":"","description":"","excerpt":"The Vehicle Update Manager delegates two different types of updates: …","ref":"/leda/docs/device-provisioning/vehicle-update-manager/","tags":"","title":"Vehicle Update Manager"},{"body":"The Leda Incubator project is a place for new software-defined-vehicle related software components which are in incubation state.\nThe goal of the Eclipse Leda Incubator is to foster collaboration in the Eclipse Software Defined Vehicle (SDV) ecosystem, and hopefully results in work proceeding to contribution by their original authors into upstream projects. The Eclipse Leda Incubator would not make any releases itself.\nThe project hosts software-defined vehicle components which are fitting into the general Eclipse Leda scope, but do not fit to either being part of Leda itself, which should be upstreamed into other projects in the future, or which are still highly experimental and should not be considered for any kind of production use.\n","categories":"","description":"","excerpt":"The Leda Incubator project is a place for new software-defined-vehicle …","ref":"/leda/docs/leda-incubator/","tags":"","title":"Incubator"},{"body":"The sdv-ctr-exec wrapper allows to execute arbitrary user commands in existing containers. Kanto Container Management cli tool (kanto-cm) only allows to manage the lifecycle of a container, but does not allow to specify or override the entrypoint or command definitions of an existing container. The ctr command line tool of containerd allows the execution of additional tasks in a running container.\nUsage As a convenient tool, sdv-ctr-exec allows the simple execution of arbitrary commands inside of containers. This is especially useful for non-service-containers, or containers which have additional binaries (e.g. cli tools) embedded.\nUsage:\nroot@qemux86-64:~# sdv-ctr-exec /usr/bin/sdv-ctr-exec -h to print this message Usage: /usr/bin/sdv-ctr-exec \u003ccontainer-id\u003e \u003ccommand\u003e or /usr/bin/sdv-ctr-exec -n \u003ccontainer-name\u003e \u003ccommand\u003e Example:\n# Executing a containerized cli tool using sdv-ctr-exec kanto-cm create --i --t --network=host --name=kuksa-client ghcr.io/eclipse/kuksa.val/kuksa-client:master kanto-cm start --name=kuksa-client sdv-ctr-exec -n kuksa-client /kuksa-client/bin/kuksa-client --port 30555 --protocol grpc --insecure Alternatives containerd: ctr The above commands are equivalent to the following commands:\n# Executing a containerized cli tool using ctr ctr --namespace kanto-cm image pull ghcr.io/eclipse/kuksa.val/kuksa-client:master ctr --namespace kanto-cm container create --net-host --tty ghcr.io/eclipse/kuksa.val/kuksa-client:master kuksa-client ctr --namespace kanto-cm tasks start --detach kuksa-client ctr --namespace kanto-cm tasks exec --tty --exec-id sometask kuksa-client /kuksa-client/bin/kuksa-client --port 30555 --protocol grpc --insecure containerd: nerdctl Note: nerdctl is currently not installed on the Leda Quickstart images.\ncontainerd: ctr and mounting To execute a binary natively (outside of a containerized environment), the container image may be mounted to the host filesystem using the ctr snapshots mount commands.\nThis approach only works if the binary is compatible with the host environment (dependencies, libraries etc.).\n$CONTAINER_IMAGE=\"ghcr.io/my-org/my-project/my-container\" ctr --namespace kanto-cm image pull $CONTAINER_IMAGE ctr --namespace kanto-cm container create --net-host --tty $CONTAINER_IMAGE my-container mkdir my-container ctr --namespace=kanto-cm snapshots mount my-container my-container | $SHELL cd my-container ./bin/my-application --help ","categories":"","description":"","excerpt":"The sdv-ctr-exec wrapper allows to execute arbitrary user commands in …","ref":"/leda/docs/general-usage/utilities/sdv-ctr-exec/","tags":"","title":"SDV Container Exec"},{"body":"In general, the self-update mechanism for operating system level updates is done with two separate partitions. While one partition is the actively booted partition and in use, the other partition can be updated by writing a partition image to it, as it is unused or inactive.\nOnce the download and writing is done, a reboot is triggered and the boot loader will now switch to the newly updated partition.\nIf the booting of the updated partition fails, the self update mechanism can revert back to the previous partition or boot to a rescue partition.\nAs updating the running operating system cannot be done at runtime, the approach requires additional disk space, a second partition and also requires the device to be rebooted for the updates to take effect.\nIn a vehicle, the self-updater cannot decide on its own when to do a reboot, as the vehicle must be in a safe condition (eg parked, state of charge etc.). Hence, the trigger for performaing the switch to another slot and a subsequent reboot is handed over to a higher level component, such as the vehicle update manager, which may in turn rely on driver feedback or other conditions.\nImplementation with RAUC Update Service RAUC is a lightweight update client that runs on your embedded device and reliably controls the procedure of updating your device with a new firmware revision.\nFor general usage of the RAUC tool, please see the RAUC User manual\nReference configuration The project contains an example reference implementation and configuration using RAUC, which allows the evaluation of the concepts, mechanisms and involved software components in an emulated, virtual environment.\nThe Leda quickstart image contains the following disk partitions:\na small rescue partition a full SDV installation with a container runtime, pre-loaded SDV container images and deployment specifications and additional developer tools such as nerdctl and kantui. a minimal SDV installation with a container runtime, but no additional examples or developer tools. This partition is used to demonstrate the self-update functionality. additional boot and data partitions for keeping system state information Note: All three rootfs partitions (rootfs) initially contain the same identical copies of the base operating system. Both SDV Root partitions will use the same shared data partition for the container persistent state.\n","categories":"","description":"","excerpt":"In general, the self-update mechanism for operating system level …","ref":"/leda/docs/device-provisioning/self-update/","tags":"","title":"Self Updates"},{"body":"Running BitBake to build your own images requires some extra setup on the build machine. Please see the following chapters for more information about the build process itself and how to setup a development and build infrastructure.\nIf you are interested to contribute or to get in touch with us, please see our Community pages and Contribution Guidelines.\nFor reporting security vulnerabilities, please follow our Security Policy.\n","categories":"","description":"","excerpt":"Running BitBake to build your own images requires some extra setup on …","ref":"/leda/docs/build/","tags":"","title":"Building Leda"},{"body":"","categories":"","description":"","excerpt":"","ref":"/leda/docs/build/misc/","tags":"","title":"Miscellaneous"},{"body":"Your privacy is important to us. The following Information is to provide you with all information relevant to data protection in order to be able to use the software, in a data protection compliant manner. It is provided as an information source for your solution-specific data protection and data privacy topics. This is not intended to provide and should not be relied on for legal advice.\nYour Role First things first: when you choose and use our software, you are most likely acting in the role of data controller, if personal related data is being processed. Therefore, you must ensure that the processing of personal data complies with the respective local legal requirements, e.g. when processing data within the scope of General Data Protection Regulation (GDPR) the legal requirements for a controller from the GDPR.\nWhere may the processing of personal related data be relevant? When using our software in combination with other software components, personal data or data categories may be collected for the purpose of developing, testing and running in-vehicle applications (Vehicle Apps). Possible examples are the vehicle identification number (VIN), the number plate, GPS data, video data, audio data, or other measurement data. You can determine which data or data categories are collected when configuring the software. These data are stored in volatile memory and are deleted by shutting down the system. You are responsible for the compliant handling of the data in accordance with the applicable local law.\nWhat have we done to make the software data protection friendly? This section describes the measures taken to integrate the requirements of the data protection directly into the software development. The technical measures described below follow a “privacy by design” approach.\nLocal data: The software may save data permanently in local virtual storage (eg when run in QEMU Emulator) or on local physical storage (SD-Card on Raspberry PI). All collected or processed data can be deleted by either deleting the virtual storage file (*.qcow2), or by erasing the SD-Card.\nCloud storage: The software may send data to cloud endpoints controlled by you or your organization. Examples include connectivity data, device identification, device health, device telemetry, application metrics and application logs. Collection and processing of example data on the device is enabled by default. Sending of device data to cloud endpoints must be explicitly enabled by performing the device provisioning process. The actual cloud endpoints are determined and configured during the device provisioning process. All collected or processed data can be deleted on the cloud side in the respective cloud endpoints.\nVulnerabilities: The release process for this software is set up to always update to the newest package updates. The project will continously release new versions of the software. To protect personal data, it is advisable to always use the latest version of the software.\nImportant: When you use the Eclipse Leda quickstart images for non-volatile setups, it is essential to reconfigure the system and harden it, this includes but is not limited to the following configuration items:\nDisable system user (root) password and login Disable SSH login with password Adding a new Linux user with restricted permissions Adding SSH key based authentication Container Resources and Configurations: Secrets, such as Device Identity Certificates for Cloud Connection and Access credentials for private Container Registries ","categories":"","description":"","excerpt":"Your privacy is important to us. The following Information is to …","ref":"/leda/docs/project-info/privacy-information/","tags":"","title":"Privacy Information"},{"body":"The Eclipse Leda project follows the Eclipse Release process. Please see Eclipse Project handbook for details about the process.\nThe release plans overview for Eclipse Leda is available at https://projects.eclipse.org/projects/automotive.leda/governance\n","categories":"","description":"","excerpt":"The Eclipse Leda project follows the Eclipse Release process. Please …","ref":"/leda/docs/about/releases/","tags":"","title":"Releases"},{"body":"When you want to reuse Leda for your custom setup or hardware we do not directly provide BSPs for (see Hardware) you can reference the following chapters. They describe the general approaches for different level of customization - from deploying different sets of containers from those provided by default to building completely custom distros based on meta-leda.\n","categories":"","description":"","excerpt":"When you want to reuse Leda for your custom setup or hardware we do …","ref":"/leda/docs/customization/","tags":"","title":"Customizing"},{"body":"This cheat sheet gives you an overview of common command line commands to interact with the tools available on the quickstart image.\nGeneral Commands Category Task Command General Overall info sdv-health Show device info sdv-device-info Device provisioning sdv-provision Switch Keyboard layout loadkeys de System System load htop Disk free df -h -t ext4 Memory free free -h Network Interfaces summary networkctl Ethernet status networkctl status enp0s2 Routing table route Active listeners netstat -l -n -t Multicast for Some/IP route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0 Kanto-CM Show all containers kanto-cm list User interface kantui Service logs journalctl -f -l -t container-management Auto deployments See /data/var/containers/manifests/ Development deployments See /data/var/containers/manifests_dev/ Restart a container kanto-cm restart -n \u003ccontainername\u003e Manage config sdv-kanto-ctl Shell in container sdv-ctr-exec \u003ccontainerId\u003e \u003ccommand\u003e Add Private Registry sdv-kanto-ctl add-registry -h \u003chost\u003e -u \u003cuser\u003e -p \u003cpass\u003e ContainerD Show images ctr --address /data/run/containerd/containerd/containerd.sock --namespace=kanto-cm i ls Import local archive ctr --address /data/run/containerd/containerd.sock --namespace=kanto-cm i import \u003cdocker.tar\u003e Prune containers nerdctl system prune --all Mosquitto Show all messages mosquitto_sub -v -t '#' -h localhost Send message mosquitto_pub -t '\u003ctarget/topic\u003e' -h localhost -m '{\"foo\":\"bar\"}' Connectivity status mosquitto_rr --quiet -h localhost -t 'edge/thing/request' -e 'edge/thing/response' -m '' RAUC Self Update Current boot status rauc status Switch to other boot slot rauc status mark-active other CAN-Bus CAN Dump candump -l any,0:0,#FFFFFFFF Configuring NTP A failed download of container images may be caused by out-of-sync clock, thus failing the TLS certificate validation. A hardware device without hardware clock (such as the Raspberry Pi) relies on network time. In some (corporate) networks, there might be rogue NTP servers and it might be necessary to override the NTP sources.\nTo reset NTP server to a public server, follow these steps:\n# Check NTP clock sync timedatectl timesync-status # Add your NTP server vi /etc/systemd/timesyncd.conf # Restart container management systemctl restart container-management systemctl restart kanto-auto-deployer Reset container deployment When things go really wrong and the container runtime is unable deploy containers properly, it may be necessary to reset the internal state. This is achieved by stopping the container runtime(s) and deleting the /var/lib/container-management folder:\n# Stop all container runtimes systemctl stop container-management systemctl stop containerd # Delete the persistence of container management # Attention! Here be dragons rm -rf /var/lib/container-management # Restart the container runtimes systemctl start containerd systemctl start container-management # Redeploy the containers systemctl restart kanto-auto-deployer Running custom ad-hoc containers To install arbitrary containers, create the container using the kanto-cm command line tool. If it’s not a background service, but a cli tool, adding the --t --i options allows console access.\nroot@qemux86-64:~# kanto-cm remove --name python root@qemux86-64:~# kanto-cm create --name python --t --i --privileged docker.io/library/python:3.8.16-slim-bullseye bf9deca4-dbf1-4132-9ba7-e0f378bd34a7 root@qemux86-64:~# kanto-cm start --name python --a --i Python 3.8.16 (default, Jan 24 2023, 00:19:05) [GCC 10.2.1 20210110] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. \u003e\u003e\u003e quit() Raspberry Pi Overlays Edit /boot/config.txt and reboot:\n# Disable to fix non-working standard Raspberry Pi 7\" display # dtoverlay=vc4-kms-v3d # PiCAN 2 # dtoverlay=mcp2515-can0,oscillator=16000000,interrupt=25 # Waveshare RS485 CAN Hat # dtoverlay=mcp2515-can0,oscillator=12000000,interrupt=25,spimaxfrequency=2000000 ","categories":"","description":"","excerpt":"This cheat sheet gives you an overview of common command line commands …","ref":"/leda/docs/general-usage/cheatsheet/","tags":"","title":"Cheatsheet"},{"body":"Leda is using Kanto Container Management as the upper-layer container runtime and container orchestration engine.\nBesides the command line tool kanto-cm, Kanto also has remote interfaces to manage containers.\nRemote Interface Kanto’s container-management service offers a remote interface via local messaging (MQTT) to interact with a digital twin on the cloud side. This feature can be easily enabled by setting \"things\": { \"enabled\": true } in /etc/container-management/config.toml.\nWhen one of the cloud connector components, such as leda-contrib-cloud-connector or Kanto’s azure-connector, is connected to a cloud backend, the container-management will publish its own information using Eclipse Ditto and Eclipse Hono messages. For this, container-management only needs the device Id, gateway Id and tenant Id.\n","categories":"","description":"","excerpt":"Leda is using Kanto Container Management as the upper-layer container …","ref":"/leda/docs/device-provisioning/container-management/","tags":"","title":"Container Management"},{"body":"This project implements the Eclipse Foundation Security Policy\nhttps://www.eclipse.org/security Reporting a Vulnerability Please report vulnerabilities to the Eclipse Foundation Security Team at security@eclipse.org\nSupported Yocto Versions Version Supported Yocto 4.x (Kirkstone) Yes Yocto 3.4 (Honister) EOL Yocto 3.3 Untested Yocto \u003c 3.3 No Important: When you use the quickstart images for non-volatile setups, it is essential to reconfigure the system and harden it.\nConfiguration Items Disable system user (root) password and login Disable SSH login with password Adding a new Linux user with restricted permissions Adding SSH key based authentication Container Secrets Device identity certificates for cloud connection Access credentials for private container registries Device Identity for Cloud Connector Method Implementation Intended use Pre-Shared Symmetric Key Azure IoT Hub Connection String Development Certificates X.509 Certificates Production ","categories":"","description":"","excerpt":"This project implements the Eclipse Foundation Security Policy …","ref":"/leda/docs/project-info/security/","tags":"","title":"Security Policy"},{"body":"The self update agent is used in the context of OTA Self Updates.\nOverview The Self Update Agent (SUA) as part of the Eclipse Leda Incubator project proposal is a software component responsible for performing updates of system-level components of the connectivity device, such as\nBoot Loader Operating System Device Firmware Hardware Drivers … other parts of the system, which cannot be deployed as containerized packages or may require a reboot of the device. Implementation and Deployment SUA is using the RAUC framework via D-Bus calls, but it is designed in a way that switching to other updating solution shall be possible. SUA may be controlled by an external higher-level orchestration component via defined MQTT messages, which carry necessary for update data, such as version and URL of the update bundle. Update process feedback and the end result are also communicated via defined MQTT messages. Software Update Agent is implemented in C++ and configured to be running inside of a container.\nBuilding SUA can either be installed natively into the system image by using the respective Yocto recipe leda-contrib-self-update-agent_git.bb, or can be deployed as a container.\nNative Installation A native installation has the advantage that no additional container runtime is required. In some vehicle system architectures, there are separate devices for connectivity and for general computation. The actual physical device for connectivity may hence have less ressources available which then requires a native installation of such core components.\nAdd the recipe to the image in your Yocto configuration: IMAGE_INSTALL += \"leda-contrib-self-update-agent\" The self update agent can be managed (start, stop, restart) using systemd: systemctl restart self-update-agent Container Installation When the component can be deployed on the more generic compute module, where a container runtime is available, the self update agent can also be deployed as a container. This is the default for the Eclipse Leda quickstart images.\nInitial deployment and configuration steps are:\nOn first start, the auto deployment will deploy and start the self update agent container automatically. The self update agent will then connect to the locally running mosquitto server, awaiting update requests. The default configuration will use the location /data/selfupdates/ to write and read update files. Source Repository Source Repository: https://github.com/eclipse-leda/leda-contrib-self-update-agent\n","categories":"","description":"","excerpt":"The self update agent is used in the context of OTA Self Updates. …","ref":"/leda/docs/leda-incubator/self-update-agent/","tags":"","title":"Self Update Agent"},{"body":"For local deployment without a cloud backend, deployment specifications for Eclipse Velocitas Vehicle Apps may be put directly onto the device.\nCreate a Kanto deployment specification for your vehicle app. You may copy one of the existing JSON files in /data/var/containers/manifests as a template Copy the specification file to the device, e.g. scp -P 2222 myapp.json root@localhost:/data/var/containers/manifests/ Apply the specification: systemctl restart kanto-auto-deployer To update an existing container when the configuration has changed, delete the container and restart kanto-auto-deployer:\nkanto-cm remove -n myapp-example # Edit /data/var/containers/manifests/myapp.json kanto-auto-deployer Configuration of Velocitas Middleware Type The following Velocitas environment variables need to be set to configure the proper middleware type and hostnames of services:\nSDV_MQTT_ADDRESS=mqtt://mosquitto:1883 SDV_VEHICLEDATABROKER_ADDRESS=grpc://databroker:55555 SDV_MIDDLEWARE_TYPE=native Example Deployment Specification Attention: The current implementation requires all fields to be present in the JSON, even if the values are not set or used. Do not remove any fields, as it may break the functionality.\n{ \"id\": \"\", \"name\": \"myapp-example\", \"image\": { \"name\": \"ghcr.io/my-org/my-repo/my-app:latest\", \"decrypt_config\": null }, \"host_name\": \"\", \"domain_name\": \"\", \"resolv_conf_path\": \"\", \"hosts_path\": \"\", \"hostname_path\": \"\", \"mounts\": [], \"hooks\": [], \"host_config\": { \"devices\": [], \"network_mode\": \"bridge\", \"privileged\": false, \"restart_policy\": { \"maximum_retry_count\": 0, \"retry_timeout\": 0, \"type\": \"unless-stopped\" }, \"runtime\": \"io.containerd.runc.v2\", \"extra_hosts\": [], \"port_mappings\": [ { \"protocol\": \"tcp\", \"container_port\": 30151, \"host_ip\": \"localhost\", \"host_port\": 50151, \"host_port_end\": 50151 } ], \"log_config\": { \"driver_config\": { \"type\": \"json-file\", \"max_files\": 2, \"max_size\": \"100M\", \"root_dir\": \"\" }, \"mode_config\": { \"mode\": \"blocking\", \"max_buffer_size\": \"\" } }, \"resources\": null }, \"io_config\": { \"attach_stderr\": false, \"attach_stdin\": false, \"attach_stdout\": false, \"open_stdin\": false, \"stdin_once\": false, \"tty\": false }, \"config\": { \"env\": [ \"VEHICLEDATABROKER_DAPR_APP_ID=vehicledatabroker\", \"SDV_MQTT_ADDRESS=mqtt://mosquitto:1883\", \"SDV_VEHICLEDATABROKER_ADDRESS=grpc://databroker:55555\", \"SDV_MIDDLEWARE_TYPE=native\" ], \"cmd\": [] }, \"network_settings\": null, \"state\": { \"pid\": -1, \"started_at\": \"\", \"error\": \"\", \"exit_code\": 0, \"finished_at\": \"\", \"exited\": false, \"dead\": false, \"restarting\": false, \"paused\": false, \"running\": false, \"status\": \"\", \"oom_killed\": false }, \"created\": \"\", \"manually_stopped\": false, \"restart_count\": 0 } ","categories":"","description":"","excerpt":"For local deployment without a cloud backend, deployment …","ref":"/leda/docs/app-deployment/velocitas/","tags":"","title":"Velocitas VApps"},{"body":"Developers working in a corporate environment may face challenges when building Leda-based images, pulling SDV containers, etc., usually due to a restrictive corporate proxy. Thus the objective of this page is to collect helpful guides for mitigating such problems.\nHTTP(S) proxy First you might need to configure your http(s) SOCKS proxy such that the BitBake shell uses it for do_fetch recipe tasks. By default, http_proxy and https_proxy environment variables are part of the BB_ENV_PASSTHROUGH list and are directly passed from the current environment to BitBake. If you are still facing http(s)_proxy issues during do_fetch tasks, you might want to check the Working Behind a Network Proxy @ Yocto Project Wiki.\nGOPROXY GOPROXY is a golang-specific mechanism for fetching dependencies during build-time. What is more, gomod-type BitBake recipes pull their external dependencies during the do_compile task, instead of the do_fetch task leading to further issues. The simplest workaround is to set-up a local (caching) goproxy container on the build host and make BitBake use that. The following steps assume that the build host has docker installed and working, with access to the docker hub registry.\nHosting a local goproxy server Start by setting up the goproxy container in host networking mode.\ndocker run -d --env HTTP_PROXY=\"http://\u003cPROXY_IP\u003e:\u003cPROXY_PORT\u003e\" --env HTTPS_PROXY=\"http://\u003cPROXY_IP\u003e:\u003cPROXY_PORT\u003e\" -v cacheDir:/go --network host goproxy/goproxy NOTE: Don’t forget to substitute \u003cPROXY_IP\u003e and \u003cPROXY_PORT\u003e with the appropriate address of your HTTP(S) proxy.\nThis will start a local caching goproxy on port 8081 with a volume named cacheDir for caching the downloaded Go packages. The goproxy container can be configured further to provide access to private Go-package registries. For more information on its configuration take a look at goproxyio/goproxy on GitHub.\nUsing the local goproxy server for BitBake builds Since the main objective of BitBake/kas is to facilitate reproducible builds, only certain variables from the host environment are used for the build. Go, however, looks at the GOPROXY environmental variable to decide on which proxy to use. That’s why you should first start by exporting the GOPROXY variable in the terminal from which you will later run the build:\nexport GOPROXY=\"http://127.0.0.1:8081\" To make BitBake use the value of the variable you just exported for the build, you should add it to its “environment passtrough” list:\nexport BB_ENV_PASSTHROUGH_ADDITIONS=\"${BB_ENV_PASSTHROUGH_ADDITIONS} GOPROXY\" Kas If you are using kas as a top-level build tool, to set the value of the GOPROXY variable for builds, all you need to do is to add it the env-section of your kas-config yaml. For example:\nheader: version: 12 machine: qemux86-64 env: GOPROXY: \"http://127.0.0.1:8081\" Kas will handle the exporting of the variable and adding it to BitBake’s passtrough list automatically from there.\nAirgapped container installation Sometimes devices might not have internet access on first boot and therefore the SDV containers that are needed for provisioning and updating a SDV-image will not be available.\nBuild-Time The meta-leda layer provides an opitional distro feature that pre-downloads and injects a minimal set of SDV container images in Kanto’s local container registry on first boot.\nIMPORTANT: This will lead to a significant increase of the image size since all containers are downloaded as self-contained tarballs and therefore “layer reuse” is not possible.\nTo enable this distro feature, add to your local.conf:\nDISTRO_FEATURES += \" airgap-containers\" PREINSTALLED_CTR_IMAGES_DIR = \"/path/to/container/images\" IMAGE_INSTALL += \"packagegroup-sdv-airgap-containers\" If you are using the sdv-image-data image recipe packagegroup-sdv-airgap-containers will be automatically installed when the distro-feature is enabled. Therefore all you need to add to your local.conf will be:\nDISTRO_FEATURES += \" airgap-containers\" PREINSTALLED_CTR_IMAGES_DIR = \"/data/var/containers/images\" Note: Here we have assumed that the partition where sdv-image-data is installed is mounted as /data on the rootfs.\nManual If you do not wish to use the airgap-containers distro-feature, you can manually download inject the container images in the kanto namespace with ctr.\nStart on a machine with internet access and docker/ctr installed:\nPull the container image in your machine’s local registry:\nctr -n kanto-cm image pull \u003cREGISTRY\u003e/\u003cIMAGE\u003e:\u003cTAG\u003e --platform linux/\u003cARCH\u003e Where if you would like to download the Kuksa Databroker container for an arm64 device you would change the following:\n\u003cREGISTRY\u003e/\u003cIMAGE\u003e:\u003cTAG\u003e -\u003e ghcr.io/eclipse/kuksa.val/databroker:0.3.0 \u003cARCH\u003e -\u003e arm64 After the pull was successful, export the image as a tarball:\nctr -n kanto-cm images export \u003ctarbal_name\u003e.tar \u003cREGISTRY\u003e/\u003cIMAGE\u003e:\u003cTAG\u003e --platform --platform linux/\u003cARCH\u003e \u003cREGISTRY\u003e/\u003cIMAGE\u003e:\u003cTAG\u003e and \u003cARCH\u003e should be the same as in the pull command, while \u003ctarball_name\u003e can be any name you would like.\nTransfer the exported \u003ctarball_name\u003e.tar to your device to a folder of your choosing, e.g. /data/var/containers/images\nObtain a terminal connection to this device and go to the directory where you transferred the container image tarball.\nImport the image to the kanto-cm registry by running:\nctr --namespace kanto-cm image import \u003ctarball_name\u003e.tar Note: If you see a message from ctr that the “image might be filtered out” this means that you might have pulled an image for an architecture that does not match the one of your device.\n","categories":"","description":"","excerpt":"Developers working in a corporate environment may face challenges when …","ref":"/leda/docs/restricted-internet-environments/","tags":"","title":"Restricted-Internet Environments"},{"body":"The vehicle update manager is used in the context of OTA Software Updates.\nOverview Vehicle Update Manager (VUM) is an extended version of the Eclipse Kanto Container Manager that is being able to handle new desired state for the software on the whole vehicle device.\nImplementation The desired state comes as a multi document YAML content and it includes a list of container resources:\nContainer Configuration VUM detects the system-level update custom resource and passes it for further processing to the Self Update Agent.\nVUM also monitors the self-update agent and the control plane, and compiles and report the current state of the device.\nSource Repository Source Repository: https://github.com/eclipse-leda/leda-contrib-vehicle-update-manager\n","categories":"","description":"","excerpt":"The vehicle update manager is used in the context of OTA Software …","ref":"/leda/docs/leda-incubator/vehicle-update-manager/","tags":"","title":"Vehicle Update Manager"},{"body":"\nIn order to verify that the device and the cloud connector can successfully receive messages sent by the cloud backend, we will send a dummy message to the device.\nPre-Requisites Device is up and running, e.g by running in qemu Eclipse Leda has successfully booted The device has been provisioned and configured, see Device Provisioning Validating configuration First, let’s check that the cloud connection is active.\nLogin as root\nRun sdv-health and check for the SDV Connectivity section:\nsdv-health Start watching the output of the cloud connector:\nkantui Select the cloud-connector container and press L to watch the logs\nNote: When an unknown type of message is received, the cloud connector will log an error:\n2022/04/13 16:04:41.911727 [agent] ERROR Handler returned error err=\"cannot deserialize cloud message: invalid character 'H' looking for beginning of value Start watching on the MQTT message broker:\nmosquitto_sub -h localhost -t '#' --pretty -v Note: When a known type of message is received, the cloud connector will forward the message to the MQTT broker into the corresponding topic $appId/$cmdName\nSending a Device Message Go to the Web Console of Azure IoT Hub Select the device Click on “Send Message” Enter a C2D payload and click “Send” Alternatively, on command line, use the Azure CLI client. Replace DeviceId and IotHubName with the appropriate names of your IoT Hub and device.\naz iot device c2d-message send \\ --device-id ${DeviceID} \\ --hub-name ${IotHubName} \\ --data 'Hello World' ","categories":"","description":"","excerpt":"\nIn order to verify that the device and the cloud connector can …","ref":"/leda/docs/app-deployment/cloud2device-messages/","tags":"","title":"Cloud2Device Messages"},{"body":"","categories":"","description":"","excerpt":"","ref":"/leda/docs/project-info/","tags":"","title":"Project Information"},{"body":"Versioning and Codenames Distribution Versioning is following the x.y.z syntax for the distribution, e.g. Leda 0.0.1 Build Versioning is following the git describe syntax: v0.0.1-blank-168-g7e14c4c Latest tag name: v0.0.1 Branch name: blank Number of commits behind: 168 Short Commit ID: g7e14c4c Codenames are taken from Wikipedia List of Motor Racing Tracks Initial codename is Hockenheim Current distribution version can be taken from /etc/issue: root@qemux86-64:~# cat /etc/issue Eclipse Leda v0.0.8 How to Release A new release is triggered manually from its GitHub web page Releases section. By clicking on the Draft new release button, the release process starts:\nSelect a branch to use as code base for the release Create a tag using the standard pattern vX.Y.Z Write a title Release X.Y.Z and release notes Optionally select if this is a pre-release Publish the release Validate the release With Publish the release action the release workflow located in .github/workflows/release.yml will be triggered. This will start building the distro image files for the supported platforms, running the test cases and generating reports as junit xml and license scanning. If the image generation and the test runs are successful the artifacts: images, test binaries and qa reports will be attached as assets to the release.\nThe build (build.yml) and release (release.yml) workflows share a common reusable workflow (base.yml). In this way the release workflow repeats the build actions without duplicating the code.\nDetailed build information on device Eclipse Leda Version root@qemux86-64:~# cat /etc/issue Eclipse Leda v0.0.8 Exact Build Timestamp root@qemux86-64:~# cat /etc/version 20220408135014 root@qemux86-64:~# cat /etc/timestamp 20220408135230 Details of Build Information root@qemux86-64:~# cat /etc/build ----------------------- Build Configuration: | ----------------------- DISTRO = leda DISTRO_VERSION = 2022 DATETIME = 20220408135014 DISTRO_NAME = Eclipse Leda IMAGE_BASENAME = core-image-minimal MACHINE = qemux86-64 TUNE_PKGARCH = core2-64 MACHINE_FEATURES = alsa bluetooth usbgadget screen vfat x86 pci rtc qemu-usermode DISTRO_FEATURES = acl alsa argp debuginfod ipv4 ipv6 largefile pcmcia usbgadget usbhost wifi xattr zeroconf pci vfat seccomp largefile ptest multiarch vulkan virtualization k8s seccomp raucg COMMON_FEATURES = IMAGE_FEATURES = debug-tweaks TUNE_FEATURES = m64 core2 TARGET_FPU = APP_URI_PREFIX = APP_URI_BRANCH = ----------------------- Layer Revisions: | ----------------------- meta = honister:ee68ae307fd951b9de6b31dc6713ea29186b7749 meta-poky = honister:ee68ae307fd951b9de6b31dc6713ea29186b7749 meta-yocto-bsp = honister:ee68ae307fd951b9de6b31dc6713ea29186b7749 meta-leda = main:30a5ff0a7e04dfa2c9b43175a49ac7a2ae0c64a9 -- modified meta-rauc = honister:3faf4cc4fcf558e99dad5aa8532fef2ecd566653 meta-filesystems = honister:061b7fc74f887454251307ef119b808a90654d3f meta-networking = honister:061b7fc74f887454251307ef119b808a90654d3f meta-oe = honister:061b7fc74f887454251307ef119b808a90654d3f meta-python = honister:061b7fc74f887454251307ef119b808a90654d3f meta-perl = honister:061b7fc74f887454251307ef119b808a90654d3f meta-virtualization = honister:bd7511c53b921c9ce4ba2fdb42778ca194ebc3e8 meta-security = honister:fb77606aef461910db4836bad94d75758cc2688c patch = main:a041dad5be9444d55491b57cb6a669a44196566d -- modified ","categories":"","description":"","excerpt":"Versioning and Codenames Distribution Versioning is following the …","ref":"/leda/docs/build/release/","tags":"","title":"Releasing"},{"body":"Manage the Kanto Container Management configuration via CLI.\nNote: Requires jq to be installed.\nFeatures:\nAdd and remove container registries (for authentication purposes) Set primitive values in configuration Restart container-management.service on configuration changes Automatically back up configuration file Display changes to user Usage Synposis: ./sdv-kanto-ctl \u003ccommand\u003e [\u003coptions\u003e]\nFull help:\n$ ./sdv-kanto-ctl --help Eclipse Kanto Container Manager Configuration Utility See https://eclipse.dev/kanto/docs/references/containers/container-manager-config/ Usage: ./sdv-kanto-ctl \u003ccommand\u003e {options} Commands: add-registry -h \u003chostname\u003e -u \u003cusername\u003e -p \u003cpassword\u003e Adds or replaces a container registry authentication configuration -h or --hostname: Configure the hostname of the container registry (e.g. hub.docker.io, ghcr.io, ...) -u or --username: Configure the username -p or --password: Configure the password remove-registry -h \u003chostname\u003e Removes the specified container registry -h or --hostname: The hostname of the container registry remove-all-registries Removes all configured container registries list-registries Prints all configured container registries show-config Print the container management configuration set \u003ckey\u003e \u003cvalue\u003e Set a primitive configuration value. Key in JSON Dot-Notation Examples: ./sdv-kanto-ctl set containers.registry_configurations.MyRegistry.credentials.password foobar ./sdv-kanto-ctl set things.enable true Options: --no-reload : Do not reload the configuration and restart the container-management service automatically --ansi : Don't use colored output. --verbose | -v : Enable verbose mode. --help : This message. Example: Private Container Registries To be able to pull container images, the container runtime needs access to the container registry. Some container registries require authentication. The Kanto Container Manager can be configured to use credentials when accessing remote container registries.\nIn the Leda images, the sdv-kanto-ctl tools allows to easily add authentication to the container manager configuration:\nsdv-kanto-ctl add-registry -h \u003cregistryhostname\u003e -u \u003cyour_username\u003e -p \u003cyour_password\u003e For example, to access container images from GitHub Packages in a private repository, you need a GitHub Personal Access Token (PAT) with the read: packages scope. Then, add the repository as shown below:\nsdv-kanto-ctl add-registry -h ghcr.io -u github -p \u003cYour_GitHub_PersonalAccessToken\u003e sdv-kanto-ctl will make the necessary modifications to /etc/container-management/config.json and restarts the container-management.service systemd unit, so that the changes take effect. You may need to recreate or restart the container if a previous pull failed.\nPlease see the Eclipse Kanto Container Manager Configuration reference for details.\nExample: Enabling Things management Enable the container manager digital twin representation.\nsdv-kanto-ctl set things.enable true Example: Container Stop Timeout Kanto waits for a timeout before forcefully stopping a container. The default is 30 seconds in Kanto, and 10 seconds in the Leda quickstart image.\nTo change this behavior at runtime:\nsdv-kanto-ctl set manager.default_ctrs_stop_timeout 2 ","categories":"","description":"","excerpt":"Manage the Kanto Container Management configuration via CLI.\nNote: …","ref":"/leda/docs/general-usage/utilities/sdv-kanto-ctl/","tags":"","title":"SDV Kanto-Ctl"},{"body":"The Leda teams provides some custom utilities that allow for a more integrated end-user experience. They can be found in the main leda-utils repository on GitHub: eclipse-leda/leda-utils.\nThe following pages are meant to serve as both internal documentation and general guidelines when developing for Leda.\nBash Leda uses the classic Bourne shell as its main shell, thus all scripts should be sh-compatible (use the #!/bin/sh shebang). As a Poky+OE-based distro we use BusyBox for core-utils. To check explicitly for “bashisms” in your scripts, the checkbashisms tool might be useful.\nUtility-Specific Pages\nThe bash-based leda-utils are all deployed with the same recipe under the sdv-base packagegroup: meta-leda/meta-leda-components/recipes-sdv/sdv-base.\nRust The current main branch for leda-distro (and meta-leda) is based on the Kirkstone Yocto/Poky release.\nToolchain version The version of the Rust toolchain available in OE (Kirkstone) is 1.59.0. Make sure to target 1.59.0 (or earlier) when developing Rust-based utils for leda. To set 1.59.0 as your default Rust version on your development machine:\n$ rustup install 1.59.0 $ rustup default 1.59.0 $ cargo --version cargo 1.59.0 (49d8809dc 2022-02-10) Generating bitbake recipes with cargo-bitbake After making sure your toolchain is on version 1.59.0 go trough a clean build of your Rust binary:\n$ cd \u003crust_project_dir\u003e $ cargo clean $ rm Cargo.lock $ cargo build --release This will make sure the Cargo.lock is re-generated with packages matching the Rust version. The cargo.bbclass on which Rust recipes are based, requires all Rust crates + their version (matching the Cargo.toml) to be specified as a “SRC_URI +=”. This can become tedious and error-prone if done by hand. That’s why meta-rust provides a tool called cargo-bitbake that generates a minimal recipe with all the crates it finds in the Cargo.lock files of the project.\n$ cargo install --locked cargo-bitbake $ cd \u003crust_project_dir\u003e $ cargo bitbake This will generate a recipe in the project root which you can use as a starting point.\nExample: kantui_git.bb\nNote this recipe will only build your Rust crate. To deploy/install your binary you have to define a .inc file with the same name as the recipe that would handle the installation.\nExample: kantui.inc\nKnown bugs The built-in proc_macros crate is not being imported properly by meta-rust (Kirkstone), thus breaking all library crates that define a proc_macro (meta-rust issue 266). To fix this create a libstd-rs_%.bbappend file containing the single line:\nS = \"${RUSTSRC}/library/test\" meta-leda already provides this fix here, so it should not be necessary to implement it again.\n“Fat” Link time optimization LTO is a nice feature of LLVM that can optimize even through language boundaries at link-time, but leads to longer overall build times. That is why Rust by default uses “thin” LTO which may result in larger/slower binaries. “Fat” LTO can be enabled when building release binaries by adding to the Cargo.toml file the following section:\n[profile.release] lto = true For kantui this leads to reduction of the final binary size from ~8 MiB to ~5 MiB.\nMore information on profile-optimizations can be found here.\nNote: Stripping the debug symbols completely results in further binary size reduction, but BitBake fails with a QA problem when deploying stripped binaries.\nRust-based utilities Utility-Specific Pages\n","categories":"","description":"","excerpt":"The Leda teams provides some custom utilities that allow for a more …","ref":"/leda/docs/build/dev-and-maintenance/","tags":"","title":"Developing and Maintaining Utils"},{"body":"Frequently Asked Questions Why is the performance very slow? The performance of a system heavily relies on the infrastructure and the general setup.\nOn virtual setup (QEMU): Typical reasons for slow performance are software emulation, e.g. when you run an ARM-based image on an x86-based host machine. This requires QEMU to emulate the execution, which is very slow. When you run an x86-based image on an x86-based host machine, QEMU can leverage acceleration, such as KVM, which greatly improves the performance. For network performance issues, try to use TAP networking instead of SLIRP networking for QEMU. That requires more setup on the host though. On hardware, such as Raspberry Pi, it should be fast. If the system startup takes very long, you may have an outdated image, please update to the latest version. Another cause of performance loss can be networking issues, especially if the system does not have transparent internet access, network requests (e.g. DNS) may time out and slowing down the startup. On startup, the container runtime may download newer versions of containers and unpack them, which takes a considerable amount of time depending on the size of the container images. Why is my Bluetooth/Wifi driver missing? Please check the latest release, as we’re continously adding features. If your driver is still missing, please open a new GitHub Issue. We can add Kernel Modules for supported hardware. If you hardware is not supported out of the box by the Eclipse Leda project, you need to build your own image and customize the Linux Kernel configuration. Please see the Yocto Project documentation on how to do that.\nHow do I connect to a WiFi network? We use iwd/iwctl as high-level interfaces to manage wireless devices. For a guide on how to connect to a WiFi network with iwctl, you can check: Notes on using iwd/iwctl.\nHow can a container access CAN-Bus interfaces? As using a CAN-Bus requires access to the host network interface, the container needs to run in privileged mode and it needs access to the host network interface. For a Kanto-CM container, simply add privileged: true to the container configuration. A more sophisticated setup involves using virtual CAN interfaces for each container and using a CAN gateway to route the traffic accordingly. However, using CAN-Bus is not in the focus of SDV-style applications, as we assume that Vehicle Services would be running on dedicated ECUs, offering higher-level interfaces to Vehicle Applications on other protocols, such as Some/IP.\n\"host_config\": { ... \"network_mode\": \"host\", \"privileged\": true, ... } Why does booting from SD-Card sometimes fail and enters maintenance mode? This may depend on the quality or age of the SD-Card as well. Also, consumer-grade hardware like a Raspberry Pi may fail at times. Please try another SD-Card. Another reason may be high write operations to the SD-Card due to excessive data transfer (logging, container deployment etc.).\nHow can I install additional software in Leda? As we’re using Yocto, there is no central repository for software packages. Thus, we did not include any kind of package manager. If you feel that the software you want to install is valuable for other Leda users as well, please open a new GitHub Issue and request the installation of the software. If the software is specific to your use case, you need to build your own image using Yocto. Alternatively, you may build a container for your software and deploy the container into the container runtime. Using kanto-cm or ctr you would be able to execute your software as a container. See the Cheatsheet for an example.\n","categories":"","description":"","excerpt":"Frequently Asked Questions Why is the performance very slow? The …","ref":"/leda/docs/customization/faq/","tags":"","title":"FAQ"},{"body":"The release plan is available at https://projects.eclipse.org/projects/automotive.leda/releases/0.1.0\nRelease Date Thursday, June 1, 2023\nDeliverables The team plans to deliver the following features:\nLeda Quickstart Images for Qemu (x86_64, arm64), Raspberry Pi and Docker Yocto / OpenEmbedded meta-layer for better reusability of the Eclipse SDV Vehicle.Edge stack in customized distributions for constrained devices User documentation (Reference, Example Use Cases) Automated system tests using Robot Framework IP scanning with Eclipse Oniro Compliance Toolchain Pre-Integrated Eclipse SDV Vehicle.Edge stack The core SDV.EDGE stack in Leda would contain the following components for the first release (based upon availability):\nEclipse Kuksa.VAL: Data Broker Eclipse Kanto: Container Management, Vehicle Update Manager Eclipse Leda Incubator: Cloud Connector (Azure), Self Update Agent, Utilities (e.g kantui) The following components are not yet released in public or did not yet finished the project review, and may only be added to the release on shorter notice:\n(Eclipse Backend-Function-Bindings) (Eclipse SommR) (OTA Client) Compatibility Compatibility to previous versions is not considered for this first release.\nInternationalization No efforts towards i18n are done in this release.\nTarget Environments Linux (virtual, qemu) Raspberry Pi 4 (consumer grade) ","categories":"","description":"","excerpt":"The release plan is available at …","ref":"/leda/docs/about/releases/0.1.0/leda-0.1.0-plan/","tags":"","title":"Release Plan 0.1.0"},{"body":" Full qualified VSS Path: Vehicle.Exterior.AirTemperature Description: Air temperature outside the vehicle. Navigation flowchart LR Vehicle--\u003eExterior Exterior--\u003eAirTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Exterior.AirTemperature [get] OK Vehicle.Exterior.AirTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Exterior.AirTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Exterior.AirTemperature Data Type \u0026 Unit Path Vehicle.Exterior.AirTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Exterior.AirTemperature is a Sensor.\nThe vehicle signal Vehicle.Exterior.AirTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Exterior.AirTemperature is a38d3f5dfeb35317aca8b90453dc1a75\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Exterior.AirTemperature Description: …","ref":"/leda/docs/vss/vehicle/exterior/airtemperature/","tags":"","title":"AirTemperature"},{"body":" Full qualified VSS Path: Vehicle.Driver.AttentiveProbability Description: Probability of attentiveness of the driver. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eAttentiveProbability Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.AttentiveProbability [get] OK Vehicle.Driver.AttentiveProbability: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.AttentiveProbability 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.AttentiveProbability Data Type \u0026 Unit Path Vehicle.Driver.AttentiveProbability VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Driver.AttentiveProbability is a Sensor.\nThe vehicle signal Vehicle.Driver.AttentiveProbability is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.AttentiveProbability is fcd202467afb533fbbf9e7da89cc1cee\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.AttentiveProbability …","ref":"/leda/docs/vss/vehicle/driver/attentiveprobability/","tags":"","title":"AttentiveProbability"},{"body":" Full qualified VSS Path: Vehicle.Connectivity Description: Connectivity data. Navigation flowchart LR Vehicle--\u003eConnectivity Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Connectivity Signal Information The vehicle signal Vehicle.Connectivity is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Connectivity is 89c267fccea35f3da9871cca2b4dc4df\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Connectivity.IsConnectivityAvailable (Indicates if connectivity between vehicle and cloud is available. True = Connectivity is available. False = Connectivity is not available.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Connectivity Description: …","ref":"/leda/docs/vss/vehicle/connectivity/","tags":"","title":"Connectivity"},{"body":" Full qualified VSS Path: Vehicle.Service.DistanceToService Description: Remaining distance to service (of any kind). Negative values indicate service overdue. Navigation flowchart LR Vehicle--\u003eService Service--\u003eDistanceToService Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Service.DistanceToService [get] OK Vehicle.Service.DistanceToService: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Service.DistanceToService 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Service.DistanceToService Data Type \u0026 Unit Path Vehicle.Service.DistanceToService VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Service.DistanceToService is a Sensor.\nThe vehicle signal Vehicle.Service.DistanceToService is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Service.DistanceToService is 6f4347ce149759819572c8c3a17e8d93\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Service.DistanceToService …","ref":"/leda/docs/vss/vehicle/service/distancetoservice/","tags":"","title":"DistanceToService"},{"body":" Full qualified VSS Path: Vehicle.Driver.DistractionLevel Description: Distraction level of the driver will be the level how much the driver is distracted, by multiple factors. E.g. Driving situation, acustical or optical signales inside the cockpit, phone calls. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eDistractionLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.DistractionLevel [get] OK Vehicle.Driver.DistractionLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.DistractionLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.DistractionLevel Data Type \u0026 Unit Path Vehicle.Driver.DistractionLevel VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Driver.DistractionLevel is a Sensor.\nThe vehicle signal Vehicle.Driver.DistractionLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.DistractionLevel is cb35ec0b924e58979e1469146d65c3fa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.DistractionLevel Description: …","ref":"/leda/docs/vss/vehicle/driver/distractionlevel/","tags":"","title":"DistractionLevel"},{"body":" Full qualified VSS Path: Vehicle.Exterior Description: Information about exterior measured by vehicle. Navigation flowchart LR Vehicle--\u003eExterior Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Exterior Signal Information The vehicle signal Vehicle.Exterior is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Exterior is 06c5def549f3580e8cdaffa3e0f5d25c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Exterior.AirTemperature (Air temperature outside the vehicle.) Vehicle.Exterior.Humidity (Relative humidity outside the vehicle. 0 = Dry, 100 = Air fully saturated.) Vehicle.Exterior.LightIntensity (Light intensity outside the vehicle. 0 = No light detected, 100 = Fully lit.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Exterior Description: Information …","ref":"/leda/docs/vss/vehicle/exterior/","tags":"","title":"Exterior"},{"body":" Full qualified VSS Path: Vehicle.Driver.FatigueLevel Description: Fatigueness level of driver. Evaluated by multiple factors like trip time, behaviour of steering, eye status. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eFatigueLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.FatigueLevel [get] OK Vehicle.Driver.FatigueLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.FatigueLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.FatigueLevel Data Type \u0026 Unit Path Vehicle.Driver.FatigueLevel VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Driver.FatigueLevel is a Sensor.\nThe vehicle signal Vehicle.Driver.FatigueLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.FatigueLevel is 49b1626295705a79ae20d8a270c48b6b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.FatigueLevel Description: …","ref":"/leda/docs/vss/vehicle/driver/fatiguelevel/","tags":"","title":"FatigueLevel"},{"body":" Full qualified VSS Path: Vehicle.Driver.HeartRate Description: Heart rate of the driver. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eHeartRate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.HeartRate [get] OK Vehicle.Driver.HeartRate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.HeartRate 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.HeartRate Data Type \u0026 Unit Path Vehicle.Driver.HeartRate VSS: Addressing nodes Data type uint16 VSS: Datatypes Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Driver.HeartRate is a Sensor.\nThe vehicle signal Vehicle.Driver.HeartRate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.HeartRate is d71516905f785c4da867a2f86e774d93\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.HeartRate Description: Heart …","ref":"/leda/docs/vss/vehicle/driver/heartrate/","tags":"","title":"HeartRate"},{"body":" Full qualified VSS Path: Vehicle.Exterior.Humidity Description: Relative humidity outside the vehicle. 0 = Dry, 100 = Air fully saturated. Navigation flowchart LR Vehicle--\u003eExterior Exterior--\u003eHumidity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Exterior.Humidity [get] OK Vehicle.Exterior.Humidity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Exterior.Humidity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Exterior.Humidity Data Type \u0026 Unit Path Vehicle.Exterior.Humidity VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Exterior.Humidity is a Sensor.\nThe vehicle signal Vehicle.Exterior.Humidity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Exterior.Humidity is 6c785ec5d9a5534f98be7ce198d25d6b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Exterior.Humidity Description: …","ref":"/leda/docs/vss/vehicle/exterior/humidity/","tags":"","title":"Humidity"},{"body":" Full qualified VSS Path: Vehicle.Connectivity.IsConnectivityAvailable Description: Indicates if connectivity between vehicle and cloud is available. True = Connectivity is available. False = Connectivity is not available. Comment: This signal can be used by onboard vehicle services to decide what features that shall be offered to the driver, for example disable the ‘check for update’ button if vehicle does not have connectivity. Navigation flowchart LR Vehicle--\u003eConnectivity Connectivity--\u003eIsConnectivityAvailable Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Connectivity.IsConnectivityAvailable [get] OK Vehicle.Connectivity.IsConnectivityAvailable: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Connectivity.IsConnectivityAvailable false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Connectivity.IsConnectivityAvailable Data Type \u0026 Unit Path Vehicle.Connectivity.IsConnectivityAvailable VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Connectivity.IsConnectivityAvailable is a Sensor.\nThe vehicle signal Vehicle.Connectivity.IsConnectivityAvailable is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Connectivity.IsConnectivityAvailable is b6d11be2a6565996b68ffb07a96595a7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Connectivity.IsConnectivityAvailable …","ref":"/leda/docs/vss/vehicle/connectivity/isconnectivityavailable/","tags":"","title":"IsConnectivityAvailable"},{"body":" Full qualified VSS Path: Vehicle.Driver.IsEyesOnRoad Description: Has driver the eyes on road or not? Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eIsEyesOnRoad Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.IsEyesOnRoad [get] OK Vehicle.Driver.IsEyesOnRoad: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.IsEyesOnRoad false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.IsEyesOnRoad Data Type \u0026 Unit Path Vehicle.Driver.IsEyesOnRoad VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Driver.IsEyesOnRoad is a Sensor.\nThe vehicle signal Vehicle.Driver.IsEyesOnRoad is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.IsEyesOnRoad is 625e5009f1145aa0b797ee6c335ca2fe\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.IsEyesOnRoad Description: Has …","ref":"/leda/docs/vss/vehicle/driver/iseyesonroad/","tags":"","title":"IsEyesOnRoad"},{"body":" Full qualified VSS Path: Vehicle.Service.IsServiceDue Description: Indicates if vehicle needs service (of any kind). True = Service needed now or in the near future. False = No known need for service. Navigation flowchart LR Vehicle--\u003eService Service--\u003eIsServiceDue Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Service.IsServiceDue [get] OK Vehicle.Service.IsServiceDue: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Service.IsServiceDue false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Service.IsServiceDue Data Type \u0026 Unit Path Vehicle.Service.IsServiceDue VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Service.IsServiceDue is a Sensor.\nThe vehicle signal Vehicle.Service.IsServiceDue is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Service.IsServiceDue is 3e28f85ccccd5702b9adbe9a761ea1b4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Service.IsServiceDue Description: …","ref":"/leda/docs/vss/vehicle/service/isservicedue/","tags":"","title":"IsServiceDue"},{"body":" Full qualified VSS Path: Vehicle.Driver.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.Identifier.Issuer [get] OK Vehicle.Driver.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Driver.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Driver.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Driver.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.Identifier.Issuer is ee7988d26d7156d2a030ecc506ea97e7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.Identifier.Issuer …","ref":"/leda/docs/vss/vehicle/driver/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Exterior.LightIntensity Description: Light intensity outside the vehicle. 0 = No light detected, 100 = Fully lit. Comment: Mapping to physical units and calculation method is sensor specific. Navigation flowchart LR Vehicle--\u003eExterior Exterior--\u003eLightIntensity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Exterior.LightIntensity [get] OK Vehicle.Exterior.LightIntensity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Exterior.LightIntensity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Exterior.LightIntensity Data Type \u0026 Unit Path Vehicle.Exterior.LightIntensity VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Exterior.LightIntensity is a Sensor.\nThe vehicle signal Vehicle.Exterior.LightIntensity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Exterior.LightIntensity is 9b46b70490f853e891e1cc35dd08dddc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Exterior.LightIntensity Description: …","ref":"/leda/docs/vss/vehicle/exterior/lightintensity/","tags":"","title":"LightIntensity"},{"body":" Full qualified VSS Path: Vehicle.Service Description: Service data. Navigation flowchart LR Vehicle--\u003eService Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Service Signal Information The vehicle signal Vehicle.Service is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Service is b6463772705b56a7a993e23601bd3d47\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Service.DistanceToService (Remaining distance to service (of any kind). Negative values indicate service overdue.) Vehicle.Service.IsServiceDue (Indicates if vehicle needs service (of any kind). True = Service needed now or in the near future. False = No known need for service.) Vehicle.Service.TimeToService (Remaining time to service (of any kind). Negative values indicate service overdue.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Service Description: Service data. …","ref":"/leda/docs/vss/vehicle/service/","tags":"","title":"Service"},{"body":" Full qualified VSS Path: Vehicle.Driver.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Driver.Identifier.Subject [get] OK Vehicle.Driver.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Driver.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Driver.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Driver.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Driver.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.Identifier.Subject is b41ec688af265f10824bc9635989ac55\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.Identifier.Subject …","ref":"/leda/docs/vss/vehicle/driver/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Service.TimeToService Description: Remaining time to service (of any kind). Negative values indicate service overdue. Navigation flowchart LR Vehicle--\u003eService Service--\u003eTimeToService Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Service.TimeToService [get] OK Vehicle.Service.TimeToService: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Service.TimeToService 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Service.TimeToService Data Type \u0026 Unit Path Vehicle.Service.TimeToService VSS: Addressing nodes Data type int32 VSS: Datatypes Unit s VSS: Units Label second Description Time measured in seconds VSS: Sensors \u0026 Actuators Domain time Note: The int32 datatype is a signed 32-bit integer which technically allows values between -2147483648 and 2147483647 (inclusive).\nSignal Information The vehicle signal Vehicle.Service.TimeToService is a Sensor.\nThe vehicle signal Vehicle.Service.TimeToService is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Service.TimeToService is c968be91a5685fa9ae30b84a0f91934e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Service.TimeToService Description: …","ref":"/leda/docs/vss/vehicle/service/timetoservice/","tags":"","title":"TimeToService"},{"body":" Full qualified VSS Path: Vehicle.OBD.AbsoluteLoad Description: PID 43 - Absolute load value Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eAbsoluteLoad Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.AbsoluteLoad [get] OK Vehicle.OBD.AbsoluteLoad: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.AbsoluteLoad 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.AbsoluteLoad Data Type \u0026 Unit Path Vehicle.OBD.AbsoluteLoad VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.AbsoluteLoad is a Sensor.\nThe vehicle signal Vehicle.OBD.AbsoluteLoad is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.AbsoluteLoad is b3dd889a42ce5de9a7904b7196ae325c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.AbsoluteLoad Description: PID 43 …","ref":"/leda/docs/vss/vehicle/obd/absoluteload/","tags":"","title":"AbsoluteLoad"},{"body":" Full qualified VSS Path: Vehicle.OBD.AcceleratorPositionD Description: PID 49 - Accelerator pedal position D Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eAcceleratorPositionD Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.AcceleratorPositionD [get] OK Vehicle.OBD.AcceleratorPositionD: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.AcceleratorPositionD 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.AcceleratorPositionD Data Type \u0026 Unit Path Vehicle.OBD.AcceleratorPositionD VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.AcceleratorPositionD is a Sensor.\nThe vehicle signal Vehicle.OBD.AcceleratorPositionD is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.AcceleratorPositionD is 7e63256081ac5a7b8a28a6fa3c2c2ff9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.AcceleratorPositionD …","ref":"/leda/docs/vss/vehicle/obd/acceleratorpositiond/","tags":"","title":"AcceleratorPositionD"},{"body":" Full qualified VSS Path: Vehicle.OBD.AcceleratorPositionE Description: PID 4A - Accelerator pedal position E Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eAcceleratorPositionE Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.AcceleratorPositionE [get] OK Vehicle.OBD.AcceleratorPositionE: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.AcceleratorPositionE 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.AcceleratorPositionE Data Type \u0026 Unit Path Vehicle.OBD.AcceleratorPositionE VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.AcceleratorPositionE is a Sensor.\nThe vehicle signal Vehicle.OBD.AcceleratorPositionE is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.AcceleratorPositionE is 4104e7fc25355e25b4522d233565d84b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.AcceleratorPositionE …","ref":"/leda/docs/vss/vehicle/obd/acceleratorpositione/","tags":"","title":"AcceleratorPositionE"},{"body":" Full qualified VSS Path: Vehicle.OBD.AcceleratorPositionF Description: PID 4B - Accelerator pedal position F Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eAcceleratorPositionF Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.AcceleratorPositionF [get] OK Vehicle.OBD.AcceleratorPositionF: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.AcceleratorPositionF 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.AcceleratorPositionF Data Type \u0026 Unit Path Vehicle.OBD.AcceleratorPositionF VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.AcceleratorPositionF is a Sensor.\nThe vehicle signal Vehicle.OBD.AcceleratorPositionF is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.AcceleratorPositionF is 95f5c2a209a857ff930e2f8e32ac2d3f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.AcceleratorPositionF …","ref":"/leda/docs/vss/vehicle/obd/acceleratorpositionf/","tags":"","title":"AcceleratorPositionF"},{"body":" Full qualified VSS Path: Vehicle.OBD.AmbientAirTemperature Description: PID 46 - Ambient air temperature Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eAmbientAirTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.AmbientAirTemperature [get] OK Vehicle.OBD.AmbientAirTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.AmbientAirTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.AmbientAirTemperature Data Type \u0026 Unit Path Vehicle.OBD.AmbientAirTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.AmbientAirTemperature is a Sensor.\nThe vehicle signal Vehicle.OBD.AmbientAirTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.AmbientAirTemperature is 220a90f183c5583ea8b8b6454d774517\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.AmbientAirTemperature …","ref":"/leda/docs/vss/vehicle/obd/ambientairtemperature/","tags":"","title":"AmbientAirTemperature"},{"body":" Full qualified VSS Path: Vehicle.OBD.CommandedEquivalenceRatio Description: PID 44 - Commanded equivalence ratio Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCommandedEquivalenceRatio Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.CommandedEquivalenceRatio [get] OK Vehicle.OBD.CommandedEquivalenceRatio: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.CommandedEquivalenceRatio 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.CommandedEquivalenceRatio Data Type \u0026 Unit Path Vehicle.OBD.CommandedEquivalenceRatio VSS: Addressing nodes Data type float VSS: Datatypes Unit ratio VSS: Units Label ratio Description Relation measured as ratio VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.CommandedEquivalenceRatio is a Sensor.\nThe vehicle signal Vehicle.OBD.CommandedEquivalenceRatio is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.CommandedEquivalenceRatio is 104e39e816f65fa791d0afa24603292b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.CommandedEquivalenceRatio …","ref":"/leda/docs/vss/vehicle/obd/commandedequivalenceratio/","tags":"","title":"CommandedEquivalenceRatio"},{"body":" Full qualified VSS Path: Vehicle.OBD.ControlModuleVoltage Description: PID 42 - Control module voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eControlModuleVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ControlModuleVoltage [get] OK Vehicle.OBD.ControlModuleVoltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ControlModuleVoltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ControlModuleVoltage Data Type \u0026 Unit Path Vehicle.OBD.ControlModuleVoltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ControlModuleVoltage is a Sensor.\nThe vehicle signal Vehicle.OBD.ControlModuleVoltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ControlModuleVoltage is 59e072b932605ffc88a299c874d885c4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ControlModuleVoltage …","ref":"/leda/docs/vss/vehicle/obd/controlmodulevoltage/","tags":"","title":"ControlModuleVoltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus Description: PID 41 - OBD status for the current drive cycle Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDriveCycleStatus Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DriveCycleStatus Signal Information The vehicle signal Vehicle.OBD.DriveCycleStatus is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DriveCycleStatus is 5215e28062f75154822789b8a5f30630\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.DriveCycleStatus.DTCCount (Number of sensor Trouble Codes (DTC)) Vehicle.OBD.DriveCycleStatus.IgnitionType (Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)) Vehicle.OBD.DriveCycleStatus.IsMILOn (Malfunction Indicator Light (MIL) - False = Off, True = On) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus Description: …","ref":"/leda/docs/vss/vehicle/obd/drivecyclestatus/","tags":"","title":"DriveCycleStatus"},{"body":" Full qualified VSS Path: Vehicle.Driver Description: Driver data. Navigation flowchart LR Vehicle--\u003eDriver Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver Signal Information The vehicle signal Vehicle.Driver is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver is 1cac57e7b7e756dc8a154eaacbce6426\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Driver.AttentiveProbability (Probability of attentiveness of the driver.) Vehicle.Driver.DistractionLevel (Distraction level of the driver will be the level how much the driver is distracted, by multiple factors. E.g. Driving situation, acustical or optical signales inside the cockpit, phone calls.) Vehicle.Driver.FatigueLevel (Fatigueness level of driver. Evaluated by multiple factors like trip time, behaviour of steering, eye status.) Vehicle.Driver.HeartRate (Heart rate of the driver.) Vehicle.Driver.Identifier (Identifier attributes based on OAuth 2.0.) Vehicle.Driver.IsEyesOnRoad (Has driver the eyes on road or not?) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver Description: Driver data. …","ref":"/leda/docs/vss/vehicle/driver/","tags":"","title":"Driver"},{"body":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus.DTCCount Description: Number of sensor Trouble Codes (DTC) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDriveCycleStatus DriveCycleStatus--\u003eDTCCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.DriveCycleStatus.DTCCount [get] OK Vehicle.OBD.DriveCycleStatus.DTCCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.DriveCycleStatus.DTCCount 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DriveCycleStatus.DTCCount Data Type \u0026 Unit Path Vehicle.OBD.DriveCycleStatus.DTCCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.DriveCycleStatus.DTCCount is a Sensor.\nThe vehicle signal Vehicle.OBD.DriveCycleStatus.DTCCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DriveCycleStatus.DTCCount is 312856f746ff560e8098c19196964d3b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus.DTCCount …","ref":"/leda/docs/vss/vehicle/obd/drivecyclestatus/dtccount/","tags":"","title":"DTCCount"},{"body":" Full qualified VSS Path: Vehicle.OBD.EthanolPercent Description: PID 52 - Percentage of ethanol in the fuel Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEthanolPercent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EthanolPercent [get] OK Vehicle.OBD.EthanolPercent: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EthanolPercent 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EthanolPercent Data Type \u0026 Unit Path Vehicle.OBD.EthanolPercent VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EthanolPercent is a Sensor.\nThe vehicle signal Vehicle.OBD.EthanolPercent is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EthanolPercent is a207e7de17e1520c894b412af6f2522c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EthanolPercent Description: PID …","ref":"/leda/docs/vss/vehicle/obd/ethanolpercent/","tags":"","title":"EthanolPercent"},{"body":" Full qualified VSS Path: Vehicle.OBD.EVAPVaporPressureAbsolute Description: PID 53 - Absolute evaporative purge (EVAP) system pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEVAPVaporPressureAbsolute Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EVAPVaporPressureAbsolute [get] OK Vehicle.OBD.EVAPVaporPressureAbsolute: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EVAPVaporPressureAbsolute 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EVAPVaporPressureAbsolute Data Type \u0026 Unit Path Vehicle.OBD.EVAPVaporPressureAbsolute VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EVAPVaporPressureAbsolute is a Sensor.\nThe vehicle signal Vehicle.OBD.EVAPVaporPressureAbsolute is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EVAPVaporPressureAbsolute is ef188a1e1a1356f7bc425081e3e00805\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EVAPVaporPressureAbsolute …","ref":"/leda/docs/vss/vehicle/obd/evapvaporpressureabsolute/","tags":"","title":"EVAPVaporPressureAbsolute"},{"body":" Full qualified VSS Path: Vehicle.OBD.EVAPVaporPressureAlternate Description: PID 54 - Alternate evaporative purge (EVAP) system pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEVAPVaporPressureAlternate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EVAPVaporPressureAlternate [get] OK Vehicle.OBD.EVAPVaporPressureAlternate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EVAPVaporPressureAlternate 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EVAPVaporPressureAlternate Data Type \u0026 Unit Path Vehicle.OBD.EVAPVaporPressureAlternate VSS: Addressing nodes Data type float VSS: Datatypes Unit Pa VSS: Units Label pascal Description Pressure measured in pascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EVAPVaporPressureAlternate is a Sensor.\nThe vehicle signal Vehicle.OBD.EVAPVaporPressureAlternate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EVAPVaporPressureAlternate is 68eaba3c79975d61bc35b92cd3e5e8d0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EVAPVaporPressureAlternate …","ref":"/leda/docs/vss/vehicle/obd/evapvaporpressurealternate/","tags":"","title":"EVAPVaporPressureAlternate"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelInjectionTiming Description: PID 5D - Fuel injection timing Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelInjectionTiming Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelInjectionTiming [get] OK Vehicle.OBD.FuelInjectionTiming: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelInjectionTiming 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelInjectionTiming Data Type \u0026 Unit Path Vehicle.OBD.FuelInjectionTiming VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelInjectionTiming is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelInjectionTiming is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelInjectionTiming is ab4869446f5357d6936838983e1b8949\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelInjectionTiming Description: …","ref":"/leda/docs/vss/vehicle/obd/fuelinjectiontiming/","tags":"","title":"FuelInjectionTiming"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelRailPressureAbsolute Description: PID 59 - Absolute fuel rail pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelRailPressureAbsolute Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelRailPressureAbsolute [get] OK Vehicle.OBD.FuelRailPressureAbsolute: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelRailPressureAbsolute 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelRailPressureAbsolute Data Type \u0026 Unit Path Vehicle.OBD.FuelRailPressureAbsolute VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelRailPressureAbsolute is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelRailPressureAbsolute is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelRailPressureAbsolute is 83c88b13d30153949eeca1b1180a9061\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelRailPressureAbsolute …","ref":"/leda/docs/vss/vehicle/obd/fuelrailpressureabsolute/","tags":"","title":"FuelRailPressureAbsolute"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelRate Description: PID 5E - Engine fuel rate Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelRate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelRate [get] OK Vehicle.OBD.FuelRate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelRate 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelRate Data Type \u0026 Unit Path Vehicle.OBD.FuelRate VSS: Addressing nodes Data type float VSS: Datatypes Unit l/h VSS: Units Label liter per hour Description Flow measured in liters per hour VSS: Sensors \u0026 Actuators Domain flow Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelRate is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelRate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelRate is 4ab7c2b710f95ceb9c7d01d19dabac38\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelRate Description: PID 5E - …","ref":"/leda/docs/vss/vehicle/obd/fuelrate/","tags":"","title":"FuelRate"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelType Description: PID 51 - Fuel type Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelType [get] OK Vehicle.OBD.FuelType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelType Data Type \u0026 Unit Path Vehicle.OBD.FuelType VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.OBD.FuelType is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelType is aefb45bdd8035904b0c8f3ffcedc53a9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelType Description: PID 51 - …","ref":"/leda/docs/vss/vehicle/obd/fueltype/","tags":"","title":"FuelType"},{"body":" Full qualified VSS Path: Vehicle.OBD.HybridBatteryRemaining Description: PID 5B - Remaining life of hybrid battery Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eHybridBatteryRemaining Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.HybridBatteryRemaining [get] OK Vehicle.OBD.HybridBatteryRemaining: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.HybridBatteryRemaining 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.HybridBatteryRemaining Data Type \u0026 Unit Path Vehicle.OBD.HybridBatteryRemaining VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.HybridBatteryRemaining is a Sensor.\nThe vehicle signal Vehicle.OBD.HybridBatteryRemaining is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.HybridBatteryRemaining is c9517b6243df5e8d8f3aa3e57f71ec37\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.HybridBatteryRemaining …","ref":"/leda/docs/vss/vehicle/obd/hybridbatteryremaining/","tags":"","title":"HybridBatteryRemaining"},{"body":" Full qualified VSS Path: Vehicle.Driver.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eDriver Driver--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Driver.Identifier Signal Information The vehicle signal Vehicle.Driver.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Driver.Identifier is 89705397069c5ec58d607318f2ff0ea8\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Driver.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Driver.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Driver.Identifier Description: …","ref":"/leda/docs/vss/vehicle/driver/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus.IgnitionType Description: Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDriveCycleStatus DriveCycleStatus--\u003eIgnitionType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.DriveCycleStatus.IgnitionType [get] OK Vehicle.OBD.DriveCycleStatus.IgnitionType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.DriveCycleStatus.IgnitionType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DriveCycleStatus.IgnitionType Data Type \u0026 Unit Path Vehicle.OBD.DriveCycleStatus.IgnitionType VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['SPARK', 'COMPRESSION'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.OBD.DriveCycleStatus.IgnitionType is a Sensor.\nThe vehicle signal Vehicle.OBD.DriveCycleStatus.IgnitionType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DriveCycleStatus.IgnitionType is 1aeb7b6d025f5a8693104824abaa1c49\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus.IgnitionType …","ref":"/leda/docs/vss/vehicle/obd/drivecyclestatus/ignitiontype/","tags":"","title":"IgnitionType"},{"body":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus.IsMILOn Description: Malfunction Indicator Light (MIL) - False = Off, True = On Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDriveCycleStatus DriveCycleStatus--\u003eIsMILOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.DriveCycleStatus.IsMILOn [get] OK Vehicle.OBD.DriveCycleStatus.IsMILOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.DriveCycleStatus.IsMILOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DriveCycleStatus.IsMILOn Data Type \u0026 Unit Path Vehicle.OBD.DriveCycleStatus.IsMILOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.OBD.DriveCycleStatus.IsMILOn is a Sensor.\nThe vehicle signal Vehicle.OBD.DriveCycleStatus.IsMILOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DriveCycleStatus.IsMILOn is e367394c9a075eef8fd66499e3d9cf14\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DriveCycleStatus.IsMILOn …","ref":"/leda/docs/vss/vehicle/obd/drivecyclestatus/ismilon/","tags":"","title":"IsMILOn"},{"body":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim1 Description: PID 56 (byte A) - Long term secondary O2 trim - Bank 1 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eLongTermO2Trim1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.LongTermO2Trim1 [get] OK Vehicle.OBD.LongTermO2Trim1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.LongTermO2Trim1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.LongTermO2Trim1 Data Type \u0026 Unit Path Vehicle.OBD.LongTermO2Trim1 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.LongTermO2Trim1 is a Sensor.\nThe vehicle signal Vehicle.OBD.LongTermO2Trim1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.LongTermO2Trim1 is 9a9586e29a02567e9920cb9b0aa2e3f5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim1 Description: PID …","ref":"/leda/docs/vss/vehicle/obd/longtermo2trim1/","tags":"","title":"LongTermO2Trim1"},{"body":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim2 Description: PID 58 (byte A) - Long term secondary O2 trim - Bank 2 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eLongTermO2Trim2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.LongTermO2Trim2 [get] OK Vehicle.OBD.LongTermO2Trim2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.LongTermO2Trim2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.LongTermO2Trim2 Data Type \u0026 Unit Path Vehicle.OBD.LongTermO2Trim2 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.LongTermO2Trim2 is a Sensor.\nThe vehicle signal Vehicle.OBD.LongTermO2Trim2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.LongTermO2Trim2 is e579f6c930605b389e8ce2d7edd92999\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim2 Description: PID …","ref":"/leda/docs/vss/vehicle/obd/longtermo2trim2/","tags":"","title":"LongTermO2Trim2"},{"body":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim3 Description: PID 56 (byte B) - Long term secondary O2 trim - Bank 3 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eLongTermO2Trim3 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.LongTermO2Trim3 [get] OK Vehicle.OBD.LongTermO2Trim3: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.LongTermO2Trim3 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.LongTermO2Trim3 Data Type \u0026 Unit Path Vehicle.OBD.LongTermO2Trim3 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.LongTermO2Trim3 is a Sensor.\nThe vehicle signal Vehicle.OBD.LongTermO2Trim3 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.LongTermO2Trim3 is 50ea51ad343a5e59b1d214053e522a45\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim3 Description: PID …","ref":"/leda/docs/vss/vehicle/obd/longtermo2trim3/","tags":"","title":"LongTermO2Trim3"},{"body":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim4 Description: PID 58 (byte B) - Long term secondary O2 trim - Bank 4 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eLongTermO2Trim4 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.LongTermO2Trim4 [get] OK Vehicle.OBD.LongTermO2Trim4: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.LongTermO2Trim4 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.LongTermO2Trim4 Data Type \u0026 Unit Path Vehicle.OBD.LongTermO2Trim4 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.LongTermO2Trim4 is a Sensor.\nThe vehicle signal Vehicle.OBD.LongTermO2Trim4 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.LongTermO2Trim4 is f9c20edd12f456e5ace21581cea484bd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.LongTermO2Trim4 Description: PID …","ref":"/leda/docs/vss/vehicle/obd/longtermo2trim4/","tags":"","title":"LongTermO2Trim4"},{"body":" Full qualified VSS Path: Vehicle.OBD.MaxMAF Description: PID 50 - Maximum flow for mass air flow sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eMaxMAF Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.MaxMAF [get] OK Vehicle.OBD.MaxMAF: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.MaxMAF 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.MaxMAF Data Type \u0026 Unit Path Vehicle.OBD.MaxMAF VSS: Addressing nodes Data type float VSS: Datatypes Unit g/s VSS: Units Label grams per second Description Mass per time measured in grams per second VSS: Sensors \u0026 Actuators Domain mass per time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.MaxMAF is a Sensor.\nThe vehicle signal Vehicle.OBD.MaxMAF is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.MaxMAF is e21826479f715ee7afe8dc485f109b11\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.MaxMAF Description: PID 50 - …","ref":"/leda/docs/vss/vehicle/obd/maxmaf/","tags":"","title":"MaxMAF"},{"body":" Full qualified VSS Path: Vehicle.OBD.OilTemperature Description: PID 5C - Engine oil temperature Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eOilTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.OilTemperature [get] OK Vehicle.OBD.OilTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.OilTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.OilTemperature Data Type \u0026 Unit Path Vehicle.OBD.OilTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.OilTemperature is a Sensor.\nThe vehicle signal Vehicle.OBD.OilTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.OilTemperature is ef3dfc11085d5077b363b1a4e8e4a84e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.OilTemperature Description: PID …","ref":"/leda/docs/vss/vehicle/obd/oiltemperature/","tags":"","title":"OilTemperature"},{"body":" Full qualified VSS Path: Vehicle.OBD.PidsC Description: PID 40 - Bit array of the supported pids 41 to 60 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003ePidsC Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.PidsC [get] OK Vehicle.OBD.PidsC: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.PidsC 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.PidsC Data Type \u0026 Unit Path Vehicle.OBD.PidsC VSS: Addressing nodes Data type uint32 VSS: Datatypes Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.PidsC is a Sensor.\nThe vehicle signal Vehicle.OBD.PidsC is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.PidsC is 7c3a3f0ecc5d593aa996892668afe4b0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.PidsC Description: PID 40 - Bit …","ref":"/leda/docs/vss/vehicle/obd/pidsc/","tags":"","title":"PidsC"},{"body":" Full qualified VSS Path: Vehicle.OBD.RelativeAcceleratorPosition Description: PID 5A - Relative accelerator pedal position Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eRelativeAcceleratorPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.RelativeAcceleratorPosition [get] OK Vehicle.OBD.RelativeAcceleratorPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.RelativeAcceleratorPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.RelativeAcceleratorPosition Data Type \u0026 Unit Path Vehicle.OBD.RelativeAcceleratorPosition VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.RelativeAcceleratorPosition is a Sensor.\nThe vehicle signal Vehicle.OBD.RelativeAcceleratorPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.RelativeAcceleratorPosition is e25de9aacad3549285b4fb234f10be8f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.RelativeAcceleratorPosition …","ref":"/leda/docs/vss/vehicle/obd/relativeacceleratorposition/","tags":"","title":"RelativeAcceleratorPosition"},{"body":" Full qualified VSS Path: Vehicle.OBD.RelativeThrottlePosition Description: PID 45 - Relative throttle position Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eRelativeThrottlePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.RelativeThrottlePosition [get] OK Vehicle.OBD.RelativeThrottlePosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.RelativeThrottlePosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.RelativeThrottlePosition Data Type \u0026 Unit Path Vehicle.OBD.RelativeThrottlePosition VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.RelativeThrottlePosition is a Sensor.\nThe vehicle signal Vehicle.OBD.RelativeThrottlePosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.RelativeThrottlePosition is 54ecf7dd671c5053aac4bc1bb061d64b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.RelativeThrottlePosition …","ref":"/leda/docs/vss/vehicle/obd/relativethrottleposition/","tags":"","title":"RelativeThrottlePosition"},{"body":" Full qualified VSS Path: Vehicle.OBD.RunTimeMIL Description: PID 4D - Run time with MIL on Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eRunTimeMIL Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.RunTimeMIL [get] OK Vehicle.OBD.RunTimeMIL: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.RunTimeMIL 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.RunTimeMIL Data Type \u0026 Unit Path Vehicle.OBD.RunTimeMIL VSS: Addressing nodes Data type float VSS: Datatypes Unit min VSS: Units Label minute Description Time measured in minutes VSS: Sensors \u0026 Actuators Domain time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.RunTimeMIL is a Sensor.\nThe vehicle signal Vehicle.OBD.RunTimeMIL is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.RunTimeMIL is 555604a484535f60adf8894a6bd895b6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.RunTimeMIL Description: PID 4D - …","ref":"/leda/docs/vss/vehicle/obd/runtimemil/","tags":"","title":"RunTimeMIL"},{"body":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim1 Description: PID 55 (byte A) - Short term secondary O2 trim - Bank 1 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eShortTermO2Trim1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ShortTermO2Trim1 [get] OK Vehicle.OBD.ShortTermO2Trim1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ShortTermO2Trim1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ShortTermO2Trim1 Data Type \u0026 Unit Path Vehicle.OBD.ShortTermO2Trim1 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ShortTermO2Trim1 is a Sensor.\nThe vehicle signal Vehicle.OBD.ShortTermO2Trim1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ShortTermO2Trim1 is be7ed33a854557ba802da0c51f9f4564\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim1 Description: …","ref":"/leda/docs/vss/vehicle/obd/shorttermo2trim1/","tags":"","title":"ShortTermO2Trim1"},{"body":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim2 Description: PID 57 (byte A) - Short term secondary O2 trim - Bank 2 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eShortTermO2Trim2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ShortTermO2Trim2 [get] OK Vehicle.OBD.ShortTermO2Trim2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ShortTermO2Trim2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ShortTermO2Trim2 Data Type \u0026 Unit Path Vehicle.OBD.ShortTermO2Trim2 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ShortTermO2Trim2 is a Sensor.\nThe vehicle signal Vehicle.OBD.ShortTermO2Trim2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ShortTermO2Trim2 is c8b962f8990e51d294621408ceaa21d9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim2 Description: …","ref":"/leda/docs/vss/vehicle/obd/shorttermo2trim2/","tags":"","title":"ShortTermO2Trim2"},{"body":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim3 Description: PID 55 (byte B) - Short term secondary O2 trim - Bank 3 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eShortTermO2Trim3 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ShortTermO2Trim3 [get] OK Vehicle.OBD.ShortTermO2Trim3: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ShortTermO2Trim3 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ShortTermO2Trim3 Data Type \u0026 Unit Path Vehicle.OBD.ShortTermO2Trim3 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ShortTermO2Trim3 is a Sensor.\nThe vehicle signal Vehicle.OBD.ShortTermO2Trim3 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ShortTermO2Trim3 is af58212df970568b9edcc5e58fa36f8d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim3 Description: …","ref":"/leda/docs/vss/vehicle/obd/shorttermo2trim3/","tags":"","title":"ShortTermO2Trim3"},{"body":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim4 Description: PID 57 (byte B) - Short term secondary O2 trim - Bank 4 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eShortTermO2Trim4 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ShortTermO2Trim4 [get] OK Vehicle.OBD.ShortTermO2Trim4: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ShortTermO2Trim4 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ShortTermO2Trim4 Data Type \u0026 Unit Path Vehicle.OBD.ShortTermO2Trim4 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ShortTermO2Trim4 is a Sensor.\nThe vehicle signal Vehicle.OBD.ShortTermO2Trim4 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ShortTermO2Trim4 is 8ef0516c0c965fd6aecbacd6b9120a5b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ShortTermO2Trim4 Description: …","ref":"/leda/docs/vss/vehicle/obd/shorttermo2trim4/","tags":"","title":"ShortTermO2Trim4"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank2.Temperature2 Description: PID 3F - Catalyst temperature from bank 2, sensor 2 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Catalyst--\u003eBank2 Bank2--\u003eTemperature2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Catalyst.Bank2.Temperature2 [get] OK Vehicle.OBD.Catalyst.Bank2.Temperature2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Catalyst.Bank2.Temperature2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst.Bank2.Temperature2 Data Type \u0026 Unit Path Vehicle.OBD.Catalyst.Bank2.Temperature2 VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.Catalyst.Bank2.Temperature2 is a Sensor.\nThe vehicle signal Vehicle.OBD.Catalyst.Bank2.Temperature2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst.Bank2.Temperature2 is f60c68f0ebca5fcf97086ce04e16d661\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank2.Temperature2 …","ref":"/leda/docs/vss/vehicle/obd/catalyst/bank2/temperature2/","tags":"","title":"Temperature2"},{"body":" Full qualified VSS Path: Vehicle.OBD.ThrottleActuator Description: PID 4C - Commanded throttle actuator Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eThrottleActuator Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ThrottleActuator [get] OK Vehicle.OBD.ThrottleActuator: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ThrottleActuator 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ThrottleActuator Data Type \u0026 Unit Path Vehicle.OBD.ThrottleActuator VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ThrottleActuator is a Sensor.\nThe vehicle signal Vehicle.OBD.ThrottleActuator is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ThrottleActuator is 49a19905a1005ee3abe0c0a84d7112d1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ThrottleActuator Description: …","ref":"/leda/docs/vss/vehicle/obd/throttleactuator/","tags":"","title":"ThrottleActuator"},{"body":" Full qualified VSS Path: Vehicle.OBD.ThrottlePositionB Description: PID 47 - Absolute throttle position B Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eThrottlePositionB Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ThrottlePositionB [get] OK Vehicle.OBD.ThrottlePositionB: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ThrottlePositionB 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ThrottlePositionB Data Type \u0026 Unit Path Vehicle.OBD.ThrottlePositionB VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ThrottlePositionB is a Sensor.\nThe vehicle signal Vehicle.OBD.ThrottlePositionB is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ThrottlePositionB is 701712a565ed5bf8b6630487a7152c87\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ThrottlePositionB Description: …","ref":"/leda/docs/vss/vehicle/obd/throttlepositionb/","tags":"","title":"ThrottlePositionB"},{"body":" Full qualified VSS Path: Vehicle.OBD.ThrottlePositionC Description: PID 48 - Absolute throttle position C Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eThrottlePositionC Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ThrottlePositionC [get] OK Vehicle.OBD.ThrottlePositionC: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ThrottlePositionC 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ThrottlePositionC Data Type \u0026 Unit Path Vehicle.OBD.ThrottlePositionC VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ThrottlePositionC is a Sensor.\nThe vehicle signal Vehicle.OBD.ThrottlePositionC is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ThrottlePositionC is 06f162dc00a85f628f9d5d1bc952665c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ThrottlePositionC Description: …","ref":"/leda/docs/vss/vehicle/obd/throttlepositionc/","tags":"","title":"ThrottlePositionC"},{"body":" Full qualified VSS Path: Vehicle.OBD.TimeSinceDTCCleared Description: PID 4E - Time since trouble codes cleared Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eTimeSinceDTCCleared Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.TimeSinceDTCCleared [get] OK Vehicle.OBD.TimeSinceDTCCleared: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.TimeSinceDTCCleared 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.TimeSinceDTCCleared Data Type \u0026 Unit Path Vehicle.OBD.TimeSinceDTCCleared VSS: Addressing nodes Data type float VSS: Datatypes Unit min VSS: Units Label minute Description Time measured in minutes VSS: Sensors \u0026 Actuators Domain time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.TimeSinceDTCCleared is a Sensor.\nThe vehicle signal Vehicle.OBD.TimeSinceDTCCleared is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.TimeSinceDTCCleared is 66ea3984a2585dcdaaf6452eef835c0d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.TimeSinceDTCCleared Description: …","ref":"/leda/docs/vss/vehicle/obd/timesincedtccleared/","tags":"","title":"TimeSinceDTCCleared"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank1 Description: Catalyst bank 1 signals Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Catalyst--\u003eBank1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst.Bank1 Signal Information The vehicle signal Vehicle.OBD.Catalyst.Bank1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst.Bank1 is 0c3aaf014ba95b938b639d4202ef8b25\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.Catalyst.Bank1.Temperature1 (PID 3C - Catalyst temperature from bank 1, sensor 1) Vehicle.OBD.Catalyst.Bank1.Temperature2 (PID 3E - Catalyst temperature from bank 1, sensor 2) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank1 Description: …","ref":"/leda/docs/vss/vehicle/obd/catalyst/bank1/","tags":"","title":"Bank1"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank2 Description: Catalyst bank 2 signals Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Catalyst--\u003eBank2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst.Bank2 Signal Information The vehicle signal Vehicle.OBD.Catalyst.Bank2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst.Bank2 is 9a20459754755146a3b9608bf6384835\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.Catalyst.Bank2.Temperature1 (PID 3D - Catalyst temperature from bank 2, sensor 1) Vehicle.OBD.Catalyst.Bank2.Temperature2 (PID 3F - Catalyst temperature from bank 2, sensor 2) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank2 Description: …","ref":"/leda/docs/vss/vehicle/obd/catalyst/bank2/","tags":"","title":"Bank2"},{"body":" Full qualified VSS Path: Vehicle.OBD.BarometricPressure Description: PID 33 - Barometric pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eBarometricPressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.BarometricPressure [get] OK Vehicle.OBD.BarometricPressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.BarometricPressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.BarometricPressure Data Type \u0026 Unit Path Vehicle.OBD.BarometricPressure VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.BarometricPressure is a Sensor.\nThe vehicle signal Vehicle.OBD.BarometricPressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.BarometricPressure is 1966bfff4d235767bfd9a21afb445ac7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.BarometricPressure Description: …","ref":"/leda/docs/vss/vehicle/obd/barometricpressure/","tags":"","title":"BarometricPressure"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst Description: Catalyst signals Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst Signal Information The vehicle signal Vehicle.OBD.Catalyst is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst is 4eb0b191d6445de081f3f3f759af31c2\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.Catalyst.Bank1 (Catalyst bank 1 signals) Vehicle.OBD.Catalyst.Bank2 (Catalyst bank 2 signals) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst Description: Catalyst …","ref":"/leda/docs/vss/vehicle/obd/catalyst/","tags":"","title":"Catalyst"},{"body":" Full qualified VSS Path: Vehicle.OBD.CommandedEGR Description: PID 2C - Commanded exhaust gas recirculation (EGR) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCommandedEGR Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.CommandedEGR [get] OK Vehicle.OBD.CommandedEGR: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.CommandedEGR 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.CommandedEGR Data Type \u0026 Unit Path Vehicle.OBD.CommandedEGR VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.CommandedEGR is a Sensor.\nThe vehicle signal Vehicle.OBD.CommandedEGR is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.CommandedEGR is 0265890a4a695ee6952c9b9f565ddaa5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.CommandedEGR Description: PID 2C …","ref":"/leda/docs/vss/vehicle/obd/commandedegr/","tags":"","title":"CommandedEGR"},{"body":" Full qualified VSS Path: Vehicle.OBD.CommandedEVAP Description: PID 2E - Commanded evaporative purge (EVAP) valve Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCommandedEVAP Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.CommandedEVAP [get] OK Vehicle.OBD.CommandedEVAP: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.CommandedEVAP 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.CommandedEVAP Data Type \u0026 Unit Path Vehicle.OBD.CommandedEVAP VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.CommandedEVAP is a Sensor.\nThe vehicle signal Vehicle.OBD.CommandedEVAP is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.CommandedEVAP is 5e6295d04a9159b88f4698b561b86842\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.CommandedEVAP Description: PID …","ref":"/leda/docs/vss/vehicle/obd/commandedevap/","tags":"","title":"CommandedEVAP"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor3 Sensor3--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor3.Current [get] OK Vehicle.OBD.O2WR.Sensor3.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor3.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor3.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor3.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor3.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor3.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor3.Current is c942468e349e5aaebde4d90ee0bc3814\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor3/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor4 Sensor4--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor4.Current [get] OK Vehicle.OBD.O2WR.Sensor4.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor4.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor4.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor4.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor4.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor4.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor4.Current is f16b31fde63a516db04cb44feaa7c27b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor4/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor5 Sensor5--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor5.Current [get] OK Vehicle.OBD.O2WR.Sensor5.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor5.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor5.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor5.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor5.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor5.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor5.Current is 40494cb5826554929f5ecadd5b9173fd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor5/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor6 Sensor6--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor6.Current [get] OK Vehicle.OBD.O2WR.Sensor6.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor6.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor6.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor6.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor6.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor6.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor6.Current is 06a38b6b4784545bb637279e96d48eb5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor6/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor7 Sensor7--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor7.Current [get] OK Vehicle.OBD.O2WR.Sensor7.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor7.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor7.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor7.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor7.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor7.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor7.Current is 6ed46315325d540eb95c86ec61eef8e4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor7/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor8 Sensor8--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor8.Current [get] OK Vehicle.OBD.O2WR.Sensor8.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor8.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor8.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor8.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor8.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor8.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor8.Current is 96de3c3b036c50c2978ab2aa490d4d9e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor8/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.DistanceSinceDTCClear Description: PID 31 - Distance traveled since codes cleared Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDistanceSinceDTCClear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.DistanceSinceDTCClear [get] OK Vehicle.OBD.DistanceSinceDTCClear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.DistanceSinceDTCClear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DistanceSinceDTCClear Data Type \u0026 Unit Path Vehicle.OBD.DistanceSinceDTCClear VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.DistanceSinceDTCClear is a Sensor.\nThe vehicle signal Vehicle.OBD.DistanceSinceDTCClear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DistanceSinceDTCClear is 0da628e2c69d561eb86216ddcb6e7b2a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DistanceSinceDTCClear …","ref":"/leda/docs/vss/vehicle/obd/distancesincedtcclear/","tags":"","title":"DistanceSinceDTCClear"},{"body":" Full qualified VSS Path: Vehicle.OBD.EGRError Description: PID 2D - Exhaust gas recirculation (EGR) error Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEGRError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EGRError [get] OK Vehicle.OBD.EGRError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EGRError 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EGRError Data Type \u0026 Unit Path Vehicle.OBD.EGRError VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EGRError is a Sensor.\nThe vehicle signal Vehicle.OBD.EGRError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EGRError is 80a7000c5c7b5444b5571a26264061e5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EGRError Description: PID 2D - …","ref":"/leda/docs/vss/vehicle/obd/egrerror/","tags":"","title":"EGRError"},{"body":" Full qualified VSS Path: Vehicle.OBD.EVAPVaporPressure Description: PID 32 - Evaporative purge (EVAP) system pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEVAPVaporPressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EVAPVaporPressure [get] OK Vehicle.OBD.EVAPVaporPressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EVAPVaporPressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EVAPVaporPressure Data Type \u0026 Unit Path Vehicle.OBD.EVAPVaporPressure VSS: Addressing nodes Data type float VSS: Datatypes Unit Pa VSS: Units Label pascal Description Pressure measured in pascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EVAPVaporPressure is a Sensor.\nThe vehicle signal Vehicle.OBD.EVAPVaporPressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EVAPVaporPressure is 70b5dae2ffd0561eab73efed8ad2f0ad\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EVAPVaporPressure Description: …","ref":"/leda/docs/vss/vehicle/obd/evapvaporpressure/","tags":"","title":"EVAPVaporPressure"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelLevel Description: PID 2F - Fuel level in the fuel tank Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelLevel [get] OK Vehicle.OBD.FuelLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelLevel Data Type \u0026 Unit Path Vehicle.OBD.FuelLevel VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelLevel is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelLevel is fd39813424ee5cd08c44714b35697287\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelLevel Description: PID 2F - …","ref":"/leda/docs/vss/vehicle/obd/fuellevel/","tags":"","title":"FuelLevel"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor4 Sensor4--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor4.Lambda [get] OK Vehicle.OBD.O2WR.Sensor4.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor4.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor4.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor4.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor4.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor4.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor4.Lambda is be09013f423c588eae9c06da9ddf290f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor4/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor5 Sensor5--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor5.Lambda [get] OK Vehicle.OBD.O2WR.Sensor5.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor5.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor5.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor5.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor5.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor5.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor5.Lambda is 16a957200f5c51f89824bbb76a23b9c0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor5/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor6 Sensor6--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor6.Lambda [get] OK Vehicle.OBD.O2WR.Sensor6.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor6.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor6.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor6.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor6.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor6.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor6.Lambda is fdae9bb9a3a45b4680450f0347cf6d66\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor6/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor7 Sensor7--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor7.Lambda [get] OK Vehicle.OBD.O2WR.Sensor7.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor7.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor7.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor7.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor7.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor7.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor7.Lambda is 9221a5289157538b9dcaa0d961c335fa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor7/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor8 Sensor8--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor8.Lambda [get] OK Vehicle.OBD.O2WR.Sensor8.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor8.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor8.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor8.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor8.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor8.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor8.Lambda is c56db1195fa3519ab6718ab57d2cd543\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor8/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor4 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor4 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor4 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor4 is bb67047ddad158ba98876a6a87d02e97\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor4.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor4.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor4.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor4/","tags":"","title":"Sensor4"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor5 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor5 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor5 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor5 is 01c4160d39af5db59c66db844646195e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor5.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor5.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor5.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor5/","tags":"","title":"Sensor5"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor6 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor6 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor6 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor6 is cff12c30bde957798daaa3a91758b48b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor6.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor6.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor6.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor6/","tags":"","title":"Sensor6"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor7 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor7 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor7 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor7 is 44459df1f25f5d43a07b00f2bad65ef5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor7.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor7.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor7.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor7/","tags":"","title":"Sensor7"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor8 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor8 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor8 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor8 is b8865e72055d52a086f6935d5c188cc1\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor8.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor8.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor8.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor8/","tags":"","title":"Sensor8"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank1.Temperature1 Description: PID 3C - Catalyst temperature from bank 1, sensor 1 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Catalyst--\u003eBank1 Bank1--\u003eTemperature1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Catalyst.Bank1.Temperature1 [get] OK Vehicle.OBD.Catalyst.Bank1.Temperature1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Catalyst.Bank1.Temperature1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst.Bank1.Temperature1 Data Type \u0026 Unit Path Vehicle.OBD.Catalyst.Bank1.Temperature1 VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.Catalyst.Bank1.Temperature1 is a Sensor.\nThe vehicle signal Vehicle.OBD.Catalyst.Bank1.Temperature1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst.Bank1.Temperature1 is 5a770f13939e5d069682d408f160a895\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank1.Temperature1 …","ref":"/leda/docs/vss/vehicle/obd/catalyst/bank1/temperature1/","tags":"","title":"Temperature1"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank2.Temperature1 Description: PID 3D - Catalyst temperature from bank 2, sensor 1 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Catalyst--\u003eBank2 Bank2--\u003eTemperature1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Catalyst.Bank2.Temperature1 [get] OK Vehicle.OBD.Catalyst.Bank2.Temperature1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Catalyst.Bank2.Temperature1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst.Bank2.Temperature1 Data Type \u0026 Unit Path Vehicle.OBD.Catalyst.Bank2.Temperature1 VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.Catalyst.Bank2.Temperature1 is a Sensor.\nThe vehicle signal Vehicle.OBD.Catalyst.Bank2.Temperature1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst.Bank2.Temperature1 is 011658e4ee89502c9a33877c92dbf888\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank2.Temperature1 …","ref":"/leda/docs/vss/vehicle/obd/catalyst/bank2/temperature1/","tags":"","title":"Temperature1"},{"body":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank1.Temperature2 Description: PID 3E - Catalyst temperature from bank 1, sensor 2 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCatalyst Catalyst--\u003eBank1 Bank1--\u003eTemperature2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Catalyst.Bank1.Temperature2 [get] OK Vehicle.OBD.Catalyst.Bank1.Temperature2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Catalyst.Bank1.Temperature2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Catalyst.Bank1.Temperature2 Data Type \u0026 Unit Path Vehicle.OBD.Catalyst.Bank1.Temperature2 VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.Catalyst.Bank1.Temperature2 is a Sensor.\nThe vehicle signal Vehicle.OBD.Catalyst.Bank1.Temperature2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Catalyst.Bank1.Temperature2 is ca9419a5d23b5937af23b51d823722fa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Catalyst.Bank1.Temperature2 …","ref":"/leda/docs/vss/vehicle/obd/catalyst/bank1/temperature2/","tags":"","title":"Temperature2"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor4 Sensor4--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor4.Voltage [get] OK Vehicle.OBD.O2WR.Sensor4.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor4.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor4.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor4.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor4.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor4.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor4.Voltage is abeca90ba22d5c32a34ee907cedf3192\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor4.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor4/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor5 Sensor5--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor5.Voltage [get] OK Vehicle.OBD.O2WR.Sensor5.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor5.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor5.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor5.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor5.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor5.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor5.Voltage is 699c4db2439f51af8465e823687018b8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor5.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor5/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor6 Sensor6--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor6.Voltage [get] OK Vehicle.OBD.O2WR.Sensor6.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor6.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor6.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor6.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor6.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor6.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor6.Voltage is 304c181c76d55c3abe75382a935c7bde\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor6.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor6/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor7 Sensor7--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor7.Voltage [get] OK Vehicle.OBD.O2WR.Sensor7.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor7.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor7.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor7.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor7.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor7.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor7.Voltage is 0ad1d79dcce65c00ac48421b5b54ca0e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor7.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor7/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor8 Sensor8--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor8.Voltage [get] OK Vehicle.OBD.O2WR.Sensor8.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor8.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor8.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor8.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor8.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor8.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor8.Voltage is ab7d6c739f025782bba640e58123f0c8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor8.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor8/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.WarmupsSinceDTCClear Description: PID 30 - Number of warm-ups since codes cleared Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eWarmupsSinceDTCClear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.WarmupsSinceDTCClear [get] OK Vehicle.OBD.WarmupsSinceDTCClear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.WarmupsSinceDTCClear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.WarmupsSinceDTCClear Data Type \u0026 Unit Path Vehicle.OBD.WarmupsSinceDTCClear VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.WarmupsSinceDTCClear is a Sensor.\nThe vehicle signal Vehicle.OBD.WarmupsSinceDTCClear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.WarmupsSinceDTCClear is a63ba60721785fc591e3dd067c4dc2ae\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.WarmupsSinceDTCClear …","ref":"/leda/docs/vss/vehicle/obd/warmupssincedtcclear/","tags":"","title":"WarmupsSinceDTCClear"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor1 Sensor1--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor1.Current [get] OK Vehicle.OBD.O2WR.Sensor1.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor1.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor1.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor1.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor1.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor1.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor1.Current is bb4c70d9d2ae56c8a9a3be446db6f54c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor1/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2.Current Description: PID 3x (byte CD) - Current for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor2 Sensor2--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor2.Current [get] OK Vehicle.OBD.O2WR.Sensor2.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor2.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor2.Current Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor2.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor2.Current is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor2.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor2.Current is 442ab33180ca5028a37a487056ba4a51\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2.Current …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor2/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.OBD.DistanceWithMIL Description: PID 21 - Distance traveled with MIL on Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDistanceWithMIL Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.DistanceWithMIL [get] OK Vehicle.OBD.DistanceWithMIL: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.DistanceWithMIL 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DistanceWithMIL Data Type \u0026 Unit Path Vehicle.OBD.DistanceWithMIL VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.DistanceWithMIL is a Sensor.\nThe vehicle signal Vehicle.OBD.DistanceWithMIL is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DistanceWithMIL is a9a522e343f25522b08f11e81bb91349\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DistanceWithMIL Description: PID …","ref":"/leda/docs/vss/vehicle/obd/distancewithmil/","tags":"","title":"DistanceWithMIL"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelRailPressureDirect Description: PID 23 - Fuel rail pressure direct inject Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelRailPressureDirect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelRailPressureDirect [get] OK Vehicle.OBD.FuelRailPressureDirect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelRailPressureDirect 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelRailPressureDirect Data Type \u0026 Unit Path Vehicle.OBD.FuelRailPressureDirect VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelRailPressureDirect is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelRailPressureDirect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelRailPressureDirect is 039cb7bf1a8356a98d09eaf4fc029fe9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelRailPressureDirect …","ref":"/leda/docs/vss/vehicle/obd/fuelrailpressuredirect/","tags":"","title":"FuelRailPressureDirect"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelRailPressureVac Description: PID 22 - Fuel rail pressure relative to vacuum Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelRailPressureVac Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelRailPressureVac [get] OK Vehicle.OBD.FuelRailPressureVac: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelRailPressureVac 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelRailPressureVac Data Type \u0026 Unit Path Vehicle.OBD.FuelRailPressureVac VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelRailPressureVac is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelRailPressureVac is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelRailPressureVac is b3b0adf44aa3572fa07e7434993e6458\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelRailPressureVac Description: …","ref":"/leda/docs/vss/vehicle/obd/fuelrailpressurevac/","tags":"","title":"FuelRailPressureVac"},{"body":" Full qualified VSS Path: Vehicle.OBD.IsPTOActive Description: PID 1E - Auxiliary input status (power take off) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eIsPTOActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.IsPTOActive [get] OK Vehicle.OBD.IsPTOActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.IsPTOActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.IsPTOActive Data Type \u0026 Unit Path Vehicle.OBD.IsPTOActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.OBD.IsPTOActive is a Sensor.\nThe vehicle signal Vehicle.OBD.IsPTOActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.IsPTOActive is ce291dc40bba5a969e57b17f11ae23a9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.IsPTOActive Description: PID 1E …","ref":"/leda/docs/vss/vehicle/obd/isptoactive/","tags":"","title":"IsPTOActive"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor1 Sensor1--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor1.Lambda [get] OK Vehicle.OBD.O2WR.Sensor1.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor1.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor1.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor1.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor1.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor1.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor1.Lambda is b809083454a5516f995477c59bf4d3c6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor1/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor2 Sensor2--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor2.Lambda [get] OK Vehicle.OBD.O2WR.Sensor2.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor2.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor2.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor2.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor2.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor2.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor2.Lambda is ce55aed0e8705a49970566db71ebcf90\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor2/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3.Lambda Description: PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor3 Sensor3--\u003eLambda Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor3.Lambda [get] OK Vehicle.OBD.O2WR.Sensor3.Lambda: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor3.Lambda 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor3.Lambda Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor3.Lambda VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor3.Lambda is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor3.Lambda is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor3.Lambda is f2ae7c781b0a5dcf8db91558e3cf4c13\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3.Lambda Description: …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor3/lambda/","tags":"","title":"Lambda"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR Signal Information The vehicle signal Vehicle.OBD.O2WR is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR is a439f2bc16575318afe20d0bc6a8cacf\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor1 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor2 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor3 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor4 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor5 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor6 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor7 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.O2WR.Sensor8 (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/","tags":"","title":"O2WR"},{"body":" Full qualified VSS Path: Vehicle.OBD.OBDStandards Description: PID 1C - OBD standards this vehicle conforms to Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eOBDStandards Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.OBDStandards [get] OK Vehicle.OBD.OBDStandards: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.OBDStandards 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.OBDStandards Data Type \u0026 Unit Path Vehicle.OBD.OBDStandards VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.OBDStandards is an Attribute.\nThe vehicle signal Vehicle.OBD.OBDStandards is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.OBDStandards is 1aa8d7d055cf5a29a31b04a12124f673\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.OBDStandards Description: PID 1C …","ref":"/leda/docs/vss/vehicle/obd/obdstandards/","tags":"","title":"OBDStandards"},{"body":" Full qualified VSS Path: Vehicle.OBD.OxygenSensorsIn4Banks Description: PID 1D - Presence of oxygen sensors in 4 banks. Similar to PID 13, but [A0..A7] == [B1S1, B1S2, B2S1, B2S2, B3S1, B3S2, B4S1, B4S2] Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eOxygenSensorsIn4Banks Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.OxygenSensorsIn4Banks [get] OK Vehicle.OBD.OxygenSensorsIn4Banks: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.OxygenSensorsIn4Banks 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.OxygenSensorsIn4Banks Data Type \u0026 Unit Path Vehicle.OBD.OxygenSensorsIn4Banks VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.OxygenSensorsIn4Banks is a Sensor.\nThe vehicle signal Vehicle.OBD.OxygenSensorsIn4Banks is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.OxygenSensorsIn4Banks is 41d3377813d651aa9b9344ba9fd2f880\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.OxygenSensorsIn4Banks …","ref":"/leda/docs/vss/vehicle/obd/oxygensensorsin4banks/","tags":"","title":"OxygenSensorsIn4Banks"},{"body":" Full qualified VSS Path: Vehicle.OBD.PidsB Description: PID 20 - Bit array of the supported pids 21 to 40 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003ePidsB Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.PidsB [get] OK Vehicle.OBD.PidsB: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.PidsB 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.PidsB Data Type \u0026 Unit Path Vehicle.OBD.PidsB VSS: Addressing nodes Data type uint32 VSS: Datatypes Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.PidsB is a Sensor.\nThe vehicle signal Vehicle.OBD.PidsB is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.PidsB is 00193c560a0a5525baa45681e07b50f6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.PidsB Description: PID 20 - Bit …","ref":"/leda/docs/vss/vehicle/obd/pidsb/","tags":"","title":"PidsB"},{"body":" Full qualified VSS Path: Vehicle.OBD.RunTime Description: PID 1F - Engine run time Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eRunTime Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.RunTime [get] OK Vehicle.OBD.RunTime: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.RunTime 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.RunTime Data Type \u0026 Unit Path Vehicle.OBD.RunTime VSS: Addressing nodes Data type float VSS: Datatypes Unit s VSS: Units Label second Description Time measured in seconds VSS: Sensors \u0026 Actuators Domain time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.RunTime is a Sensor.\nThe vehicle signal Vehicle.OBD.RunTime is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.RunTime is acf70773752256d1a227ab48257624b5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.RunTime Description: PID 1F - …","ref":"/leda/docs/vss/vehicle/obd/runtime/","tags":"","title":"RunTime"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor1 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor1 is 496074cec04a5260b60fd39bb7ed1479\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor1.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor1.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor1.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor1/","tags":"","title":"Sensor1"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor2 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor2 is 079f9960f75d5f399df7ff86fcea8f0c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor2.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor2.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor2.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor2/","tags":"","title":"Sensor2"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3 Description: Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor3 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor3 Signal Information The vehicle signal Vehicle.OBD.O2WR.Sensor3 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor3 is a8a83d3e33f9584b824088e830bcbaec\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2WR.Sensor3.Current (PID 3x (byte CD) - Current for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor3.Lambda (PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor) Vehicle.OBD.O2WR.Sensor3.Voltage (PID 2x (byte CD) - Voltage for wide range/band oxygen sensor) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3 Description: Wide …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor3/","tags":"","title":"Sensor3"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor4 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor4 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor4 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor4 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor4 is 853945bce86c5c4f95081075ae32261c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor4.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor4.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor4 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor4/","tags":"","title":"Sensor4"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor5 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor5 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor5 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor5 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor5 is f48c76c9c7ec5ddcb6838ced0bd7517b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor5.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor5.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor5 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor5/","tags":"","title":"Sensor5"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor6 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor6 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor6 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor6 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor6 is 5269c1877ded507b87d7d1d7bec10605\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor6.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor6.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor6 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor6/","tags":"","title":"Sensor6"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor7 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor7 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor7 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor7 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor7 is 4b565102e4a052aa8aa64f27dc678ce3\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor7.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor7.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor7 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor7/","tags":"","title":"Sensor7"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor8 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor8 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor8 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor8 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor8 is d5eef24c35f1561982127404b50ece11\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor8.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor8.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor8 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor8/","tags":"","title":"Sensor8"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor4 Sensor4--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim is b71dcf9d850c5d5686f14ad46cd2cae3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor4.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor4/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor5 Sensor5--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim is 7604de26198b51e28a441f79b1d84242\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor5.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor5/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor6 Sensor6--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim is 2fb034769cab5089986d90bf7f9000ca\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor6.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor6/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor7 Sensor7--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim is 81f34b16b5e05d1ab159de9474eaf5bc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor7.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor7/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor8 Sensor8--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim is 1699eb2267615e258259e480be0fa606\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor8.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor8/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor4.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor4 Sensor4--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor4.Voltage [get] OK Vehicle.OBD.O2.Sensor4.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor4.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor4.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor4.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor4.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor4.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor4.Voltage is 772cbfab91be59f7bbf3ec4140ffbcc4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor4.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor4/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor5.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor5 Sensor5--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor5.Voltage [get] OK Vehicle.OBD.O2.Sensor5.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor5.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor5.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor5.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor5.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor5.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor5.Voltage is 155a0816093b5aee8012ed2a8d532b7f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor5.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor5/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor6.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor6 Sensor6--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor6.Voltage [get] OK Vehicle.OBD.O2.Sensor6.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor6.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor6.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor6.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor6.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor6.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor6.Voltage is 85430592fb795e848d7bb91e6b9f1e00\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor6.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor6/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor7.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor7 Sensor7--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor7.Voltage [get] OK Vehicle.OBD.O2.Sensor7.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor7.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor7.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor7.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor7.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor7.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor7.Voltage is 23984a68e63f532bab18679e1174130d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor7.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor7/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor8.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor8 Sensor8--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor8.Voltage [get] OK Vehicle.OBD.O2.Sensor8.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor8.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor8.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor8.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor8.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor8.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor8.Voltage is 23e057b3629a5136bb585638725fe0a2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor8.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor8/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor1 Sensor1--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor1.Voltage [get] OK Vehicle.OBD.O2WR.Sensor1.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor1.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor1.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor1.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor1.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor1.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor1.Voltage is 396251cbfa5a57ffb1dd743298dfcdf9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor1.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor1/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor2 Sensor2--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor2.Voltage [get] OK Vehicle.OBD.O2WR.Sensor2.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor2.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor2.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor2.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor2.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor2.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor2.Voltage is a784675c3b765d42ad023d8ee412be26\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor2.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor2/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3.Voltage Description: PID 2x (byte CD) - Voltage for wide range/band oxygen sensor Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2WR O2WR--\u003eSensor3 Sensor3--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2WR.Sensor3.Voltage [get] OK Vehicle.OBD.O2WR.Sensor3.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2WR.Sensor3.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2WR.Sensor3.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2WR.Sensor3.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2WR.Sensor3.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2WR.Sensor3.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2WR.Sensor3.Voltage is a78f7621a3f75df2adc1dc940219834a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2WR.Sensor3.Voltage …","ref":"/leda/docs/vss/vehicle/obd/o2wr/sensor3/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.AirStatus Description: PID 12 - Secondary air status Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eAirStatus Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.AirStatus [get] OK Vehicle.OBD.AirStatus: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.AirStatus Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.AirStatus Data Type \u0026 Unit Path Vehicle.OBD.AirStatus VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.OBD.AirStatus is a Sensor.\nThe vehicle signal Vehicle.OBD.AirStatus is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.AirStatus is 548f65bf59ed505a86dfaa1c33342e4d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.AirStatus Description: PID 12 - …","ref":"/leda/docs/vss/vehicle/obd/airstatus/","tags":"","title":"AirStatus"},{"body":" Full qualified VSS Path: Vehicle.OBD.CoolantTemperature Description: PID 05 - Coolant temperature Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eCoolantTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.CoolantTemperature [get] OK Vehicle.OBD.CoolantTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.CoolantTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.CoolantTemperature Data Type \u0026 Unit Path Vehicle.OBD.CoolantTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.CoolantTemperature is a Sensor.\nThe vehicle signal Vehicle.OBD.CoolantTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.CoolantTemperature is 824892cdc72d5f92a38ef3136576edc8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.CoolantTemperature Description: …","ref":"/leda/docs/vss/vehicle/obd/coolanttemperature/","tags":"","title":"CoolantTemperature"},{"body":" Full qualified VSS Path: Vehicle.OBD.Status.DTCCount Description: Number of sensor Trouble Codes (DTC) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eStatus Status--\u003eDTCCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Status.DTCCount [get] OK Vehicle.OBD.Status.DTCCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Status.DTCCount 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Status.DTCCount Data Type \u0026 Unit Path Vehicle.OBD.Status.DTCCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.Status.DTCCount is a Sensor.\nThe vehicle signal Vehicle.OBD.Status.DTCCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Status.DTCCount is 4afdf65e788c5f69baf682597e69fb67\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Status.DTCCount Description: …","ref":"/leda/docs/vss/vehicle/obd/status/dtccount/","tags":"","title":"DTCCount"},{"body":" Full qualified VSS Path: Vehicle.OBD.DTCList Description: List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eDTCList Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.DTCList [get] OK Vehicle.OBD.DTCList: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.DTCList 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.DTCList Data Type \u0026 Unit Path Vehicle.OBD.DTCList VSS: Addressing nodes Data type string[] VSS: Datatypes Signal Information The vehicle signal Vehicle.OBD.DTCList is a Sensor.\nThe vehicle signal Vehicle.OBD.DTCList is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.DTCList is eee1b64e69845d5ab5e793b74631f9dc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.DTCList Description: List of …","ref":"/leda/docs/vss/vehicle/obd/dtclist/","tags":"","title":"DTCList"},{"body":" Full qualified VSS Path: Vehicle.OBD.EngineLoad Description: PID 04 - Engine load in percent - 0 = no load, 100 = full load Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEngineLoad Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EngineLoad [get] OK Vehicle.OBD.EngineLoad: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EngineLoad 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EngineLoad Data Type \u0026 Unit Path Vehicle.OBD.EngineLoad VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EngineLoad is a Sensor.\nThe vehicle signal Vehicle.OBD.EngineLoad is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EngineLoad is a8fda8a1b4c6534aa49c447bafc1c700\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EngineLoad Description: PID 04 - …","ref":"/leda/docs/vss/vehicle/obd/engineload/","tags":"","title":"EngineLoad"},{"body":" Full qualified VSS Path: Vehicle.OBD.EngineSpeed Description: PID 0C - Engine speed measured as rotations per minute Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eEngineSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.EngineSpeed [get] OK Vehicle.OBD.EngineSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.EngineSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.EngineSpeed Data Type \u0026 Unit Path Vehicle.OBD.EngineSpeed VSS: Addressing nodes Data type float VSS: Datatypes Unit rpm VSS: Units Label revolutions per minute Description Rotational speed measured in revolutions per minute VSS: Sensors \u0026 Actuators Domain rotational speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.EngineSpeed is a Sensor.\nThe vehicle signal Vehicle.OBD.EngineSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.EngineSpeed is b682eea93b3e5874ab3b52e95a1fad37\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.EngineSpeed Description: PID 0C …","ref":"/leda/docs/vss/vehicle/obd/enginespeed/","tags":"","title":"EngineSpeed"},{"body":" Full qualified VSS Path: Vehicle.OBD.FreezeDTC Description: PID 02 - DTC that triggered the freeze frame Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFreezeDTC Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FreezeDTC [get] OK Vehicle.OBD.FreezeDTC: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FreezeDTC Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FreezeDTC Data Type \u0026 Unit Path Vehicle.OBD.FreezeDTC VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.OBD.FreezeDTC is a Sensor.\nThe vehicle signal Vehicle.OBD.FreezeDTC is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FreezeDTC is 5b87fae8dda4522aae209ae528960782\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FreezeDTC Description: PID 02 - …","ref":"/leda/docs/vss/vehicle/obd/freezedtc/","tags":"","title":"FreezeDTC"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelPressure Description: PID 0A - Fuel pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelPressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelPressure [get] OK Vehicle.OBD.FuelPressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelPressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelPressure Data Type \u0026 Unit Path Vehicle.OBD.FuelPressure VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.FuelPressure is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelPressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelPressure is 34e6b0689f025d7b9bfa1fc49bb30c0f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelPressure Description: PID 0A …","ref":"/leda/docs/vss/vehicle/obd/fuelpressure/","tags":"","title":"FuelPressure"},{"body":" Full qualified VSS Path: Vehicle.OBD.FuelStatus Description: PID 03 - Fuel status Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eFuelStatus Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.FuelStatus [get] OK Vehicle.OBD.FuelStatus: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.FuelStatus Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.FuelStatus Data Type \u0026 Unit Path Vehicle.OBD.FuelStatus VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.OBD.FuelStatus is a Sensor.\nThe vehicle signal Vehicle.OBD.FuelStatus is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.FuelStatus is 15fa2f3f667a5f5786eda5c83435ef16\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.FuelStatus Description: PID 03 - …","ref":"/leda/docs/vss/vehicle/obd/fuelstatus/","tags":"","title":"FuelStatus"},{"body":" Full qualified VSS Path: Vehicle.OBD.Status.IgnitionType Description: Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eStatus Status--\u003eIgnitionType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Status.IgnitionType [get] OK Vehicle.OBD.Status.IgnitionType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Status.IgnitionType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Status.IgnitionType Data Type \u0026 Unit Path Vehicle.OBD.Status.IgnitionType VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['SPARK', 'COMPRESSION'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.OBD.Status.IgnitionType is a Sensor.\nThe vehicle signal Vehicle.OBD.Status.IgnitionType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Status.IgnitionType is 7ffd71caac8e5bd18f93366afdfe534d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Status.IgnitionType Description: …","ref":"/leda/docs/vss/vehicle/obd/status/ignitiontype/","tags":"","title":"IgnitionType"},{"body":" Full qualified VSS Path: Vehicle.OBD.IntakeTemp Description: PID 0F - Intake temperature Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eIntakeTemp Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.IntakeTemp [get] OK Vehicle.OBD.IntakeTemp: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.IntakeTemp 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.IntakeTemp Data Type \u0026 Unit Path Vehicle.OBD.IntakeTemp VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.IntakeTemp is a Sensor.\nThe vehicle signal Vehicle.OBD.IntakeTemp is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.IntakeTemp is 7c108305178b5854b430a23e125588bd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.IntakeTemp Description: PID 0F - …","ref":"/leda/docs/vss/vehicle/obd/intaketemp/","tags":"","title":"IntakeTemp"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected Description: Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected. Comment: Detection of emergency braking can trigger Emergency Brake Assist (EBA) to engage. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eBrake Brake--\u003eIsDriverEmergencyBrakingDetected Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected [get] OK Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected Data Type \u0026 Unit Path Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected is a Sensor.\nThe vehicle signal Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected is 0d462892aeac5062a62ee7d07306f6a6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/brake/isdriveremergencybrakingdetected/","tags":"","title":"IsDriverEmergencyBrakingDetected"},{"body":" Full qualified VSS Path: Vehicle.OBD.Status.IsMILOn Description: Malfunction Indicator Light (MIL) False = Off, True = On Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eStatus Status--\u003eIsMILOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Status.IsMILOn [get] OK Vehicle.OBD.Status.IsMILOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Status.IsMILOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Status.IsMILOn Data Type \u0026 Unit Path Vehicle.OBD.Status.IsMILOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.OBD.Status.IsMILOn is a Sensor.\nThe vehicle signal Vehicle.OBD.Status.IsMILOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Status.IsMILOn is 8744bcb275205630932320b66185502c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Status.IsMILOn Description: …","ref":"/leda/docs/vss/vehicle/obd/status/ismilon/","tags":"","title":"IsMILOn"},{"body":" Full qualified VSS Path: Vehicle.OBD.LongTermFuelTrim1 Description: PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eLongTermFuelTrim1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.LongTermFuelTrim1 [get] OK Vehicle.OBD.LongTermFuelTrim1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.LongTermFuelTrim1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.LongTermFuelTrim1 Data Type \u0026 Unit Path Vehicle.OBD.LongTermFuelTrim1 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.LongTermFuelTrim1 is a Sensor.\nThe vehicle signal Vehicle.OBD.LongTermFuelTrim1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.LongTermFuelTrim1 is 1c203b11667150f0b4ee1be26a60c084\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.LongTermFuelTrim1 Description: …","ref":"/leda/docs/vss/vehicle/obd/longtermfueltrim1/","tags":"","title":"LongTermFuelTrim1"},{"body":" Full qualified VSS Path: Vehicle.OBD.LongTermFuelTrim2 Description: PID 09 - Long Term (learned) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eLongTermFuelTrim2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.LongTermFuelTrim2 [get] OK Vehicle.OBD.LongTermFuelTrim2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.LongTermFuelTrim2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.LongTermFuelTrim2 Data Type \u0026 Unit Path Vehicle.OBD.LongTermFuelTrim2 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.LongTermFuelTrim2 is a Sensor.\nThe vehicle signal Vehicle.OBD.LongTermFuelTrim2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.LongTermFuelTrim2 is b02aff2efce05632b5694a256e5b9ec7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.LongTermFuelTrim2 Description: …","ref":"/leda/docs/vss/vehicle/obd/longtermfueltrim2/","tags":"","title":"LongTermFuelTrim2"},{"body":" Full qualified VSS Path: Vehicle.OBD.MAF Description: PID 10 - Grams of air drawn into engine per second Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eMAF Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.MAF [get] OK Vehicle.OBD.MAF: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.MAF 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.MAF Data Type \u0026 Unit Path Vehicle.OBD.MAF VSS: Addressing nodes Data type float VSS: Datatypes Unit g/s VSS: Units Label grams per second Description Mass per time measured in grams per second VSS: Sensors \u0026 Actuators Domain mass per time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.MAF is a Sensor.\nThe vehicle signal Vehicle.OBD.MAF is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.MAF is f3acdf89fb865313883d5d3126f15518\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.MAF Description: PID 10 - Grams …","ref":"/leda/docs/vss/vehicle/obd/maf/","tags":"","title":"MAF"},{"body":" Full qualified VSS Path: Vehicle.OBD.MAP Description: PID 0B - Intake manifold pressure Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eMAP Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.MAP [get] OK Vehicle.OBD.MAP: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.MAP 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.MAP Data Type \u0026 Unit Path Vehicle.OBD.MAP VSS: Addressing nodes Data type float VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.MAP is a Sensor.\nThe vehicle signal Vehicle.OBD.MAP is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.MAP is 335991b1b53f56f097fea7b05d4db83b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.MAP Description: PID 0B - Intake …","ref":"/leda/docs/vss/vehicle/obd/map/","tags":"","title":"MAP"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2 Signal Information The vehicle signal Vehicle.OBD.O2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2 is 31f007df72af50f0925d2b4647682a4d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor1 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor2 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor3 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor4 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor5 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor6 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor7 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2.Sensor8 (Oxygen sensors (PID 14 - PID 1B)) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2 Description: Oxygen sensors …","ref":"/leda/docs/vss/vehicle/obd/o2/","tags":"","title":"O2"},{"body":" Full qualified VSS Path: Vehicle.OBD Description: OBD data. Navigation flowchart LR Vehicle--\u003eOBD Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD Signal Information The vehicle signal Vehicle.OBD is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD is 7ad7c512ed5d52c8b31944d2d47a4bc3\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.AbsoluteLoad (PID 43 - Absolute load value) Vehicle.OBD.AcceleratorPositionD (PID 49 - Accelerator pedal position D) Vehicle.OBD.AcceleratorPositionE (PID 4A - Accelerator pedal position E) Vehicle.OBD.AcceleratorPositionF (PID 4B - Accelerator pedal position F) Vehicle.OBD.AirStatus (PID 12 - Secondary air status) Vehicle.OBD.AmbientAirTemperature (PID 46 - Ambient air temperature) Vehicle.OBD.BarometricPressure (PID 33 - Barometric pressure) Vehicle.OBD.Catalyst (Catalyst signals) Vehicle.OBD.CommandedEGR (PID 2C - Commanded exhaust gas recirculation (EGR)) Vehicle.OBD.CommandedEVAP (PID 2E - Commanded evaporative purge (EVAP) valve) Vehicle.OBD.CommandedEquivalenceRatio (PID 44 - Commanded equivalence ratio) Vehicle.OBD.ControlModuleVoltage (PID 42 - Control module voltage) Vehicle.OBD.CoolantTemperature (PID 05 - Coolant temperature) Vehicle.OBD.DTCList (List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )) Vehicle.OBD.DistanceSinceDTCClear (PID 31 - Distance traveled since codes cleared) Vehicle.OBD.DistanceWithMIL (PID 21 - Distance traveled with MIL on) Vehicle.OBD.DriveCycleStatus (PID 41 - OBD status for the current drive cycle) Vehicle.OBD.EGRError (PID 2D - Exhaust gas recirculation (EGR) error) Vehicle.OBD.EVAPVaporPressure (PID 32 - Evaporative purge (EVAP) system pressure) Vehicle.OBD.EVAPVaporPressureAbsolute (PID 53 - Absolute evaporative purge (EVAP) system pressure) Vehicle.OBD.EVAPVaporPressureAlternate (PID 54 - Alternate evaporative purge (EVAP) system pressure) Vehicle.OBD.EngineLoad (PID 04 - Engine load in percent - 0 = no load, 100 = full load) Vehicle.OBD.EngineSpeed (PID 0C - Engine speed measured as rotations per minute) Vehicle.OBD.EthanolPercent (PID 52 - Percentage of ethanol in the fuel) Vehicle.OBD.FreezeDTC (PID 02 - DTC that triggered the freeze frame) Vehicle.OBD.FuelInjectionTiming (PID 5D - Fuel injection timing) Vehicle.OBD.FuelLevel (PID 2F - Fuel level in the fuel tank) Vehicle.OBD.FuelPressure (PID 0A - Fuel pressure) Vehicle.OBD.FuelRailPressureAbsolute (PID 59 - Absolute fuel rail pressure) Vehicle.OBD.FuelRailPressureDirect (PID 23 - Fuel rail pressure direct inject) Vehicle.OBD.FuelRailPressureVac (PID 22 - Fuel rail pressure relative to vacuum) Vehicle.OBD.FuelRate (PID 5E - Engine fuel rate) Vehicle.OBD.FuelStatus (PID 03 - Fuel status) Vehicle.OBD.FuelType (PID 51 - Fuel type) Vehicle.OBD.HybridBatteryRemaining (PID 5B - Remaining life of hybrid battery) Vehicle.OBD.IntakeTemp (PID 0F - Intake temperature) Vehicle.OBD.IsPTOActive (PID 1E - Auxiliary input status (power take off)) Vehicle.OBD.LongTermFuelTrim1 (PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer) Vehicle.OBD.LongTermFuelTrim2 (PID 09 - Long Term (learned) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer) Vehicle.OBD.LongTermO2Trim1 (PID 56 (byte A) - Long term secondary O2 trim - Bank 1) Vehicle.OBD.LongTermO2Trim2 (PID 58 (byte A) - Long term secondary O2 trim - Bank 2) Vehicle.OBD.LongTermO2Trim3 (PID 56 (byte B) - Long term secondary O2 trim - Bank 3) Vehicle.OBD.LongTermO2Trim4 (PID 58 (byte B) - Long term secondary O2 trim - Bank 4) Vehicle.OBD.MAF (PID 10 - Grams of air drawn into engine per second) Vehicle.OBD.MAP (PID 0B - Intake manifold pressure) Vehicle.OBD.MaxMAF (PID 50 - Maximum flow for mass air flow sensor) Vehicle.OBD.O2 (Oxygen sensors (PID 14 - PID 1B)) Vehicle.OBD.O2WR (Wide range/band oxygen sensors (PID 24 - 2B and PID 34 - 3B)) Vehicle.OBD.OBDStandards (PID 1C - OBD standards this vehicle conforms to) Vehicle.OBD.OilTemperature (PID 5C - Engine oil temperature) Vehicle.OBD.OxygenSensorsIn2Banks (PID 13 - Presence of oxygen sensors in 2 banks. [A0..A3] == Bank 1, Sensors 1-4. [A4..A7] == Bank 2, Sensors 1-4) Vehicle.OBD.OxygenSensorsIn4Banks (PID 1D - Presence of oxygen sensors in 4 banks. Similar to PID 13, but [A0..A7] == [B1S1, B1S2, B2S1, B2S2, B3S1, B3S2, B4S1, B4S2]) Vehicle.OBD.PidsA (PID 00 - Bit array of the supported pids 01 to 20) Vehicle.OBD.PidsB (PID 20 - Bit array of the supported pids 21 to 40) Vehicle.OBD.PidsC (PID 40 - Bit array of the supported pids 41 to 60) Vehicle.OBD.RelativeAcceleratorPosition (PID 5A - Relative accelerator pedal position) Vehicle.OBD.RelativeThrottlePosition (PID 45 - Relative throttle position) Vehicle.OBD.RunTime (PID 1F - Engine run time) Vehicle.OBD.RunTimeMIL (PID 4D - Run time with MIL on) Vehicle.OBD.ShortTermFuelTrim1 (PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer) Vehicle.OBD.ShortTermFuelTrim2 (PID 08 - Short Term (immediate) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer) Vehicle.OBD.ShortTermO2Trim1 (PID 55 (byte A) - Short term secondary O2 trim - Bank 1) Vehicle.OBD.ShortTermO2Trim2 (PID 57 (byte A) - Short term secondary O2 trim - Bank 2) Vehicle.OBD.ShortTermO2Trim3 (PID 55 (byte B) - Short term secondary O2 trim - Bank 3) Vehicle.OBD.ShortTermO2Trim4 (PID 57 (byte B) - Short term secondary O2 trim - Bank 4) Vehicle.OBD.Speed (PID 0D - Vehicle speed) Vehicle.OBD.Status (PID 01 - OBD status) Vehicle.OBD.ThrottleActuator (PID 4C - Commanded throttle actuator) Vehicle.OBD.ThrottlePosition (PID 11 - Throttle position - 0 = closed throttle, 100 = open throttle) Vehicle.OBD.ThrottlePositionB (PID 47 - Absolute throttle position B) Vehicle.OBD.ThrottlePositionC (PID 48 - Absolute throttle position C) Vehicle.OBD.TimeSinceDTCCleared (PID 4E - Time since trouble codes cleared) Vehicle.OBD.TimingAdvance (PID 0E - Time advance) Vehicle.OBD.WarmupsSinceDTCClear (PID 30 - Number of warm-ups since codes cleared) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD Description: OBD data. …","ref":"/leda/docs/vss/vehicle/obd/","tags":"","title":"OBD"},{"body":" Full qualified VSS Path: Vehicle.OBD.OxygenSensorsIn2Banks Description: PID 13 - Presence of oxygen sensors in 2 banks. [A0..A3] == Bank 1, Sensors 1-4. [A4..A7] == Bank 2, Sensors 1-4 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eOxygenSensorsIn2Banks Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.OxygenSensorsIn2Banks [get] OK Vehicle.OBD.OxygenSensorsIn2Banks: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.OxygenSensorsIn2Banks 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.OxygenSensorsIn2Banks Data Type \u0026 Unit Path Vehicle.OBD.OxygenSensorsIn2Banks VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.OxygenSensorsIn2Banks is a Sensor.\nThe vehicle signal Vehicle.OBD.OxygenSensorsIn2Banks is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.OxygenSensorsIn2Banks is 0a9ba3f0a9b256d78bafd62ee8ce73cd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.OxygenSensorsIn2Banks …","ref":"/leda/docs/vss/vehicle/obd/oxygensensorsin2banks/","tags":"","title":"OxygenSensorsIn2Banks"},{"body":" Full qualified VSS Path: Vehicle.OBD.PidsA Description: PID 00 - Bit array of the supported pids 01 to 20 Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003ePidsA Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.PidsA [get] OK Vehicle.OBD.PidsA: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.PidsA 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.PidsA Data Type \u0026 Unit Path Vehicle.OBD.PidsA VSS: Addressing nodes Data type uint32 VSS: Datatypes Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.OBD.PidsA is a Sensor.\nThe vehicle signal Vehicle.OBD.PidsA is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.PidsA is ba1c1b9034955d2d97249c3b4516beef\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.PidsA Description: PID 00 - Bit …","ref":"/leda/docs/vss/vehicle/obd/pidsa/","tags":"","title":"PidsA"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor1 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor1 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor1 is 3aa8859203d4545083196a9690d72627\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor1.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor1.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor1 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor1/","tags":"","title":"Sensor1"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor2 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor2 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor2 is efcb337cf94056c8a724e76bcfee6765\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor2.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor2.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor2 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor2/","tags":"","title":"Sensor2"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor3 Description: Oxygen sensors (PID 14 - PID 1B) Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor3 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor3 Signal Information The vehicle signal Vehicle.OBD.O2.Sensor3 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor3 is b8c145402b7a5cffaa2699ed61b056fa\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.O2.Sensor3.ShortTermFuelTrim (PID 1x (byte B) - Short term fuel trim) Vehicle.OBD.O2.Sensor3.Voltage (PID 1x (byte A) - Sensor voltage) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor3 Description: Oxygen …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor3/","tags":"","title":"Sensor3"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor1 Sensor1--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim is ee366d40132456c0bce8cac3a837f16a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor1.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor1/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor2 Sensor2--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim is 92e6e172777457a9866ca045d0d79853\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor2.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor2/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim Description: PID 1x (byte B) - Short term fuel trim Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor3 Sensor3--\u003eShortTermFuelTrim Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim [get] OK Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim is 66c300d35eb85e7387dc42528cca48d9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor3.ShortTermFuelTrim …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor3/shorttermfueltrim/","tags":"","title":"ShortTermFuelTrim"},{"body":" Full qualified VSS Path: Vehicle.OBD.ShortTermFuelTrim1 Description: PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eShortTermFuelTrim1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ShortTermFuelTrim1 [get] OK Vehicle.OBD.ShortTermFuelTrim1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ShortTermFuelTrim1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ShortTermFuelTrim1 Data Type \u0026 Unit Path Vehicle.OBD.ShortTermFuelTrim1 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ShortTermFuelTrim1 is a Sensor.\nThe vehicle signal Vehicle.OBD.ShortTermFuelTrim1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ShortTermFuelTrim1 is 569c983874335fb392d4e82a002654cb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ShortTermFuelTrim1 Description: …","ref":"/leda/docs/vss/vehicle/obd/shorttermfueltrim1/","tags":"","title":"ShortTermFuelTrim1"},{"body":" Full qualified VSS Path: Vehicle.OBD.ShortTermFuelTrim2 Description: PID 08 - Short Term (immediate) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eShortTermFuelTrim2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ShortTermFuelTrim2 [get] OK Vehicle.OBD.ShortTermFuelTrim2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ShortTermFuelTrim2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ShortTermFuelTrim2 Data Type \u0026 Unit Path Vehicle.OBD.ShortTermFuelTrim2 VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ShortTermFuelTrim2 is a Sensor.\nThe vehicle signal Vehicle.OBD.ShortTermFuelTrim2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ShortTermFuelTrim2 is 53a39620773a523a8182169027169ec2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ShortTermFuelTrim2 Description: …","ref":"/leda/docs/vss/vehicle/obd/shorttermfueltrim2/","tags":"","title":"ShortTermFuelTrim2"},{"body":" Full qualified VSS Path: Vehicle.OBD.Speed Description: PID 0D - Vehicle speed Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.Speed [get] OK Vehicle.OBD.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Speed Data Type \u0026 Unit Path Vehicle.OBD.Speed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.Speed is a Sensor.\nThe vehicle signal Vehicle.OBD.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Speed is 91ed0bb43eb054759813cd784b071764\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Speed Description: PID 0D - …","ref":"/leda/docs/vss/vehicle/obd/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.OBD.Status Description: PID 01 - OBD status Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eStatus Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.Status Signal Information The vehicle signal Vehicle.OBD.Status is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.Status is 474f58e593ee5bfebbb9c6ce4a453f96\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.OBD.Status.DTCCount (Number of sensor Trouble Codes (DTC)) Vehicle.OBD.Status.IgnitionType (Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)) Vehicle.OBD.Status.IsMILOn (Malfunction Indicator Light (MIL) False = Off, True = On) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.Status Description: PID 01 - OBD …","ref":"/leda/docs/vss/vehicle/obd/status/","tags":"","title":"Status"},{"body":" Full qualified VSS Path: Vehicle.OBD.ThrottlePosition Description: PID 11 - Throttle position - 0 = closed throttle, 100 = open throttle Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eThrottlePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.ThrottlePosition [get] OK Vehicle.OBD.ThrottlePosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.ThrottlePosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.ThrottlePosition Data Type \u0026 Unit Path Vehicle.OBD.ThrottlePosition VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.ThrottlePosition is a Sensor.\nThe vehicle signal Vehicle.OBD.ThrottlePosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.ThrottlePosition is ec1d372020205bb4a846a014b33801e1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.ThrottlePosition Description: …","ref":"/leda/docs/vss/vehicle/obd/throttleposition/","tags":"","title":"ThrottlePosition"},{"body":" Full qualified VSS Path: Vehicle.OBD.TimingAdvance Description: PID 0E - Time advance Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eTimingAdvance Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.TimingAdvance [get] OK Vehicle.OBD.TimingAdvance: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.TimingAdvance 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.TimingAdvance Data Type \u0026 Unit Path Vehicle.OBD.TimingAdvance VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.TimingAdvance is a Sensor.\nThe vehicle signal Vehicle.OBD.TimingAdvance is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.TimingAdvance is 35533b7e327d5f839b17c932b630767c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.TimingAdvance Description: PID …","ref":"/leda/docs/vss/vehicle/obd/timingadvance/","tags":"","title":"TimingAdvance"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor1.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor1 Sensor1--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor1.Voltage [get] OK Vehicle.OBD.O2.Sensor1.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor1.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor1.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor1.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor1.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor1.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor1.Voltage is e95f4ea667265ee3a68ab57b86ecbf66\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor1.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor1/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor2.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor2 Sensor2--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor2.Voltage [get] OK Vehicle.OBD.O2.Sensor2.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor2.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor2.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor2.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor2.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor2.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor2.Voltage is 5f1781bde96b53ce9b810a5a56b7c8ed\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor2.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor2/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor3.Voltage Description: PID 1x (byte A) - Sensor voltage Navigation flowchart LR Vehicle--\u003eOBD OBD--\u003eO2 O2--\u003eSensor3 Sensor3--\u003eVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.OBD.O2.Sensor3.Voltage [get] OK Vehicle.OBD.O2.Sensor3.Voltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.OBD.O2.Sensor3.Voltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.OBD.O2.Sensor3.Voltage Data Type \u0026 Unit Path Vehicle.OBD.O2.Sensor3.Voltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.OBD.O2.Sensor3.Voltage is a Sensor.\nThe vehicle signal Vehicle.OBD.O2.Sensor3.Voltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.OBD.O2.Sensor3.Voltage is a86a1986f0fe5d25b6c438a00438ff60\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.OBD.O2.Sensor3.Voltage Description: …","ref":"/leda/docs/vss/vehicle/obd/o2/sensor3/voltage/","tags":"","title":"Voltage"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Accelerator Description: Accelerator signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAccelerator Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Accelerator Signal Information The vehicle signal Vehicle.Chassis.Accelerator is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Accelerator is 3b2b562086a45eb29c55186f3b710621\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Accelerator.PedalPosition (Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Accelerator Description: …","ref":"/leda/docs/vss/vehicle/chassis/accelerator/","tags":"","title":"Accelerator"},{"body":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Angle Description: Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eSteeringWheel SteeringWheel--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.SteeringWheel.Angle [get] OK Vehicle.Chassis.SteeringWheel.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.SteeringWheel.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.SteeringWheel.Angle Data Type \u0026 Unit Path Vehicle.Chassis.SteeringWheel.Angle VSS: Addressing nodes Data type int16 VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.SteeringWheel.Angle is a Sensor.\nThe vehicle signal Vehicle.Chassis.SteeringWheel.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.SteeringWheel.Angle is 92cd3b3d37585b2291806fe5127d9393\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Angle …","ref":"/leda/docs/vss/vehicle/chassis/steeringwheel/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Chassis.AxleCount Description: Number of axles on the vehicle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxleCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.AxleCount [get] OK Vehicle.Chassis.AxleCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.AxleCount 2 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.AxleCount Data Type \u0026 Unit Path Vehicle.Chassis.AxleCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Default value 2 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.AxleCount is an Attribute.\nThe vehicle signal Vehicle.Chassis.AxleCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.AxleCount is 86d084c9148d5f22b5402a030413ed79\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.AxleCount Description: …","ref":"/leda/docs/vss/vehicle/chassis/axlecount/","tags":"","title":"AxleCount"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake Description: Brake signals for wheel Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake is 5c33ec4bd8a15d3590f59e7257bf4d25\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel (Brake fluid level as percent. 0 = Empty. 100 = Full.) Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn (Brake pad wear status. True = Worn. False = Not Worn.) Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow (Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.) Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear (Brake pad wear as percent. 0 = No Wear. 100 = Worn.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/brake/","tags":"","title":"Brake"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Brake Description: Brake system signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Brake Signal Information The vehicle signal Vehicle.Chassis.Brake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Brake is 38df972e5c6b558e93839a5e97238c5a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Brake.IsDriverEmergencyBrakingDetected (Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected.) Vehicle.Chassis.Brake.PedalPosition (Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Brake Description: Brake …","ref":"/leda/docs/vss/vehicle/chassis/brake/","tags":"","title":"Brake"},{"body":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Extension Description: Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eSteeringWheel SteeringWheel--\u003eExtension Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.SteeringWheel.Extension [get] OK Vehicle.Chassis.SteeringWheel.Extension: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.SteeringWheel.Extension 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.SteeringWheel.Extension Data Type \u0026 Unit Path Vehicle.Chassis.SteeringWheel.Extension VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.SteeringWheel.Extension is an Actuator.\nThe vehicle signal Vehicle.Chassis.SteeringWheel.Extension is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.SteeringWheel.Extension is 6a84cc3604fc5960a1fb384fe63fae72\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Extension …","ref":"/leda/docs/vss/vehicle/chassis/steeringwheel/extension/","tags":"","title":"Extension"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel Description: Brake fluid level as percent. 0 = Empty. 100 = Full. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003eFluidLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel is 4b0d4f80b8855973a55ffee80fdfc4ba\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/brake/fluidlevel/","tags":"","title":"FluidLevel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel Description: Brake fluid level as percent. 0 = Empty. 100 = Full. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003eFluidLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.FluidLevel is 83e5e261302d5ab38c9ee4dddc18c8ae\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/brake/fluidlevel/","tags":"","title":"FluidLevel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn Description: Brake pad wear status. True = Worn. False = Not Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003eIsBrakesWorn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn is 3d9bae5bf0705de99789ecea26b99a5c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/brake/isbrakesworn/","tags":"","title":"IsBrakesWorn"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn Description: Brake pad wear status. True = Worn. False = Not Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003eIsBrakesWorn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsBrakesWorn is 9b5963e98a9c5b229a61df76ef5c86e0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/brake/isbrakesworn/","tags":"","title":"IsBrakesWorn"},{"body":" Full qualified VSS Path: Vehicle.Chassis.ParkingBrake.IsEngaged Description: Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eParkingBrake ParkingBrake--\u003eIsEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.ParkingBrake.IsEngaged [get] OK Vehicle.Chassis.ParkingBrake.IsEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.ParkingBrake.IsEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.ParkingBrake.IsEngaged Data Type \u0026 Unit Path Vehicle.Chassis.ParkingBrake.IsEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.ParkingBrake.IsEngaged is an Actuator.\nThe vehicle signal Vehicle.Chassis.ParkingBrake.IsEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.ParkingBrake.IsEngaged is faa7f94e6a5555c6b2d62e3328520ce0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.ParkingBrake.IsEngaged …","ref":"/leda/docs/vss/vehicle/chassis/parkingbrake/isengaged/","tags":"","title":"IsEngaged"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow Description: Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003eIsFluidLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow is 01f57161b0bf539fad1d2bfa9d9a9fc4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/brake/isfluidlevellow/","tags":"","title":"IsFluidLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow Description: Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003eIsFluidLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.IsFluidLevelLow is 727823c7e0d551f48f26a5dd4f0578bd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/brake/isfluidlevellow/","tags":"","title":"IsFluidLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow Description: Tire Pressure Status. True = Low tire pressure. False = Good tire pressure. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Tire--\u003eIsPressureLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow is d895b1e23a4f59ec92735fc317e44769\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/tire/ispressurelow/","tags":"","title":"IsPressureLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow Description: Tire Pressure Status. True = Low tire pressure. False = Good tire pressure. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eTire Tire--\u003eIsPressureLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow is da2f63312a455d92abd5edc405f01903\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/tire/ispressurelow/","tags":"","title":"IsPressureLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear Description: Brake pad wear as percent. 0 = No Wear. 100 = Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003ePadWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear is 8eff72d583015e1e94eab98bf8f0497e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/brake/padwear/","tags":"","title":"PadWear"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear Description: Brake pad wear as percent. 0 = No Wear. 100 = Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003ePadWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Brake.PadWear is 63a564bca18a5b1fabd7d3cff1af0e6d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/brake/padwear/","tags":"","title":"PadWear"},{"body":" Full qualified VSS Path: Vehicle.Chassis.ParkingBrake Description: Parking brake signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eParkingBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.ParkingBrake Signal Information The vehicle signal Vehicle.Chassis.ParkingBrake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.ParkingBrake is 3849d42292f4551590fa4bf716fc90f7\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.ParkingBrake.IsEngaged (Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.ParkingBrake Description: …","ref":"/leda/docs/vss/vehicle/chassis/parkingbrake/","tags":"","title":"ParkingBrake"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Accelerator.PedalPosition Description: Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAccelerator Accelerator--\u003ePedalPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Accelerator.PedalPosition [get] OK Vehicle.Chassis.Accelerator.PedalPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Accelerator.PedalPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Accelerator.PedalPosition Data Type \u0026 Unit Path Vehicle.Chassis.Accelerator.PedalPosition VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Accelerator.PedalPosition is a Sensor.\nThe vehicle signal Vehicle.Chassis.Accelerator.PedalPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Accelerator.PedalPosition is 2fabd8b61db45f62b4e97e7a612b4a73\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Accelerator.PedalPosition …","ref":"/leda/docs/vss/vehicle/chassis/accelerator/pedalposition/","tags":"","title":"PedalPosition"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Brake.PedalPosition Description: Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eBrake Brake--\u003ePedalPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Brake.PedalPosition [get] OK Vehicle.Chassis.Brake.PedalPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Brake.PedalPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Brake.PedalPosition Data Type \u0026 Unit Path Vehicle.Chassis.Brake.PedalPosition VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Brake.PedalPosition is a Sensor.\nThe vehicle signal Vehicle.Chassis.Brake.PedalPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Brake.PedalPosition is 0477d3a4a831564ea473976cf34374f2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Brake.PedalPosition …","ref":"/leda/docs/vss/vehicle/chassis/brake/pedalposition/","tags":"","title":"PedalPosition"},{"body":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Position Description: Position of the steering wheel on the left or right side of the vehicle. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eSteeringWheel SteeringWheel--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.SteeringWheel.Position [get] OK Vehicle.Chassis.SteeringWheel.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.SteeringWheel.Position FRONT_LEFT [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.SteeringWheel.Position Data Type \u0026 Unit Path Vehicle.Chassis.SteeringWheel.Position VSS: Addressing nodes Data type string VSS: Datatypes Default value FRONT_LEFT VSS: Sensors \u0026 Actuators Allowed values ['FRONT_LEFT', 'FRONT_RIGHT'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Chassis.SteeringWheel.Position is an Attribute.\nThe vehicle signal Vehicle.Chassis.SteeringWheel.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.SteeringWheel.Position is 314d6eeeba195098b36ae7f476d27824\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Position …","ref":"/leda/docs/vss/vehicle/chassis/steeringwheel/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure Description: Tire pressure in kilo-Pascal. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Tire--\u003ePressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure is ea414012c36e54fc84ec1d421f370ddd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/tire/pressure/","tags":"","title":"Pressure"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure Description: Tire pressure in kilo-Pascal. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eTire Tire--\u003ePressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure is 0cd3dd4be36c5fcda49d6360556ba7c8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/tire/pressure/","tags":"","title":"Pressure"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right Description: Wheel signals for axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right is f59f6ce66b1454498f5dc71be581732a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Right.Brake (Brake signals for wheel) Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed (Rotational speed of a vehicle’s wheel.) Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire (Tire signals for wheel.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed Description: Rotational speed of a vehicle’s wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed is 427abdd04fc355769697d998a47d3f58\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed Description: Rotational speed of a vehicle’s wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed is 85b41a82f4775fcea57dcc6218fb6d7b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Speed …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel Description: Steering wheel signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eSteeringWheel Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.SteeringWheel Signal Information The vehicle signal Vehicle.Chassis.SteeringWheel is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.SteeringWheel is 8c759072791e5986ac4efe9df0c2b751\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.SteeringWheel.Angle (Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.) Vehicle.Chassis.SteeringWheel.Extension (Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.) Vehicle.Chassis.SteeringWheel.Position (Position of the steering wheel on the left or right side of the vehicle.) Vehicle.Chassis.SteeringWheel.Tilt (Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel Description: …","ref":"/leda/docs/vss/vehicle/chassis/steeringwheel/","tags":"","title":"SteeringWheel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature Description: Tire temperature in Celsius. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Tire--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature is 06ab6b3fe7bb5f7c9e2e104ee0e7cfd5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/tire/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature Description: Tire temperature in Celsius. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eTire Tire--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature [get] OK Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature is 7c08b5778bc05265bb8d4e08fdca29cf\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/tire/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Tilt Description: Steering wheel column tilt. 0 = Lowest position. 100 = Highest position. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eSteeringWheel SteeringWheel--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.SteeringWheel.Tilt [get] OK Vehicle.Chassis.SteeringWheel.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.SteeringWheel.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.SteeringWheel.Tilt Data Type \u0026 Unit Path Vehicle.Chassis.SteeringWheel.Tilt VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.SteeringWheel.Tilt is an Actuator.\nThe vehicle signal Vehicle.Chassis.SteeringWheel.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.SteeringWheel.Tilt is 33e979769f91521d8080384447d06c00\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.SteeringWheel.Tilt …","ref":"/leda/docs/vss/vehicle/chassis/steeringwheel/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire Description: Tire signals for wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire is edfee87117dc5a6f9d970167f26ec090\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Left.Tire.IsPressureLow (Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.) Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure (Tire pressure in kilo-Pascal.) Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Temperature (Tire temperature in Celsius.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/tire/","tags":"","title":"Tire"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire Description: Tire signals for wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eRight Right--\u003eTire Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire is d855fe9ffb4e52be83ebfc7967c1c3ee\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Right.Tire.IsPressureLow (Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.) Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure (Tire pressure in kilo-Pascal.) Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Temperature (Tire temperature in Celsius.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/right/tire/","tags":"","title":"Tire"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake Description: Brake signals for wheel Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake is 162dab13d5815ec4bc22888b0bc59cbf\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel (Brake fluid level as percent. 0 = Empty. 100 = Full.) Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn (Brake pad wear status. True = Worn. False = Not Worn.) Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow (Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.) Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear (Brake pad wear as percent. 0 = No Wear. 100 = Worn.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/brake/","tags":"","title":"Brake"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake Description: Brake signals for wheel Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake is f334a45b92215f86b4ecadbd82c8b249\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel (Brake fluid level as percent. 0 = Empty. 100 = Full.) Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn (Brake pad wear status. True = Worn. False = Not Worn.) Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow (Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.) Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear (Brake pad wear as percent. 0 = No Wear. 100 = Worn.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/brake/","tags":"","title":"Brake"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake Description: Brake signals for wheel Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake is 774d0a5771d35975872870cf71ea1487\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Left.Brake.FluidLevel (Brake fluid level as percent. 0 = Empty. 100 = Full.) Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsBrakesWorn (Brake pad wear status. True = Worn. False = Not Worn.) Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.IsFluidLevelLow (Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.) Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake.PadWear (Brake pad wear as percent. 0 = No Wear. 100 = Worn.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left.Brake …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/brake/","tags":"","title":"Brake"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel Description: Brake fluid level as percent. 0 = Empty. 100 = Full. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003eFluidLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.FluidLevel is 63aa9c4973ef50b18bd7214c9f2634c5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/brake/fluidlevel/","tags":"","title":"FluidLevel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel Description: Brake fluid level as percent. 0 = Empty. 100 = Full. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003eFluidLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.FluidLevel is 386bfddee4605e419d59755a51835650\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/brake/fluidlevel/","tags":"","title":"FluidLevel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn Description: Brake pad wear status. True = Worn. False = Not Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003eIsBrakesWorn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsBrakesWorn is 901771088eb35dec9e69b56a8cb3e8f5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/brake/isbrakesworn/","tags":"","title":"IsBrakesWorn"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn Description: Brake pad wear status. True = Worn. False = Not Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003eIsBrakesWorn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsBrakesWorn is 4c669b71c91e57dd8fd804ee68174b9c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/brake/isbrakesworn/","tags":"","title":"IsBrakesWorn"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow Description: Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003eIsFluidLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.IsFluidLevelLow is 713da56818e55714ac441e10870b3753\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/brake/isfluidlevellow/","tags":"","title":"IsFluidLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow Description: Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003eIsFluidLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.IsFluidLevelLow is bb2057bc31c25beda1da0610ca62bd51\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/brake/isfluidlevellow/","tags":"","title":"IsFluidLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow Description: Tire Pressure Status. True = Low tire pressure. False = Good tire pressure. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Tire--\u003eIsPressureLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow is 4088315cfaa05c28b51c3d3462c65339\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/tire/ispressurelow/","tags":"","title":"IsPressureLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow Description: Tire Pressure Status. True = Low tire pressure. False = Good tire pressure. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eTire Tire--\u003eIsPressureLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow is 93fa1125894e53259af5b7e1d991c8da\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/tire/ispressurelow/","tags":"","title":"IsPressureLow"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left Description: Wheel signals for axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left is 0cd478c6e72b55c6be6d3d9df9624545\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Left.Brake (Brake signals for wheel) Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed (Rotational speed of a vehicle’s wheel.) Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire (Tire signals for wheel.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left Description: Wheel signals for axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Wheel--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel.Left Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel.Left is 4c32a1c722a45ea09a52c389e8a8a618\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Left.Brake (Brake signals for wheel) Vehicle.Chassis.Axle.Row2.Wheel.Left.Speed (Rotational speed of a vehicle’s wheel.) Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire (Tire signals for wheel.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel.Left …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear Description: Brake pad wear as percent. 0 = No Wear. 100 = Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eBrake Brake--\u003ePadWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Brake.PadWear is b4ed36f8143d512fadaca3e641739ee2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/brake/padwear/","tags":"","title":"PadWear"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear Description: Brake pad wear as percent. 0 = No Wear. 100 = Worn. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eBrake Brake--\u003ePadWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Brake.PadWear is f3c53c8c5628527a8501e12778dae6c7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/brake/padwear/","tags":"","title":"PadWear"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure Description: Tire pressure in kilo-Pascal. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Tire--\u003ePressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure is 9fa3f176fd975d28a68f70c7d72e370f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/tire/pressure/","tags":"","title":"Pressure"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure Description: Tire pressure in kilo-Pascal. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eTire Tire--\u003ePressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure is ea8038b63e6650ffb1a20539e915064a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/tire/pressure/","tags":"","title":"Pressure"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right Description: Wheel signals for axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right is c7ae1f1787ec502d8aea41802dc9a203\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Right.Brake (Brake signals for wheel) Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed (Rotational speed of a vehicle’s wheel.) Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire (Tire signals for wheel.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1 Description: Axle signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1 Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1 is d7e93a94af0752aaab36819f6be4f67a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.SteeringAngle (Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.) Vehicle.Chassis.Axle.Row1.TireAspectRatio (Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row1.TireDiameter (Outer diameter of tires, in inches, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row1.TireWidth (Nominal section width of tires, in mm, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row1.Wheel (Wheel signals for axle) Vehicle.Chassis.Axle.Row1.WheelCount (Number of wheels on the axle) Vehicle.Chassis.Axle.Row1.WheelDiameter (Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row1.WheelWidth (Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1 Description: Axle …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/","tags":"","title":"Row1"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2 Description: Axle signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2 Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2 is 8ef77768446659b6b5020a06c7b23c8b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.SteeringAngle (Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.) Vehicle.Chassis.Axle.Row2.TireAspectRatio (Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row2.TireDiameter (Outer diameter of tires, in inches, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row2.TireWidth (Nominal section width of tires, in mm, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row2.Wheel (Wheel signals for axle) Vehicle.Chassis.Axle.Row2.WheelCount (Number of wheels on the axle) Vehicle.Chassis.Axle.Row2.WheelDiameter (Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.) Vehicle.Chassis.Axle.Row2.WheelWidth (Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2 Description: Axle …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/","tags":"","title":"Row2"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed Description: Rotational speed of a vehicle’s wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed is 47897f20b2745b6aa2d0f76f1ecf824a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Speed …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed Description: Rotational speed of a vehicle’s wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed is c288d064d56e53bfb94cef8670872587\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Speed …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.SteeringAngle Description: Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right. Comment: Single track two-axle model steering angle refers to the angle that a centrally mounted wheel would have. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eSteeringAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.SteeringAngle [get] OK Vehicle.Chassis.Axle.Row1.SteeringAngle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.SteeringAngle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.SteeringAngle Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.SteeringAngle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.SteeringAngle is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.SteeringAngle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.SteeringAngle is 91310e9ef88450c68791fbb07d83f104\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.SteeringAngle …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/steeringangle/","tags":"","title":"SteeringAngle"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.SteeringAngle Description: Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right. Comment: Single track two-axle model steering angle refers to the angle that a centrally mounted wheel would have. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eSteeringAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.SteeringAngle [get] OK Vehicle.Chassis.Axle.Row2.SteeringAngle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.SteeringAngle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.SteeringAngle Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.SteeringAngle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.SteeringAngle is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.SteeringAngle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.SteeringAngle is bf1960525e725d2ca145ce12ba939ea3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.SteeringAngle …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/steeringangle/","tags":"","title":"SteeringAngle"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature Description: Tire temperature in Celsius. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Tire--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature is 093d8fb119755f6bafa979e4eae201a0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/tire/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature Description: Tire temperature in Celsius. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eTire Tire--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature [get] OK Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature is a Sensor.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature is 58d4cee188d353d7996e855d48bb92df\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/tire/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire Description: Tire signals for wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eLeft Left--\u003eTire Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire is 17c60ec3c02054b4951c975156375d9a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Left.Tire.IsPressureLow (Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.) Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure (Tire pressure in kilo-Pascal.) Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Temperature (Tire temperature in Celsius.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/left/tire/","tags":"","title":"Tire"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire Description: Tire signals for wheel. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Wheel--\u003eRight Right--\u003eTire Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire is 660f90ae8f14594cb6e97d000c1985a1\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Right.Tire.IsPressureLow (Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.) Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure (Tire pressure in kilo-Pascal.) Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Temperature (Tire temperature in Celsius.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/right/tire/","tags":"","title":"Tire"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.TireAspectRatio Description: Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eTireAspectRatio Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.TireAspectRatio [get] OK Vehicle.Chassis.Axle.Row1.TireAspectRatio: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.TireAspectRatio 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.TireAspectRatio Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.TireAspectRatio VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.TireAspectRatio is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.TireAspectRatio is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.TireAspectRatio is 716fec24167e5c36b2b97daaf091f911\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.TireAspectRatio …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/tireaspectratio/","tags":"","title":"TireAspectRatio"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.TireAspectRatio Description: Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eTireAspectRatio Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.TireAspectRatio [get] OK Vehicle.Chassis.Axle.Row2.TireAspectRatio: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.TireAspectRatio 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.TireAspectRatio Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.TireAspectRatio VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.TireAspectRatio is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.TireAspectRatio is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.TireAspectRatio is 9b4515273bf1554dab746212db05d352\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.TireAspectRatio …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/tireaspectratio/","tags":"","title":"TireAspectRatio"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.TireDiameter Description: Outer diameter of tires, in inches, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eTireDiameter Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.TireDiameter [get] OK Vehicle.Chassis.Axle.Row1.TireDiameter: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.TireDiameter 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.TireDiameter Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.TireDiameter VSS: Addressing nodes Data type float VSS: Datatypes Unit inch VSS: Units Label inch Description Distance measured in inches VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.TireDiameter is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.TireDiameter is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.TireDiameter is ed9f037c1b5d53c78c90b71179db1f4f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.TireDiameter …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/tirediameter/","tags":"","title":"TireDiameter"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.TireDiameter Description: Outer diameter of tires, in inches, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eTireDiameter Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.TireDiameter [get] OK Vehicle.Chassis.Axle.Row2.TireDiameter: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.TireDiameter 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.TireDiameter Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.TireDiameter VSS: Addressing nodes Data type float VSS: Datatypes Unit inch VSS: Units Label inch Description Distance measured in inches VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.TireDiameter is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.TireDiameter is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.TireDiameter is 4dc46ee7fe0a5240a6eb67f9bf43a1ea\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.TireDiameter …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/tirediameter/","tags":"","title":"TireDiameter"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.TireWidth Description: Nominal section width of tires, in mm, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eTireWidth Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.TireWidth [get] OK Vehicle.Chassis.Axle.Row1.TireWidth: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.TireWidth 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.TireWidth Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.TireWidth VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.TireWidth is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.TireWidth is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.TireWidth is 3444d8773c215cd7a076d688eb7f1afc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.TireWidth …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/tirewidth/","tags":"","title":"TireWidth"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.TireWidth Description: Nominal section width of tires, in mm, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eTireWidth Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.TireWidth [get] OK Vehicle.Chassis.Axle.Row2.TireWidth: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.TireWidth 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.TireWidth Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.TireWidth VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.TireWidth is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.TireWidth is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.TireWidth is 76a9071697b25fb8ab42393dfb77f0ef\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.TireWidth …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/tirewidth/","tags":"","title":"TireWidth"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel Description: Wheel signals for axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheel Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.Wheel Signal Information The vehicle signal Vehicle.Chassis.Axle.Row1.Wheel is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.Wheel is 8ed02c02eee0502ba6d94a5d5f1fb789\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1.Wheel.Left (Wheel signals for axle) Vehicle.Chassis.Axle.Row1.Wheel.Right (Wheel signals for axle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.Wheel Description: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheel/","tags":"","title":"Wheel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel Description: Wheel signals for axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheel Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.Wheel Signal Information The vehicle signal Vehicle.Chassis.Axle.Row2.Wheel is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.Wheel is 87b119ed6de254159877b24047fd3026\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row2.Wheel.Left (Wheel signals for axle) Vehicle.Chassis.Axle.Row2.Wheel.Right (Wheel signals for axle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.Wheel Description: …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheel/","tags":"","title":"Wheel"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.WheelCount Description: Number of wheels on the axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheelCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.WheelCount [get] OK Vehicle.Chassis.Axle.Row1.WheelCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.WheelCount 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.WheelCount Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.WheelCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.WheelCount is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.WheelCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.WheelCount is 7232effafb7d5c908a9bafe1cef2ff3e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.WheelCount …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheelcount/","tags":"","title":"WheelCount"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.WheelCount Description: Number of wheels on the axle Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheelCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.WheelCount [get] OK Vehicle.Chassis.Axle.Row2.WheelCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.WheelCount 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.WheelCount Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.WheelCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.WheelCount is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.WheelCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.WheelCount is ac6fe103410153d382306426d14213ab\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.WheelCount …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheelcount/","tags":"","title":"WheelCount"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.WheelDiameter Description: Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheelDiameter Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.WheelDiameter [get] OK Vehicle.Chassis.Axle.Row1.WheelDiameter: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.WheelDiameter 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.WheelDiameter Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.WheelDiameter VSS: Addressing nodes Data type float VSS: Datatypes Unit inch VSS: Units Label inch Description Distance measured in inches VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.WheelDiameter is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.WheelDiameter is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.WheelDiameter is 60d4b948ae8a5485bd77c45e1f648c13\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.WheelDiameter …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheeldiameter/","tags":"","title":"WheelDiameter"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.WheelDiameter Description: Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheelDiameter Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.WheelDiameter [get] OK Vehicle.Chassis.Axle.Row2.WheelDiameter: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.WheelDiameter 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.WheelDiameter Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.WheelDiameter VSS: Addressing nodes Data type float VSS: Datatypes Unit inch VSS: Units Label inch Description Distance measured in inches VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.WheelDiameter is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.WheelDiameter is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.WheelDiameter is af27b1d18a5455e593692a9929909bb9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.WheelDiameter …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheeldiameter/","tags":"","title":"WheelDiameter"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.WheelWidth Description: Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow1 Row1--\u003eWheelWidth Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row1.WheelWidth [get] OK Vehicle.Chassis.Axle.Row1.WheelWidth: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row1.WheelWidth 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row1.WheelWidth Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row1.WheelWidth VSS: Addressing nodes Data type float VSS: Datatypes Unit inch VSS: Units Label inch Description Distance measured in inches VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row1.WheelWidth is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row1.WheelWidth is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row1.WheelWidth is 5b92bdab1e035ff4ba000330e20f826b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row1.WheelWidth …","ref":"/leda/docs/vss/vehicle/chassis/axle/row1/wheelwidth/","tags":"","title":"WheelWidth"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.WheelWidth Description: Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Axle--\u003eRow2 Row2--\u003eWheelWidth Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Axle.Row2.WheelWidth [get] OK Vehicle.Chassis.Axle.Row2.WheelWidth: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Axle.Row2.WheelWidth 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle.Row2.WheelWidth Data Type \u0026 Unit Path Vehicle.Chassis.Axle.Row2.WheelWidth VSS: Addressing nodes Data type float VSS: Datatypes Unit inch VSS: Units Label inch Description Distance measured in inches VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Chassis.Axle.Row2.WheelWidth is an Attribute.\nThe vehicle signal Vehicle.Chassis.Axle.Row2.WheelWidth is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle.Row2.WheelWidth is 889d279053c051979ebbe301bacac206\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle.Row2.WheelWidth …","ref":"/leda/docs/vss/vehicle/chassis/axle/row2/wheelwidth/","tags":"","title":"WheelWidth"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Axle Description: Axle signals Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eAxle Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Axle Signal Information The vehicle signal Vehicle.Chassis.Axle is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Axle is 0a3ebde7efa85c04ac6c29b5676fec5d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Axle.Row1 (Axle signals) Vehicle.Chassis.Axle.Row2 (Axle signals) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Axle Description: Axle …","ref":"/leda/docs/vss/vehicle/chassis/axle/","tags":"","title":"Axle"},{"body":" Full qualified VSS Path: Vehicle.Chassis Description: All data concerning steering, suspension, wheels, and brakes. Navigation flowchart LR Vehicle--\u003eChassis Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis Signal Information The vehicle signal Vehicle.Chassis is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis is 87d260d635425da0a4ebd62bc4e5c313\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Chassis.Accelerator (Accelerator signals) Vehicle.Chassis.Axle (Axle signals) Vehicle.Chassis.AxleCount (Number of axles on the vehicle) Vehicle.Chassis.Brake (Brake system signals) Vehicle.Chassis.ParkingBrake (Parking brake signals) Vehicle.Chassis.SteeringWheel (Steering wheel signals) Vehicle.Chassis.Track (Overall wheel tracking, in mm.) Vehicle.Chassis.Wheelbase (Overall wheel base, in mm.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis Description: All data …","ref":"/leda/docs/vss/vehicle/chassis/","tags":"","title":"Chassis"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBA Description: Emergency Brake Assist (EBA) System signals. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBA Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBA Signal Information The vehicle signal Vehicle.ADAS.EBA is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBA is 51ec0930d0af5b91b84a0775c6e87a97\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.EBA.IsEnabled (Indicates if EBA is enabled. True = Enabled. False = Disabled.) Vehicle.ADAS.EBA.IsEngaged (Indicates if EBA is currently regulating brake pressure. True = Engaged. False = Not Engaged.) Vehicle.ADAS.EBA.IsError (Indicates if EBA incurred an error condition. True = Error. False = No Error.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBA Description: Emergency …","ref":"/leda/docs/vss/vehicle/adas/eba/","tags":"","title":"EBA"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBD Description: Electronic Brakeforce Distribution (EBD) System signals. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBD Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBD Signal Information The vehicle signal Vehicle.ADAS.EBD is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBD is 3f4c74a588735b10ac9fe918d305cd5a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.EBD.IsEnabled (Indicates if EBD is enabled. True = Enabled. False = Disabled.) Vehicle.ADAS.EBD.IsEngaged (Indicates if EBD is currently regulating vehicle brakeforce distribution. True = Engaged. False = Not Engaged.) Vehicle.ADAS.EBD.IsError (Indicates if EBD incurred an error condition. True = Error. False = No Error.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBD Description: Electronic …","ref":"/leda/docs/vss/vehicle/adas/ebd/","tags":"","title":"EBD"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC Description: Electronic Stability Control System signals. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC Signal Information The vehicle signal Vehicle.ADAS.ESC is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC is 636b4586ce7854b4b270a2f3b6c0af4f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.ESC.IsEnabled (Indicates if ESC is enabled. True = Enabled. False = Disabled.) Vehicle.ADAS.ESC.IsEngaged (Indicates if ESC is currently regulating vehicle stability. True = Engaged. False = Not Engaged.) Vehicle.ADAS.ESC.IsError (Indicates if ESC incurred an error condition. True = Error. False = No Error.) Vehicle.ADAS.ESC.IsStrongCrossWindDetected (Indicates if the ESC system is detecting strong cross winds. True = Strong cross winds detected. False = No strong cross winds detected.) Vehicle.ADAS.ESC.RoadFriction (Road friction values reported by the ESC system.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC Description: Electronic …","ref":"/leda/docs/vss/vehicle/adas/esc/","tags":"","title":"ESC"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBA.IsEnabled Description: Indicates if EBA is enabled. True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBA EBA--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.EBA.IsEnabled [get] OK Vehicle.ADAS.EBA.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.EBA.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBA.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.EBA.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.EBA.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.EBA.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBA.IsEnabled is 3ae9171b69555fb08855054ab38e9b17\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBA.IsEnabled Description: …","ref":"/leda/docs/vss/vehicle/adas/eba/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBD.IsEnabled Description: Indicates if EBD is enabled. True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBD EBD--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.EBD.IsEnabled [get] OK Vehicle.ADAS.EBD.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.EBD.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBD.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.EBD.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.EBD.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.EBD.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBD.IsEnabled is 30f88d3e68575b67853b14ce5f7a08e5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBD.IsEnabled Description: …","ref":"/leda/docs/vss/vehicle/adas/ebd/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsEnabled Description: Indicates if ESC is enabled. True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.IsEnabled [get] OK Vehicle.ADAS.ESC.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.ESC.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ESC.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.ESC.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.IsEnabled is 3f4f39b8d8c05c97a6de685282ba74b7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsEnabled Description: …","ref":"/leda/docs/vss/vehicle/adas/esc/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBA.IsEngaged Description: Indicates if EBA is currently regulating brake pressure. True = Engaged. False = Not Engaged. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBA EBA--\u003eIsEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.EBA.IsEngaged [get] OK Vehicle.ADAS.EBA.IsEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.EBA.IsEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBA.IsEngaged Data Type \u0026 Unit Path Vehicle.ADAS.EBA.IsEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.EBA.IsEngaged is a Sensor.\nThe vehicle signal Vehicle.ADAS.EBA.IsEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBA.IsEngaged is 86360c44ead354d18af7ff14176151f6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBA.IsEngaged Description: …","ref":"/leda/docs/vss/vehicle/adas/eba/isengaged/","tags":"","title":"IsEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBD.IsEngaged Description: Indicates if EBD is currently regulating vehicle brakeforce distribution. True = Engaged. False = Not Engaged. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBD EBD--\u003eIsEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.EBD.IsEngaged [get] OK Vehicle.ADAS.EBD.IsEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.EBD.IsEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBD.IsEngaged Data Type \u0026 Unit Path Vehicle.ADAS.EBD.IsEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.EBD.IsEngaged is a Sensor.\nThe vehicle signal Vehicle.ADAS.EBD.IsEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBD.IsEngaged is 67aa2a598f635edda6eb944af99b06db\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBD.IsEngaged Description: …","ref":"/leda/docs/vss/vehicle/adas/ebd/isengaged/","tags":"","title":"IsEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsEngaged Description: Indicates if ESC is currently regulating vehicle stability. True = Engaged. False = Not Engaged. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eIsEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.IsEngaged [get] OK Vehicle.ADAS.ESC.IsEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.IsEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.IsEngaged Data Type \u0026 Unit Path Vehicle.ADAS.ESC.IsEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ESC.IsEngaged is a Sensor.\nThe vehicle signal Vehicle.ADAS.ESC.IsEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.IsEngaged is 2088953a28385353a9d46b3a3dc11cac\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsEngaged Description: …","ref":"/leda/docs/vss/vehicle/adas/esc/isengaged/","tags":"","title":"IsEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.TCS.IsEngaged Description: Indicates if TCS is currently regulating traction. True = Engaged. False = Not Engaged. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eTCS TCS--\u003eIsEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.TCS.IsEngaged [get] OK Vehicle.ADAS.TCS.IsEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.TCS.IsEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.TCS.IsEngaged Data Type \u0026 Unit Path Vehicle.ADAS.TCS.IsEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.TCS.IsEngaged is a Sensor.\nThe vehicle signal Vehicle.ADAS.TCS.IsEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.TCS.IsEngaged is b33d70009ad5589fbffe17fa7e827242\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.TCS.IsEngaged Description: …","ref":"/leda/docs/vss/vehicle/adas/tcs/isengaged/","tags":"","title":"IsEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBA.IsError Description: Indicates if EBA incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBA EBA--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.EBA.IsError [get] OK Vehicle.ADAS.EBA.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.EBA.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBA.IsError Data Type \u0026 Unit Path Vehicle.ADAS.EBA.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.EBA.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.EBA.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBA.IsError is bae0fe856398502ba4a09283867c6c81\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBA.IsError Description: …","ref":"/leda/docs/vss/vehicle/adas/eba/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.EBD.IsError Description: Indicates if EBD incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eEBD EBD--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.EBD.IsError [get] OK Vehicle.ADAS.EBD.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.EBD.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.EBD.IsError Data Type \u0026 Unit Path Vehicle.ADAS.EBD.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.EBD.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.EBD.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.EBD.IsError is 918157073be95015ae38913cd7a9796a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.EBD.IsError Description: …","ref":"/leda/docs/vss/vehicle/adas/ebd/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsError Description: Indicates if ESC incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.IsError [get] OK Vehicle.ADAS.ESC.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.IsError Data Type \u0026 Unit Path Vehicle.ADAS.ESC.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ESC.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.ESC.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.IsError is 6c237535654b5bc7a70f6a70c760b9d4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsError Description: …","ref":"/leda/docs/vss/vehicle/adas/esc/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.TCS.IsError Description: Indicates if TCS incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eTCS TCS--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.TCS.IsError [get] OK Vehicle.ADAS.TCS.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.TCS.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.TCS.IsError Data Type \u0026 Unit Path Vehicle.ADAS.TCS.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.TCS.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.TCS.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.TCS.IsError is 08f88723ba63558b8c804b8fe8e3f149\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.TCS.IsError Description: …","ref":"/leda/docs/vss/vehicle/adas/tcs/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsStrongCrossWindDetected Description: Indicates if the ESC system is detecting strong cross winds. True = Strong cross winds detected. False = No strong cross winds detected. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eIsStrongCrossWindDetected Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.IsStrongCrossWindDetected [get] OK Vehicle.ADAS.ESC.IsStrongCrossWindDetected: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.IsStrongCrossWindDetected false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.IsStrongCrossWindDetected Data Type \u0026 Unit Path Vehicle.ADAS.ESC.IsStrongCrossWindDetected VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ESC.IsStrongCrossWindDetected is a Sensor.\nThe vehicle signal Vehicle.ADAS.ESC.IsStrongCrossWindDetected is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.IsStrongCrossWindDetected is ebfd609531345c37914b89e553df80cb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.IsStrongCrossWindDetected …","ref":"/leda/docs/vss/vehicle/adas/esc/isstrongcrosswinddetected/","tags":"","title":"IsStrongCrossWindDetected"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction.LowerBound Description: Lower bound road friction, as calculated by the ESC system. 5% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eRoadFriction RoadFriction--\u003eLowerBound Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.RoadFriction.LowerBound [get] OK Vehicle.ADAS.ESC.RoadFriction.LowerBound: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.RoadFriction.LowerBound 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.RoadFriction.LowerBound Data Type \u0026 Unit Path Vehicle.ADAS.ESC.RoadFriction.LowerBound VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.ADAS.ESC.RoadFriction.LowerBound is a Sensor.\nThe vehicle signal Vehicle.ADAS.ESC.RoadFriction.LowerBound is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.RoadFriction.LowerBound is 634289f58b5d511ea9979f04a9d0f2ab\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction.LowerBound …","ref":"/leda/docs/vss/vehicle/adas/esc/roadfriction/lowerbound/","tags":"","title":"LowerBound"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction.MostProbable Description: Most probable road friction, as calculated by the ESC system. Exact meaning of most probable is implementation specific. 0 = no friction, 100 = maximum friction. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eRoadFriction RoadFriction--\u003eMostProbable Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.RoadFriction.MostProbable [get] OK Vehicle.ADAS.ESC.RoadFriction.MostProbable: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.RoadFriction.MostProbable 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.RoadFriction.MostProbable Data Type \u0026 Unit Path Vehicle.ADAS.ESC.RoadFriction.MostProbable VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.ADAS.ESC.RoadFriction.MostProbable is a Sensor.\nThe vehicle signal Vehicle.ADAS.ESC.RoadFriction.MostProbable is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.RoadFriction.MostProbable is b0eb72430cd95bfbba0d187fcb6e2a62\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction.MostProbable …","ref":"/leda/docs/vss/vehicle/adas/esc/roadfriction/mostprobable/","tags":"","title":"MostProbable"},{"body":" Full qualified VSS Path: Vehicle.ADAS.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.PowerOptimizeLevel [get] OK Vehicle.ADAS.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.ADAS.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.ADAS.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.ADAS.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.PowerOptimizeLevel is 044ad42893e65993bfc439455fb08faa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.PowerOptimizeLevel Description: …","ref":"/leda/docs/vss/vehicle/adas/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction Description: Road friction values reported by the ESC system. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eRoadFriction Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.RoadFriction Signal Information The vehicle signal Vehicle.ADAS.ESC.RoadFriction is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.RoadFriction is 71a32e4eb131532c82195508d93807ed\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.ESC.RoadFriction.LowerBound (Lower bound road friction, as calculated by the ESC system. 5% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.) Vehicle.ADAS.ESC.RoadFriction.MostProbable (Most probable road friction, as calculated by the ESC system. Exact meaning of most probable is implementation specific. 0 = no friction, 100 = maximum friction.) Vehicle.ADAS.ESC.RoadFriction.UpperBound (Upper bound road friction, as calculated by the ESC system. 95% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction Description: …","ref":"/leda/docs/vss/vehicle/adas/esc/roadfriction/","tags":"","title":"RoadFriction"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Track Description: Overall wheel tracking, in mm. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eTrack Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Track [get] OK Vehicle.Chassis.Track: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Track 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Track Data Type \u0026 Unit Path Vehicle.Chassis.Track VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Track is an Attribute.\nThe vehicle signal Vehicle.Chassis.Track is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Track is f66cc4e6d7cf5e1da0d58af902dbb36b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Track Description: Overall …","ref":"/leda/docs/vss/vehicle/chassis/track/","tags":"","title":"Track"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction.UpperBound Description: Upper bound road friction, as calculated by the ESC system. 95% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eESC ESC--\u003eRoadFriction RoadFriction--\u003eUpperBound Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ESC.RoadFriction.UpperBound [get] OK Vehicle.ADAS.ESC.RoadFriction.UpperBound: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ESC.RoadFriction.UpperBound 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ESC.RoadFriction.UpperBound Data Type \u0026 Unit Path Vehicle.ADAS.ESC.RoadFriction.UpperBound VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.ADAS.ESC.RoadFriction.UpperBound is a Sensor.\nThe vehicle signal Vehicle.ADAS.ESC.RoadFriction.UpperBound is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ESC.RoadFriction.UpperBound is ad0415a799575fcd8d1f49bed9a2baeb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ESC.RoadFriction.UpperBound …","ref":"/leda/docs/vss/vehicle/adas/esc/roadfriction/upperbound/","tags":"","title":"UpperBound"},{"body":" Full qualified VSS Path: Vehicle.Chassis.Wheelbase Description: Overall wheel base, in mm. Navigation flowchart LR Vehicle--\u003eChassis Chassis--\u003eWheelbase Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Chassis.Wheelbase [get] OK Vehicle.Chassis.Wheelbase: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Chassis.Wheelbase 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Chassis.Wheelbase Data Type \u0026 Unit Path Vehicle.Chassis.Wheelbase VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Chassis.Wheelbase is an Attribute.\nThe vehicle signal Vehicle.Chassis.Wheelbase is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Chassis.Wheelbase is 11677e0433935dc7aa9c1806c96a8a6b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Chassis.Wheelbase Description: …","ref":"/leda/docs/vss/vehicle/chassis/wheelbase/","tags":"","title":"Wheelbase"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ABS Description: Antilock Braking System signals. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eABS Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ABS Signal Information The vehicle signal Vehicle.ADAS.ABS is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ABS is 219270ef27c4531f874bbda63743b330\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.ABS.IsEnabled (Indicates if ABS is enabled. True = Enabled. False = Disabled.) Vehicle.ADAS.ABS.IsEngaged (Indicates if ABS is currently regulating brake pressure. True = Engaged. False = Not Engaged.) Vehicle.ADAS.ABS.IsError (Indicates if ABS incurred an error condition. True = Error. False = No Error.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ABS Description: Antilock …","ref":"/leda/docs/vss/vehicle/adas/abs/","tags":"","title":"ABS"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ActiveAutonomyLevel Description: Indicates the currently active level of autonomy according to SAE J3016 taxonomy. Comment: Follows https://www.sae.org/news/2019/01/sae-updates-j3016-automated-driving-graphic taxonomy. For SAE levels 3 and 4 the system is required to alert the driver before it will disengage. Level 4 systems are required to reach a safe state even if a driver does not take over. Only level 5 systems are required to not rely on a driver at all. While level 2 systems require the driver to be monitoring the system at all times, many level 2 systems, often termed “level 2.5” systems, do warn the driver shortly before reaching their operational limits, therefore we also support the DISENGAGING state for SAE_2. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eActiveAutonomyLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ActiveAutonomyLevel [get] OK Vehicle.ADAS.ActiveAutonomyLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ActiveAutonomyLevel Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ActiveAutonomyLevel Data Type \u0026 Unit Path Vehicle.ADAS.ActiveAutonomyLevel VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['SAE_0', 'SAE_1', 'SAE_2_DISENGAGING', 'SAE_2', 'SAE_3_DISENGAGING', 'SAE_3', 'SAE_4_DISENGAGING', 'SAE_4', 'SAE_5'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.ADAS.ActiveAutonomyLevel is a Sensor.\nThe vehicle signal Vehicle.ADAS.ActiveAutonomyLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ActiveAutonomyLevel is b101c6928fc55948b1cc485e568ecd8d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ActiveAutonomyLevel …","ref":"/leda/docs/vss/vehicle/adas/activeautonomylevel/","tags":"","title":"ActiveAutonomyLevel"},{"body":" Full qualified VSS Path: Vehicle.ADAS Description: All Advanced Driver Assist Systems data. Navigation flowchart LR Vehicle--\u003eADAS Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS Signal Information The vehicle signal Vehicle.ADAS is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS is 14c2b2e1297b513197d320a5ce58f42e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.ABS (Antilock Braking System signals.) Vehicle.ADAS.ActiveAutonomyLevel (Indicates the currently active level of autonomy according to SAE J3016 taxonomy.) Vehicle.ADAS.CruiseControl (Signals from Cruise Control system.) Vehicle.ADAS.EBA (Emergency Brake Assist (EBA) System signals.) Vehicle.ADAS.EBD (Electronic Brakeforce Distribution (EBD) System signals.) Vehicle.ADAS.ESC (Electronic Stability Control System signals.) Vehicle.ADAS.LaneDepartureDetection (Signals from Lane Departure Detection System.) Vehicle.ADAS.ObstacleDetection (Signals form Obstacle Sensor System.) Vehicle.ADAS.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.ADAS.SupportedAutonomyLevel (Indicates the highest level of autonomy according to SAE J3016 taxonomy the vehicle is capable of.) Vehicle.ADAS.TCS (Traction Control System signals.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS Description: All Advanced …","ref":"/leda/docs/vss/vehicle/adas/","tags":"","title":"ADAS"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Convertible Description: Convertible roof. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eConvertible Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Convertible Signal Information The vehicle signal Vehicle.Cabin.Convertible is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Convertible is 2aece85d39d6569e93cf842387a645d9\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Convertible.Status (Roof status on convertible vehicles.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Convertible Description: …","ref":"/leda/docs/vss/vehicle/cabin/convertible/","tags":"","title":"Convertible"},{"body":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl Description: Signals from Cruise Control system. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eCruiseControl Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.CruiseControl Signal Information The vehicle signal Vehicle.ADAS.CruiseControl is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.CruiseControl is c4d751cf74f9576dbba3cc820991c1fb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.CruiseControl.IsActive (Indicates if cruise control system is active (i.e. actively controls speed). True = Active. False = Inactive.) Vehicle.ADAS.CruiseControl.IsEnabled (Indicates if cruise control system is enabled (e.g. ready to receive configurations and settings) True = Enabled. False = Disabled.) Vehicle.ADAS.CruiseControl.IsError (Indicates if cruise control system incurred an error condition. True = Error. False = No Error.) Vehicle.ADAS.CruiseControl.SpeedSet (Set cruise control speed in kilometers per hour.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl Description: …","ref":"/leda/docs/vss/vehicle/adas/cruisecontrol/","tags":"","title":"CruiseControl"},{"body":" Full qualified VSS Path: Vehicle.Cabin.DriverPosition Description: The position of the driver seat in row 1. Comment: Default value is position 1, i.e. a typical LHD vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDriverPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.DriverPosition [get] OK Vehicle.Cabin.DriverPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.DriverPosition 1 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.DriverPosition Data Type \u0026 Unit Path Vehicle.Cabin.DriverPosition VSS: Addressing nodes Data type uint8 VSS: Datatypes Default value 1 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.DriverPosition is an Attribute.\nThe vehicle signal Vehicle.Cabin.DriverPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.DriverPosition is bca9ccd50358584d8d20865694b0d15f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.DriverPosition Description: …","ref":"/leda/docs/vss/vehicle/cabin/driverposition/","tags":"","title":"DriverPosition"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest Description: Switches for SingleSeat.Headrest. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest is dd4de742803250eaa1efeceaad116e1d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged (Head rest backward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged (Head rest down switch engaged (SingleSeat.Headrest.Height).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged (Head rest forward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged (Head rest up switch engaged (SingleSeat.Headrest.Height).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.IsActive Description: Indicates if cruise control system is active (i.e. actively controls speed). True = Active. False = Inactive. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eCruiseControl CruiseControl--\u003eIsActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.CruiseControl.IsActive [get] OK Vehicle.ADAS.CruiseControl.IsActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.CruiseControl.IsActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.CruiseControl.IsActive Data Type \u0026 Unit Path Vehicle.ADAS.CruiseControl.IsActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.CruiseControl.IsActive is an Actuator.\nThe vehicle signal Vehicle.ADAS.CruiseControl.IsActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.CruiseControl.IsActive is 78ab5ce923dc5aa1a6622bcb948e1561\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.IsActive …","ref":"/leda/docs/vss/vehicle/adas/cruisecontrol/isactive/","tags":"","title":"IsActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged Description: Head rest backward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsBackwardEngaged is 04e14e79404b5ff7ac9067841f81bbc9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/headrest/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged Description: Decrease massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsDecreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged is 7226bc97842452099d5484baad0af620\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/massage/isdecreaseengaged/","tags":"","title":"IsDecreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged Description: Head rest down switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsDownEngaged is 61a58c7fa7ed5e08a17067193bb9c951\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/headrest/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ABS.IsEnabled Description: Indicates if ABS is enabled. True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eABS ABS--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ABS.IsEnabled [get] OK Vehicle.ADAS.ABS.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ABS.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ABS.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.ABS.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ABS.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.ABS.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ABS.IsEnabled is cad374fbfdc65df9b777508f04d5b073\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ABS.IsEnabled Description: …","ref":"/leda/docs/vss/vehicle/adas/abs/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.IsEnabled Description: Indicates if cruise control system is enabled (e.g. ready to receive configurations and settings) True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eCruiseControl CruiseControl--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.CruiseControl.IsEnabled [get] OK Vehicle.ADAS.CruiseControl.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.CruiseControl.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.CruiseControl.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.CruiseControl.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.CruiseControl.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.CruiseControl.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.CruiseControl.IsEnabled is 018417f6c8535315895d0f54d209035a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.IsEnabled …","ref":"/leda/docs/vss/vehicle/adas/cruisecontrol/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.LaneDepartureDetection.IsEnabled Description: Indicates if lane departure detection system is enabled. True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eLaneDepartureDetection LaneDepartureDetection--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.LaneDepartureDetection.IsEnabled [get] OK Vehicle.ADAS.LaneDepartureDetection.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.LaneDepartureDetection.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.LaneDepartureDetection.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.LaneDepartureDetection.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.LaneDepartureDetection.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.LaneDepartureDetection.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.LaneDepartureDetection.IsEnabled is c099ae97260f5c418977cd14631e95be\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/adas/lanedeparturedetection/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection.IsEnabled Description: Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eObstacleDetection ObstacleDetection--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ObstacleDetection.IsEnabled [get] OK Vehicle.ADAS.ObstacleDetection.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ObstacleDetection.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ObstacleDetection.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.ObstacleDetection.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ObstacleDetection.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.ObstacleDetection.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ObstacleDetection.IsEnabled is cc0cd497285e5034a1cccb25f02e9db9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection.IsEnabled …","ref":"/leda/docs/vss/vehicle/adas/obstacledetection/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.TCS.IsEnabled Description: Indicates if TCS is enabled. True = Enabled. False = Disabled. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eTCS TCS--\u003eIsEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.TCS.IsEnabled [get] OK Vehicle.ADAS.TCS.IsEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.TCS.IsEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.TCS.IsEnabled Data Type \u0026 Unit Path Vehicle.ADAS.TCS.IsEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.TCS.IsEnabled is an Actuator.\nThe vehicle signal Vehicle.ADAS.TCS.IsEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.TCS.IsEnabled is 1d2dda19b11758a19ba7c1d5cd2d7956\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.TCS.IsEnabled Description: …","ref":"/leda/docs/vss/vehicle/adas/tcs/isenabled/","tags":"","title":"IsEnabled"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ABS.IsEngaged Description: Indicates if ABS is currently regulating brake pressure. True = Engaged. False = Not Engaged. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eABS ABS--\u003eIsEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ABS.IsEngaged [get] OK Vehicle.ADAS.ABS.IsEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ABS.IsEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ABS.IsEngaged Data Type \u0026 Unit Path Vehicle.ADAS.ABS.IsEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ABS.IsEngaged is a Sensor.\nThe vehicle signal Vehicle.ADAS.ABS.IsEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ABS.IsEngaged is 6dd21979a2225e31940dc2ece1aa9a04\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ABS.IsEngaged Description: …","ref":"/leda/docs/vss/vehicle/adas/abs/isengaged/","tags":"","title":"IsEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ABS.IsError Description: Indicates if ABS incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eABS ABS--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ABS.IsError [get] OK Vehicle.ADAS.ABS.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ABS.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ABS.IsError Data Type \u0026 Unit Path Vehicle.ADAS.ABS.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ABS.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.ABS.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ABS.IsError is 13cfabb3122254128234f9a696f14678\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ABS.IsError Description: …","ref":"/leda/docs/vss/vehicle/adas/abs/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.IsError Description: Indicates if cruise control system incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eCruiseControl CruiseControl--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.CruiseControl.IsError [get] OK Vehicle.ADAS.CruiseControl.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.CruiseControl.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.CruiseControl.IsError Data Type \u0026 Unit Path Vehicle.ADAS.CruiseControl.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.CruiseControl.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.CruiseControl.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.CruiseControl.IsError is 22923d4a36bc5192a08e40fe9e5ed458\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.IsError …","ref":"/leda/docs/vss/vehicle/adas/cruisecontrol/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.LaneDepartureDetection.IsError Description: Indicates if lane departure system incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eLaneDepartureDetection LaneDepartureDetection--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.LaneDepartureDetection.IsError [get] OK Vehicle.ADAS.LaneDepartureDetection.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.LaneDepartureDetection.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.LaneDepartureDetection.IsError Data Type \u0026 Unit Path Vehicle.ADAS.LaneDepartureDetection.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.LaneDepartureDetection.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.LaneDepartureDetection.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.LaneDepartureDetection.IsError is 73b2fc4f6a4952e4b7886671450e7798\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.LaneDepartureDetection.IsError …","ref":"/leda/docs/vss/vehicle/adas/lanedeparturedetection/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection.IsError Description: Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eObstacleDetection ObstacleDetection--\u003eIsError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ObstacleDetection.IsError [get] OK Vehicle.ADAS.ObstacleDetection.IsError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ObstacleDetection.IsError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ObstacleDetection.IsError Data Type \u0026 Unit Path Vehicle.ADAS.ObstacleDetection.IsError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ObstacleDetection.IsError is a Sensor.\nThe vehicle signal Vehicle.ADAS.ObstacleDetection.IsError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ObstacleDetection.IsError is 368b74e2468d5217925a478ed6e34f9f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection.IsError …","ref":"/leda/docs/vss/vehicle/adas/obstacledetection/iserror/","tags":"","title":"IsError"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged Description: Head rest forward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsForwardEngaged is 3c94aab710ff5e8f8a48fdbf6dc7b989\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/headrest/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged Description: Increase massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsIncreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged is fb062e9f85fd568cbd774b36fbf5113f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/massage/isincreaseengaged/","tags":"","title":"IsIncreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged Description: Head rest up switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest.IsUpEngaged is e40c92c141f6562382f4f29d783cfa26\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/headrest/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.ADAS.LaneDepartureDetection.IsWarning Description: Indicates if lane departure detection registered a lane departure. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eLaneDepartureDetection LaneDepartureDetection--\u003eIsWarning Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.LaneDepartureDetection.IsWarning [get] OK Vehicle.ADAS.LaneDepartureDetection.IsWarning: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.LaneDepartureDetection.IsWarning false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.LaneDepartureDetection.IsWarning Data Type \u0026 Unit Path Vehicle.ADAS.LaneDepartureDetection.IsWarning VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.LaneDepartureDetection.IsWarning is a Sensor.\nThe vehicle signal Vehicle.ADAS.LaneDepartureDetection.IsWarning is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.LaneDepartureDetection.IsWarning is c32fcd1d56035cb08acfd380be224c6a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/adas/lanedeparturedetection/iswarning/","tags":"","title":"IsWarning"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection.IsWarning Description: Indicates if obstacle sensor system registered an obstacle. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eObstacleDetection ObstacleDetection--\u003eIsWarning Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.ObstacleDetection.IsWarning [get] OK Vehicle.ADAS.ObstacleDetection.IsWarning: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.ObstacleDetection.IsWarning false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ObstacleDetection.IsWarning Data Type \u0026 Unit Path Vehicle.ADAS.ObstacleDetection.IsWarning VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.ADAS.ObstacleDetection.IsWarning is a Sensor.\nThe vehicle signal Vehicle.ADAS.ObstacleDetection.IsWarning is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ObstacleDetection.IsWarning is b0b1eab51f135ffcb2a17a7603415fec\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection.IsWarning …","ref":"/leda/docs/vss/vehicle/adas/obstacledetection/iswarning/","tags":"","title":"IsWarning"},{"body":" Full qualified VSS Path: Vehicle.ADAS.LaneDepartureDetection Description: Signals from Lane Departure Detection System. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eLaneDepartureDetection Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.LaneDepartureDetection Signal Information The vehicle signal Vehicle.ADAS.LaneDepartureDetection is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.LaneDepartureDetection is e45f33fdcf245f11981b2f201ee8281a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.LaneDepartureDetection.IsEnabled (Indicates if lane departure detection system is enabled. True = Enabled. False = Disabled.) Vehicle.ADAS.LaneDepartureDetection.IsError (Indicates if lane departure system incurred an error condition. True = Error. False = No Error.) Vehicle.ADAS.LaneDepartureDetection.IsWarning (Indicates if lane departure detection registered a lane departure.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.LaneDepartureDetection …","ref":"/leda/docs/vss/vehicle/adas/lanedeparturedetection/","tags":"","title":"LaneDepartureDetection"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage Description: Switches for SingleSeat.Massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eMassage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage is ac2bb22d6acf56988582353a1453cbe3\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsDecreaseEngaged (Decrease massage level switch engaged (SingleSeat.Massage).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage.IsIncreaseEngaged (Increase massage level switch engaged (SingleSeat.Massage).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection Description: Signals form Obstacle Sensor System. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eObstacleDetection Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.ObstacleDetection Signal Information The vehicle signal Vehicle.ADAS.ObstacleDetection is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.ObstacleDetection is e7b6d81631cc5ac584d027d4c1a66cb5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.ObstacleDetection.IsEnabled (Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.) Vehicle.ADAS.ObstacleDetection.IsError (Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.) Vehicle.ADAS.ObstacleDetection.IsWarning (Indicates if obstacle sensor system registered an obstacle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.ObstacleDetection Description: …","ref":"/leda/docs/vss/vehicle/adas/obstacledetection/","tags":"","title":"ObstacleDetection"},{"body":" Full qualified VSS Path: Vehicle.Cabin.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.PowerOptimizeLevel [get] OK Vehicle.Cabin.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.Cabin.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.Cabin.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.PowerOptimizeLevel is 728b62b170055bd8b1530ec423dd5a9a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.PowerOptimizeLevel …","ref":"/leda/docs/vss/vehicle/cabin/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.Cabin.SeatPosCount Description: Number of seats across each row from the front to the rear. Comment: Default value corresponds to two seats in front row and 3 seats in second row. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeatPosCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.SeatPosCount [get] OK Vehicle.Cabin.SeatPosCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.SeatPosCount [2, 3] [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.SeatPosCount Data Type \u0026 Unit Path Vehicle.Cabin.SeatPosCount VSS: Addressing nodes Data type uint8[] VSS: Datatypes Default value [2, 3] VSS: Sensors \u0026 Actuators Signal Information The vehicle signal Vehicle.Cabin.SeatPosCount is an Attribute.\nThe vehicle signal Vehicle.Cabin.SeatPosCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.SeatPosCount is 8dd40ecd47ab51c79ed9c74ae4296d7e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.SeatPosCount Description: …","ref":"/leda/docs/vss/vehicle/cabin/seatposcount/","tags":"","title":"SeatPosCount"},{"body":" Full qualified VSS Path: Vehicle.Cabin.SeatRowCount Description: Number of seat rows in vehicle. Comment: Default value corresponds to two rows of seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeatRowCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.SeatRowCount [get] OK Vehicle.Cabin.SeatRowCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.SeatRowCount 2 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.SeatRowCount Data Type \u0026 Unit Path Vehicle.Cabin.SeatRowCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Default value 2 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.SeatRowCount is an Attribute.\nThe vehicle signal Vehicle.Cabin.SeatRowCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.SeatRowCount is 1002a7a4a954581b9cbc72fa438c5292\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.SeatRowCount Description: …","ref":"/leda/docs/vss/vehicle/cabin/seatrowcount/","tags":"","title":"SeatRowCount"},{"body":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.SpeedSet Description: Set cruise control speed in kilometers per hour. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eCruiseControl CruiseControl--\u003eSpeedSet Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.CruiseControl.SpeedSet [get] OK Vehicle.ADAS.CruiseControl.SpeedSet: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.CruiseControl.SpeedSet 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.CruiseControl.SpeedSet Data Type \u0026 Unit Path Vehicle.ADAS.CruiseControl.SpeedSet VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.ADAS.CruiseControl.SpeedSet is an Actuator.\nThe vehicle signal Vehicle.ADAS.CruiseControl.SpeedSet is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.CruiseControl.SpeedSet is b3f3a53ccd825e4da5cb1226f94dc005\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.CruiseControl.SpeedSet …","ref":"/leda/docs/vss/vehicle/adas/cruisecontrol/speedset/","tags":"","title":"SpeedSet"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Convertible.Status Description: Roof status on convertible vehicles. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eConvertible Convertible--\u003eStatus Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Convertible.Status [get] OK Vehicle.Cabin.Convertible.Status: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Convertible.Status Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Convertible.Status Data Type \u0026 Unit Path Vehicle.Cabin.Convertible.Status VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UNDEFINED', 'CLOSED', 'OPEN', 'CLOSING', 'OPENING', 'STALLED'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Convertible.Status is a Sensor.\nThe vehicle signal Vehicle.Cabin.Convertible.Status is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Convertible.Status is c8812698198a56d7a1adcc8bbe87845f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Convertible.Status …","ref":"/leda/docs/vss/vehicle/cabin/convertible/status/","tags":"","title":"Status"},{"body":" Full qualified VSS Path: Vehicle.ADAS.SupportedAutonomyLevel Description: Indicates the highest level of autonomy according to SAE J3016 taxonomy the vehicle is capable of. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eSupportedAutonomyLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.ADAS.SupportedAutonomyLevel [get] OK Vehicle.ADAS.SupportedAutonomyLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.ADAS.SupportedAutonomyLevel Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.SupportedAutonomyLevel Data Type \u0026 Unit Path Vehicle.ADAS.SupportedAutonomyLevel VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['SAE_0', 'SAE_1', 'SAE_2', 'SAE_3', 'SAE_4', 'SAE_5'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.ADAS.SupportedAutonomyLevel is an Attribute.\nThe vehicle signal Vehicle.ADAS.SupportedAutonomyLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.SupportedAutonomyLevel is 020410189ab4517cb85ceda268b40f51\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.SupportedAutonomyLevel …","ref":"/leda/docs/vss/vehicle/adas/supportedautonomylevel/","tags":"","title":"SupportedAutonomyLevel"},{"body":" Full qualified VSS Path: Vehicle.ADAS.TCS Description: Traction Control System signals. Navigation flowchart LR Vehicle--\u003eADAS ADAS--\u003eTCS Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.ADAS.TCS Signal Information The vehicle signal Vehicle.ADAS.TCS is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.ADAS.TCS is 0572e9f6b1aa5fb5b2f68086aff05073\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS.TCS.IsEnabled (Indicates if TCS is enabled. True = Enabled. False = Disabled.) Vehicle.ADAS.TCS.IsEngaged (Indicates if TCS is currently regulating traction. True = Engaged. False = Not Engaged.) Vehicle.ADAS.TCS.IsError (Indicates if TCS incurred an error condition. True = Error. False = No Error.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.ADAS.TCS Description: Traction …","ref":"/leda/docs/vss/vehicle/adas/tcs/","tags":"","title":"TCS"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Airbag Description: Airbag signals. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eAirbag Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Airbag Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Airbag is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Airbag is e1d14ad055955eac914a47ee180a6e78\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed (Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Airbag …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/airbag/","tags":"","title":"Airbag"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle Description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eHeadrest Headrest--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle is bf6f63ab87e453af965c90f0495ea972\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/headrest/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest Description: Describes switches related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest is 583a22d4a1365db9bf386a96bcafd292\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged (Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged (Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar (Switches for SingleSeat.Backrest.Lumbar.) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster (Switches for SingleSeat.Backrest.SideBolster.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Headrest Description: Headrest settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Headrest is a14ecc5524645ca883e2838f666bce70\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Headrest.Angle (Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.) Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height (Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height Description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eHeadrest Headrest--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height is 2ae8b66df4045f46a96acbcdd6d2d452\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Headrest.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/headrest/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged Description: Seat backward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged is 267429a5f95d5f47ac47ec301755df32\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged Description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged is 2999a262b18e5476ab621e0cba4045e8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/seating/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged Description: Cooler switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsCoolerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged is ffff3283b2cf5f7292e241ec2ee27e77\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/iscoolerengaged/","tags":"","title":"IsCoolerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed Description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eAirbag Airbag--\u003eIsDeployed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Airbag.IsDeployed is 6802243fcb3155b196cca3a825c12bcb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/airbag/isdeployed/","tags":"","title":"IsDeployed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged Description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged is dcd08d675e7e5f4eafe85311a3e40f1e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/lumbar/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged Description: Seat down switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged is 73d2e688696a507b826230d5b53c429f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged Description: Seat forward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged is 397a8afd0dd1533b8899248596ae7566\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged Description: Is switch to increase seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged is d32a5d6d85ff5b64b0157ae215cee44e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/seating/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged Description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged is 866f9a7d358e5eb5985c9c675b4f7eb4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/lumbar/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged Description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged is e99b4f4b07af511b9d86454eec1c483c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/sidebolster/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged Description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged is cf9c077f2f4d5573a6022f5f08e807d3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/lumbar/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged Description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged is 92341df5af725c8282f6f93644f1ec9f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/sidebolster/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged Description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineBackwardEngaged is eed918c7f0b558a99bbe804582a31b64\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/isreclinebackwardengaged/","tags":"","title":"IsReclineBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged Description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.IsReclineForwardEngaged is 0cc4f8336f0d585f93f4ab5c89e133d8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/isreclineforwardengaged/","tags":"","title":"IsReclineForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged Description: Tilt backward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsTiltBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged is 4490bc9063715f238c00c1eea91fa964\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/istiltbackwardengaged/","tags":"","title":"IsTiltBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged Description: Tilt forward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsTiltForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged is 98d34a35ab82571e88e2d647b5a772f4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/istiltforwardengaged/","tags":"","title":"IsTiltForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged Description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged is f0fd5a54865452bcbf2939d8acd4273c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/lumbar/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged Description: Seat up switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged is 26752cad0db150a2aa6737b825e96256\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged Description: Warmer switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsWarmerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged is 820cc2c323b45ef989d5bcb8aac9527e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/iswarmerengaged/","tags":"","title":"IsWarmerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length Description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSeating Seating--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length is b188311a9fd95b9195b28ab7be00d68f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Seating.Length …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/seating/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar Description: Switches for SingleSeat.Backrest.Lumbar. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar is 1d631b9c90a25a858a6caabe8ead1826\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsDownEngaged (Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged (Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged (Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.Lumbar.IsUpEngaged (Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating Description: Describes switches related to the seating of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating is 0ed3b90fe1b4581782fac8496bace4b8\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsBackwardEngaged (Is switch to decrease seating length engaged (SingleSeat.Seating.Length).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating.IsForwardEngaged (Is switch to increase seating length engaged (SingleSeat.Seating.Length).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster Description: Switches for SingleSeat.Backrest.SideBolster. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster is 79d8d65b4c1d54a4ab1306d56e839c49\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged (Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged (Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch Description: Seat switch signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSwitch Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Switch Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Switch is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Switch is e0cfa7aceac75980b33075ceef5c9125\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Switch.Backrest (Describes switches related to the backrest of the seat.) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Headrest (Switches for SingleSeat.Headrest.) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsBackwardEngaged (Seat backward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsCoolerEngaged (Cooler switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsDownEngaged (Seat down switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsForwardEngaged (Seat forward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltBackwardEngaged (Tilt backward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsTiltForwardEngaged (Tilt forward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsUpEngaged (Seat up switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.IsWarmerEngaged (Warmer switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Massage (Switches for SingleSeat.Massage.) Vehicle.Cabin.Seat.Row2.Pos3.Switch.Seating (Describes switches related to the seating of the seat.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Switch …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest Description: Describes signals related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest is 561be9f8b4f9587bb0d139cc33071742\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar (Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.) Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline (Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.) Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster (Backrest side bolster (lumbar side support) settings.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest Description: Switches for SingleSeat.Headrest. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest is 077d7df6106f5d04884a5f44f917493a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged (Head rest backward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged (Head rest down switch engaged (SingleSeat.Headrest.Height).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged (Head rest forward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged (Head rest up switch engaged (SingleSeat.Headrest.Height).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Heating Description: Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eHeating Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Heating [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Heating: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Heating 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Heating Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Heating VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Heating is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Heating is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Heating is 2a175561eed05247b3048263c0122fa1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Heating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/heating/","tags":"","title":"Heating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height Description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height is 38b30eb99fd35c5693c18361c566c6e9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/lumbar/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Height Description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Height is 077a21fca4d857dd81debfd81119bc73\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eOccupant Occupant--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier is 296e51d414a65cea96e1eea27dc3e1dd\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/occupant/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged Description: Head rest backward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsBackwardEngaged is 5a6c05fe3aa854199b3a2d83a91ff07d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/headrest/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.IsBelted Description: Is the belt engaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eIsBelted Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.IsBelted [get] OK Vehicle.Cabin.Seat.Row2.Pos3.IsBelted: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.IsBelted false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.IsBelted Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.IsBelted VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.IsBelted is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.IsBelted is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.IsBelted is 815f9e1dc05b5078aaefc3868319b18b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.IsBelted …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/isbelted/","tags":"","title":"IsBelted"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged Description: Decrease massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsDecreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged is 20b139513267583e8a4a2374fcde2626\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/massage/isdecreaseengaged/","tags":"","title":"IsDecreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged Description: Head rest down switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsDownEngaged is a1bab160e2bf563b991b22c820ae17c4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/headrest/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged Description: Head rest forward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsForwardEngaged is aa43a5239e255308b617306b71723c5b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/headrest/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged Description: Increase massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsIncreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged is 32fff40566d95d0cb36ed76100e515c3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/massage/isincreaseengaged/","tags":"","title":"IsIncreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied Description: Does the seat have a passenger in it. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eIsOccupied Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied [get] OK Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied is 018a7ef68dd75f0ea391c7d8191acd9d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/isoccupied/","tags":"","title":"IsOccupied"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Issuer is d96b225635b959a1aea0d6febb955ae8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/occupant/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged Description: Head rest up switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest.IsUpEngaged is 5b096959633953a9b7c4c52af0c85fa9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/headrest/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar Description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar is 2410df6d719c56a58617644a8afc7240\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Height (Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support (Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage Description: Switches for SingleSeat.Massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eMassage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage is 1fabf329e8715f28b90b72a8a5b6c3de\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsDecreaseEngaged (Decrease massage level switch engaged (SingleSeat.Massage).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage.IsIncreaseEngaged (Increase massage level switch engaged (SingleSeat.Massage).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Massage Description: Seat massage level. 0 = off. 100 = max massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eMassage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Massage [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Massage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Massage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Massage Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Massage VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Massage is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Massage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Massage is fffccf6ae6365b83ab093031f573e452\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Occupant Description: Occupant data. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eOccupant Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Occupant Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Occupant is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Occupant is a8df9afde2335f8ab7cf4b185148f20e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier (Identifier attributes based on OAuth 2.0.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Occupant …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/occupant/","tags":"","title":"Occupant"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3 is a40aa679981551e7a92b8438533911d4\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Airbag (Airbag signals.) Vehicle.Cabin.Seat.Row2.Pos3.Backrest (Describes signals related to the backrest of the seat.) Vehicle.Cabin.Seat.Row2.Pos3.Headrest (Headrest settings.) Vehicle.Cabin.Seat.Row2.Pos3.Heating (Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.) Vehicle.Cabin.Seat.Row2.Pos3.Height (Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row2.Pos3.IsBelted (Is the belt engaged.) Vehicle.Cabin.Seat.Row2.Pos3.IsOccupied (Does the seat have a passenger in it.) Vehicle.Cabin.Seat.Row2.Pos3.Massage (Seat massage level. 0 = off. 100 = max massage.) Vehicle.Cabin.Seat.Row2.Pos3.Occupant (Occupant data.) Vehicle.Cabin.Seat.Row2.Pos3.Position (Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.) Vehicle.Cabin.Seat.Row2.Pos3.Seating (Describes signals related to the seat bottom of the seat.) Vehicle.Cabin.Seat.Row2.Pos3.Switch (Seat switch signals) Vehicle.Cabin.Seat.Row2.Pos3.Tilt (Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3 Description: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/","tags":"","title":"Pos3"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Position Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Position [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Position Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Position VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Position is 64eb763cc10358b49968797fbf50c092\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Position …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline Description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline. Comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eRecline Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Recline is 867a9d4d4e685407906d561946921c24\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/recline/","tags":"","title":"Recline"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Seating Description: Describes signals related to the seat bottom of the seat. Comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Seating is 1dcb55c75dd55fc0bf752fcf17ba79be\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Seating.Length (Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster Description: Backrest side bolster (lumbar side support) settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster is d52ea54e1d725eb88fa1c061a07a3217\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support (Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Occupant.Identifier.Subject is ea36896f5572580b9d8379a6256f61b5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/occupant/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support Description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest.Lumbar.Support is b227f493bab0503589b3a54c30ade03c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/lumbar/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support Description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Backrest.SideBolster.Support is b4cef1fd83d653aca5c941865bbf96b7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/backrest/sidebolster/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Tilt Description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward. Comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos3 Pos3--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos3.Tilt [get] OK Vehicle.Cabin.Seat.Row2.Pos3.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos3.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos3.Tilt Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos3.Tilt VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Tilt is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos3.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos3.Tilt is 5702e9961d4353eea849901a12886cf1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos3.Tilt …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos3/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Airbag Description: Airbag signals. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eAirbag Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Airbag Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Airbag is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Airbag is 07f9f55e33055cf7bebdc06e7d5a6a14\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed (Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Airbag …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/airbag/","tags":"","title":"Airbag"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle Description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eHeadrest Headrest--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle is d3d4f0a7f5c15072b80f88c2743b77be\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/headrest/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest Description: Describes switches related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest is 1abd0c2387ea56479575b324795cdf2e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged (Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged (Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar (Switches for SingleSeat.Backrest.Lumbar.) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster (Switches for SingleSeat.Backrest.SideBolster.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Headrest Description: Headrest settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Headrest is 46dcaa7ca75d57c7a5301b7107538812\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Headrest.Angle (Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.) Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height (Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height Description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height is 6389ff80f23e5985b734207d97a4a58e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/lumbar/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height Description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eHeadrest Headrest--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height is 1e955420a3d6591e84aa2b6bbd2bed18\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Headrest.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/headrest/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged Description: Seat backward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged is 19c46bf9c19955a1a619fd3311b5236e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged Description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged is 8f8492873cb05b9098e8eb564a43394a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/seating/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged Description: Cooler switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsCoolerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged is 0d72a18529d55286be69d517c94cbb74\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/iscoolerengaged/","tags":"","title":"IsCoolerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed Description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eAirbag Airbag--\u003eIsDeployed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Airbag.IsDeployed is 668f397bc95358989119fb1cfdfa8a01\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/airbag/isdeployed/","tags":"","title":"IsDeployed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged Description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged is 1092743255ee5cb7a11b172f2d6a9f2e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/lumbar/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged Description: Seat down switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged is 3774266336e05ddbacadd2ef017568b1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged Description: Seat forward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged is 79d68b154c12508d91f28bedafb47a43\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged Description: Is switch to increase seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged is 4f2b176b4f1657fe8395439df7376d12\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/seating/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged Description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged is 7dc46ce3336f5c6ab31fe33e52a56cb5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/lumbar/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged Description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged is f9edf7174eda59a0a2403450939a4a00\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/sidebolster/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged Description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged is 475e608bc2aa50f8ad9eea738415d7e3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/lumbar/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged Description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged is 4b8c68ce106155b78b40f09cc000dfdd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/sidebolster/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged Description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineBackwardEngaged is 366a8acb011b5997a07930a1b7e62e69\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/isreclinebackwardengaged/","tags":"","title":"IsReclineBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged Description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.IsReclineForwardEngaged is fd142d6b8b1353118a5c6e6afb635145\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/isreclineforwardengaged/","tags":"","title":"IsReclineForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged Description: Tilt backward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsTiltBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged is c587834e47e651e3b1556b6f7b4c738d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/istiltbackwardengaged/","tags":"","title":"IsTiltBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged Description: Tilt forward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsTiltForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged is 90cdb504ff1a5d0bb512fe7034c7bf07\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/istiltforwardengaged/","tags":"","title":"IsTiltForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged Description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged is 5f6c6804d50955ec8a898a890120a126\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/lumbar/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged Description: Seat up switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged is 7b1f9f36a4f65e7a8aad6b94c186ec00\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged Description: Warmer switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsWarmerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged is e0a9b4614dbb5c4fbd3e333a73edf8b0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/iswarmerengaged/","tags":"","title":"IsWarmerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length Description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSeating Seating--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length is fbdac9db983b5f52a900d24cf2d424c4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Seating.Length …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/seating/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar Description: Switches for SingleSeat.Backrest.Lumbar. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar is ed202bc72cd75d5d940f8b7eedfce763\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsDownEngaged (Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged (Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged (Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.Lumbar.IsUpEngaged (Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Seating Description: Describes signals related to the seat bottom of the seat. Comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Seating is 899171a0b84a563daf6cea0542405031\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Seating.Length (Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating Description: Describes switches related to the seating of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating is 10ccb625321652e5a12470d14ff7ecd0\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsBackwardEngaged (Is switch to decrease seating length engaged (SingleSeat.Seating.Length).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating.IsForwardEngaged (Is switch to increase seating length engaged (SingleSeat.Seating.Length).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster Description: Backrest side bolster (lumbar side support) settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster is ff84905ea881586dafbdfa2268888ba4\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support (Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster Description: Switches for SingleSeat.Backrest.SideBolster. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster is 69625c26aabf50fda25c5389994ad485\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged (Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged (Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support Description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support is fcbec0664f315476b901bd4f0b1df006\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/lumbar/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support Description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster.Support is 5b7bbfe5ce975a79a029a839a91ebafb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/sidebolster/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch Description: Seat switch signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eSwitch Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Switch Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Switch is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Switch is f3fdef2159cb5cda985cbc04220c3593\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Switch.Backrest (Describes switches related to the backrest of the seat.) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Headrest (Switches for SingleSeat.Headrest.) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsBackwardEngaged (Seat backward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsCoolerEngaged (Cooler switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsDownEngaged (Seat down switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsForwardEngaged (Seat forward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltBackwardEngaged (Tilt backward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsTiltForwardEngaged (Tilt forward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsUpEngaged (Seat up switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.IsWarmerEngaged (Warmer switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Massage (Switches for SingleSeat.Massage.) Vehicle.Cabin.Seat.Row2.Pos2.Switch.Seating (Describes switches related to the seating of the seat.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Switch …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest Description: Describes switches related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest is 4cc0b73f30e65456a6268f52ad7fee70\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged (Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged (Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar (Switches for SingleSeat.Backrest.Lumbar.) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster (Switches for SingleSeat.Backrest.SideBolster.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest Description: Describes signals related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest is 25a2e0b3833f55c1a0b8ad2589ad2a18\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar (Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.) Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline (Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.) Vehicle.Cabin.Seat.Row2.Pos2.Backrest.SideBolster (Backrest side bolster (lumbar side support) settings.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest Description: Switches for SingleSeat.Headrest. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest is f803a25975405ed38684b3f065535a4a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged (Head rest backward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged (Head rest down switch engaged (SingleSeat.Headrest.Height).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged (Head rest forward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged (Head rest up switch engaged (SingleSeat.Headrest.Height).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Heating Description: Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eHeating Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Heating [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Heating: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Heating 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Heating Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Heating VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Heating is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Heating is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Heating is c7eb6ca24426596dab519386d231a9d1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Heating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/heating/","tags":"","title":"Heating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Height Description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Height is 3cf2e042421b540da4aa047680dcdf84\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eOccupant Occupant--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier is 24c23b9f5adb549483cb52acbd81a980\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/occupant/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged Description: Head rest backward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsBackwardEngaged is 9ed038b597665225a0f2dfd262cf59b5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/headrest/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged Description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged is c02ddbb0e2c1536081dae3cb23baf4b1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/seating/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.IsBelted Description: Is the belt engaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eIsBelted Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.IsBelted [get] OK Vehicle.Cabin.Seat.Row2.Pos2.IsBelted: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.IsBelted false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.IsBelted Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.IsBelted VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.IsBelted is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.IsBelted is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.IsBelted is f2c9c2d624bb5cf4bf9aba5842eb96eb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.IsBelted …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/isbelted/","tags":"","title":"IsBelted"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged Description: Decrease massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsDecreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged is d1f9e86a98be5f2ca81ac11d05356bb6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/massage/isdecreaseengaged/","tags":"","title":"IsDecreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged Description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged is 09337347e2f557fe8649342548c7fe3c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/lumbar/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged Description: Head rest down switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsDownEngaged is 4d3d29ccfcde55f9bdf40eeeb7ecf5dc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/headrest/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged Description: Seat down switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged is fd41789d95035c2fa1e855d22eab80fa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged Description: Head rest forward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsForwardEngaged is ae9cdee6019a567ebac3e85a909fe7ca\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/headrest/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged Description: Is switch to increase seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged is f0ef5926752f573ea02dacb2a242c8a1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/seating/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged Description: Increase massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsIncreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged is 7b656c6aa62c5156aab2d437a03bd074\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/massage/isincreaseengaged/","tags":"","title":"IsIncreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged Description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged is 12fe41df5ab8545e8a3e7b2411585243\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/lumbar/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged Description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged is f5e3fae9d90954ad9a240b72fa0a5cb4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/sidebolster/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged Description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged is 73e6514d130e5bfb85d4cfb7c45d8138\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/lumbar/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged Description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a7dc6c8941805c47b837334abfa7abee\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/sidebolster/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied Description: Does the seat have a passenger in it. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eIsOccupied Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied [get] OK Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied is dc1eaa7cab895c5198af0c7f5dea9d79\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/isoccupied/","tags":"","title":"IsOccupied"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged Description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineBackwardEngaged is 0b5415702e0b5461afacea857c05a6fe\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/isreclinebackwardengaged/","tags":"","title":"IsReclineBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged Description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.IsReclineForwardEngaged is 1e1bbfda10e25d228e01a632277d57c3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/isreclineforwardengaged/","tags":"","title":"IsReclineForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Issuer is 6f4e6a9f8008536eae03197601a6366a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/occupant/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged Description: Tilt backward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsTiltBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged is 22726fefa40d5805b46b2c87e43782ed\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/istiltbackwardengaged/","tags":"","title":"IsTiltBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged Description: Tilt forward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsTiltForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged is f557b6a2712f5307b56577d93b9e746f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/istiltforwardengaged/","tags":"","title":"IsTiltForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged Description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged is 47f8690805455b8c927f2834942b2ded\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/lumbar/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged Description: Head rest up switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest.IsUpEngaged is f929508b3527553a959952bcd227f70e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/headrest/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged Description: Seat up switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged is 3dacf86cf185576f8a3916a315c69b1d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar Description: Switches for SingleSeat.Backrest.Lumbar. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar is 4dc489e632e15d13afd6601188ed08b3\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsDownEngaged (Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged (Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged (Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.Lumbar.IsUpEngaged (Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar Description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar is b69532b796ca54a1a897b28270fe0e56\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Height (Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar.Support (Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Lumbar …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage Description: Switches for SingleSeat.Massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eMassage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage is 4857aac12637502da76202384a151715\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsDecreaseEngaged (Decrease massage level switch engaged (SingleSeat.Massage).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage.IsIncreaseEngaged (Increase massage level switch engaged (SingleSeat.Massage).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Massage Description: Seat massage level. 0 = off. 100 = max massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eMassage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Massage [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Massage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Massage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Massage Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Massage VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Massage is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Massage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Massage is 77e8a4d481315520927fc0828158772e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Occupant Description: Occupant data. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eOccupant Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Occupant Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Occupant is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Occupant is 30e72777238850ff8a01c3a8f85b663e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier (Identifier attributes based on OAuth 2.0.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Occupant …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/occupant/","tags":"","title":"Occupant"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2 is e8afa112abe75fda9ce3e1f0d712713d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos2.Airbag (Airbag signals.) Vehicle.Cabin.Seat.Row2.Pos2.Backrest (Describes signals related to the backrest of the seat.) Vehicle.Cabin.Seat.Row2.Pos2.Headrest (Headrest settings.) Vehicle.Cabin.Seat.Row2.Pos2.Heating (Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.) Vehicle.Cabin.Seat.Row2.Pos2.Height (Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row2.Pos2.IsBelted (Is the belt engaged.) Vehicle.Cabin.Seat.Row2.Pos2.IsOccupied (Does the seat have a passenger in it.) Vehicle.Cabin.Seat.Row2.Pos2.Massage (Seat massage level. 0 = off. 100 = max massage.) Vehicle.Cabin.Seat.Row2.Pos2.Occupant (Occupant data.) Vehicle.Cabin.Seat.Row2.Pos2.Position (Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.) Vehicle.Cabin.Seat.Row2.Pos2.Seating (Describes signals related to the seat bottom of the seat.) Vehicle.Cabin.Seat.Row2.Pos2.Switch (Seat switch signals) Vehicle.Cabin.Seat.Row2.Pos2.Tilt (Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2 Description: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/","tags":"","title":"Pos2"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Position Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Position [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Position Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Position VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Position is 7c24fa880576550da14bae1e5eed26b9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Position …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline Description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline. Comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eRecline Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Backrest.Recline is b260c18880c75c92a635b9dc887fadca\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/backrest/recline/","tags":"","title":"Recline"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating Description: Describes switches related to the seating of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating is 1a3e7380e61852c98eda0f38e9f807aa\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsBackwardEngaged (Is switch to decrease seating length engaged (SingleSeat.Seating.Length).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating.IsForwardEngaged (Is switch to increase seating length engaged (SingleSeat.Seating.Length).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster Description: Switches for SingleSeat.Backrest.SideBolster. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster is 184e9cc9d42e5ec993593da10b1b8299\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged (Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged (Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Occupant.Identifier.Subject is ae49d70515d55aad9b4719d8162b43c9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/occupant/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Tilt Description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward. Comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos2 Pos2--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos2.Tilt [get] OK Vehicle.Cabin.Seat.Row2.Pos2.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos2.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos2.Tilt Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos2.Tilt VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Tilt is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos2.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos2.Tilt is 9f95869d8b0f5d9886bef2cc664414aa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos2.Tilt …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos2/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Airbag Description: Airbag signals. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eAirbag Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Airbag Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Airbag is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Airbag is ccfadedface05d54bcc00b30082b30d6\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed (Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Airbag …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/airbag/","tags":"","title":"Airbag"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle Description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eHeadrest Headrest--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle is 7a720646e0d657c5b10979f1c403eb4b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/headrest/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest Description: Describes signals related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest is 9e8063f29cf05c1892c1b5606fd05329\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar (Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.) Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline (Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.) Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster (Backrest side bolster (lumbar side support) settings.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Headrest Description: Headrest settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Headrest is d8486ab7d8195559a4e8e7baebb888ef\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Headrest.Angle (Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.) Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height (Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Heating Description: Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eHeating Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Heating [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Heating: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Heating 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Heating Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Heating VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Heating is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Heating is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Heating is 0f61ef421bcd5c8dbe6a5b477cb10a49\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Heating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/heating/","tags":"","title":"Heating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height Description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height is 6cdd33ee68a65349bd478c3afbc515c4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/lumbar/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height Description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eHeadrest Headrest--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height is 12d45094d6c9545089e932a2462d5f68\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Headrest.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/headrest/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Height Description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Height [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Height is 6e6e7aadfd0d52d4ac877147d84540d0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eOccupant Occupant--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier is aba17bf3b5175e56bf047839f2a0f880\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/occupant/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged Description: Seat backward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged is 57d1ff9eaf4e5a7cbe683c13eed6e691\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.IsBelted Description: Is the belt engaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eIsBelted Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.IsBelted [get] OK Vehicle.Cabin.Seat.Row2.Pos1.IsBelted: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.IsBelted false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.IsBelted Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.IsBelted VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.IsBelted is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.IsBelted is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.IsBelted is ad65078f81075a67babb66ecd2c902f7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.IsBelted …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/isbelted/","tags":"","title":"IsBelted"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged Description: Cooler switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsCoolerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged is ac1a8efdbafb561bb11af807d48e8378\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/iscoolerengaged/","tags":"","title":"IsCoolerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed Description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eAirbag Airbag--\u003eIsDeployed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Airbag.IsDeployed is fea5a0ef57385df68e486ece13546bdf\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/airbag/isdeployed/","tags":"","title":"IsDeployed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged Description: Seat forward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged is 33ed964275af591d85773bc23d70bd68\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied Description: Does the seat have a passenger in it. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eIsOccupied Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied [get] OK Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied is e8c5a3df63b15e8a83f0b16b6a77092f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/isoccupied/","tags":"","title":"IsOccupied"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Issuer is 188458a15b30577d8fb01d0f15641a6e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/occupant/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged Description: Warmer switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsWarmerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged is 97a36b155294512f8c409a9bc82635bc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/iswarmerengaged/","tags":"","title":"IsWarmerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length Description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSeating Seating--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length is 9eabbf5a69cd51c88de9e70eb9545750\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Seating.Length …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/seating/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar Description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar is 363835bd81535538a10acfe914f4c3cc\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Height (Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support (Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Massage Description: Seat massage level. 0 = off. 100 = max massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eMassage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Massage [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Massage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Massage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Massage Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Massage VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Massage is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Massage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Massage is 406607948a235d829c5da212594813b1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Occupant Description: Occupant data. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eOccupant Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Occupant Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Occupant is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Occupant is e7ab950f55b45b1a985f1a9d132aad02\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier (Identifier attributes based on OAuth 2.0.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Occupant …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/occupant/","tags":"","title":"Occupant"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1 is ba975a6536f15545851d27972ab1fffe\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Airbag (Airbag signals.) Vehicle.Cabin.Seat.Row2.Pos1.Backrest (Describes signals related to the backrest of the seat.) Vehicle.Cabin.Seat.Row2.Pos1.Headrest (Headrest settings.) Vehicle.Cabin.Seat.Row2.Pos1.Heating (Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.) Vehicle.Cabin.Seat.Row2.Pos1.Height (Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row2.Pos1.IsBelted (Is the belt engaged.) Vehicle.Cabin.Seat.Row2.Pos1.IsOccupied (Does the seat have a passenger in it.) Vehicle.Cabin.Seat.Row2.Pos1.Massage (Seat massage level. 0 = off. 100 = max massage.) Vehicle.Cabin.Seat.Row2.Pos1.Occupant (Occupant data.) Vehicle.Cabin.Seat.Row2.Pos1.Position (Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.) Vehicle.Cabin.Seat.Row2.Pos1.Seating (Describes signals related to the seat bottom of the seat.) Vehicle.Cabin.Seat.Row2.Pos1.Switch (Seat switch signals) Vehicle.Cabin.Seat.Row2.Pos1.Tilt (Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1 Description: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/","tags":"","title":"Pos1"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Position Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Position [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Position Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Position VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Position is 3dd247aae2555a1ebaf76ae4017f23bb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Position …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline Description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline. Comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eRecline Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Recline is 4e793f7e663558b29130989024763680\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/recline/","tags":"","title":"Recline"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Seating Description: Describes signals related to the seat bottom of the seat. Comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Seating is 8fb01973fdad529d83ebf60514cad67c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Seating.Length (Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster Description: Backrest side bolster (lumbar side support) settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster is 1484136aa6ec5a46b6f2449b9506a5dd\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support (Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Occupant.Identifier.Subject is 159e7daad966588ca48997859b811b72\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/occupant/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support Description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest.Lumbar.Support is f8fd42a3227d5c6a96834becd1247f5e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/lumbar/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support Description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Backrest.SideBolster.Support is 87cedae0f6ba58a0940859642b89fdb0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/backrest/sidebolster/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch Description: Seat switch signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eSwitch Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Switch Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Switch is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Switch is 1c4b708222de55aabddb3697308253ee\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1.Switch.Backrest (Describes switches related to the backrest of the seat.) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Headrest (Switches for SingleSeat.Headrest.) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsBackwardEngaged (Seat backward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsCoolerEngaged (Cooler switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsDownEngaged (Seat down switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsForwardEngaged (Seat forward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltBackwardEngaged (Tilt backward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsTiltForwardEngaged (Tilt forward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsUpEngaged (Seat up switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.IsWarmerEngaged (Warmer switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Massage (Switches for SingleSeat.Massage.) Vehicle.Cabin.Seat.Row2.Pos1.Switch.Seating (Describes switches related to the seating of the seat.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Switch …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Tilt Description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward. Comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Row2--\u003ePos1 Pos1--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row2.Pos1.Tilt [get] OK Vehicle.Cabin.Seat.Row2.Pos1.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row2.Pos1.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2.Pos1.Tilt Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row2.Pos1.Tilt VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Tilt is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row2.Pos1.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2.Pos1.Tilt is c61e74d2ae795b4da2e35325f8734005\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2.Pos1.Tilt …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/pos1/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest Description: Describes switches related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest is ad180dd9d2de56cf911dfc35d47c46fb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged (Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged (Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar (Switches for SingleSeat.Backrest.Lumbar.) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster (Switches for SingleSeat.Backrest.SideBolster.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest Description: Switches for SingleSeat.Headrest. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest is e04ee2c9d0f852c983136186bb15be4c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged (Head rest backward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged (Head rest down switch engaged (SingleSeat.Headrest.Height).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged (Head rest forward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged (Head rest up switch engaged (SingleSeat.Headrest.Height).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged Description: Head rest backward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsBackwardEngaged is cc633d8a000a5da3b0efe50e520e21fa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/headrest/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged Description: Seat backward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged is 52d8da88ec95586a93952ea3d59023ad\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged Description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged is b9829f44a76857e0bc9deeb036ecd311\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/seating/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged Description: Cooler switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsCoolerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged is f5ed89b2972e5461abb6966e30a906ff\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/iscoolerengaged/","tags":"","title":"IsCoolerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged Description: Decrease massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsDecreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged is 329dfaaab56f55a39ca9c132ee4bf533\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/massage/isdecreaseengaged/","tags":"","title":"IsDecreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed Description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eAirbag Airbag--\u003eIsDeployed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed is c4e9b66d938d5e188ac577094daaf37e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/airbag/isdeployed/","tags":"","title":"IsDeployed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged Description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged is 9a3655967c5b5f058e01c0b3770ba0d3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/lumbar/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged Description: Head rest down switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsDownEngaged is 4ed2d91060bf5e578746b4b2f5a3e671\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/headrest/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged Description: Seat down switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged is 66e1d88d56ba572db7b97a5e20cc724c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged Description: Head rest forward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsForwardEngaged is 6ad93c92d96a59838e4810f0425f1fb0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/headrest/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged Description: Seat forward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged is a3661e29e11957ed9cc12bb385b896bf\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged Description: Is switch to increase seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged is c8ab873dd8fb51dd9493fb00f33e01d6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/seating/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged Description: Increase massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsIncreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged is 6d09e331ceb55a2691f120a6f1205cbb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/massage/isincreaseengaged/","tags":"","title":"IsIncreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged Description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged is 0f0708693e605289af83c3a1ecfd3159\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/lumbar/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged Description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged is 53a56a868fb3593fb21378b2d4dbbc7c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/sidebolster/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged Description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged is 6d590f0db798515b8d8e6f0bf1abfd67\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/lumbar/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged Description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged is 05b0ef6b02e55bb2814bcd95d9b77bd9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/sidebolster/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged Description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineBackwardEngaged is 1861981891f959dc896e00f4e369c86d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/isreclinebackwardengaged/","tags":"","title":"IsReclineBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged Description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.IsReclineForwardEngaged is 2a8cc40fb0b3556da210b7dfce7c0c6d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/isreclineforwardengaged/","tags":"","title":"IsReclineForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged Description: Tilt backward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsTiltBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged is ed590c68f1085a3c9889fc571ace2176\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/istiltbackwardengaged/","tags":"","title":"IsTiltBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged Description: Tilt forward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsTiltForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged is 8eeefcb4a08e5d9f8eae76e92826e56e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/istiltforwardengaged/","tags":"","title":"IsTiltForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged Description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged is 663dca40a7645e66adfa00d64223dbbe\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/lumbar/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged Description: Head rest up switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest.IsUpEngaged is 89b2444c58c457bd936ecef543e7cc96\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/headrest/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged Description: Seat up switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged is 1240dc083504580b97ba1cfadb9da659\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged Description: Warmer switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eIsWarmerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged is 0d7eed9ccb24537fb7f97f0163a4fdd8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/iswarmerengaged/","tags":"","title":"IsWarmerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar Description: Switches for SingleSeat.Backrest.Lumbar. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar is 08b8112168d1584ab6fa8f594016745f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsDownEngaged (Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsLessSupportEngaged (Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsMoreSupportEngaged (Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.Lumbar.IsUpEngaged (Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage Description: Switches for SingleSeat.Massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eMassage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage is a2c4a3a39758594d9e89a635bab499cb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsDecreaseEngaged (Decrease massage level switch engaged (SingleSeat.Massage).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage.IsIncreaseEngaged (Increase massage level switch engaged (SingleSeat.Massage).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row2 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row2 is 8c3aaf015ef8595cb45d9461a9c1195f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row2.Pos1 (All seats.) Vehicle.Cabin.Seat.Row2.Pos2 (All seats.) Vehicle.Cabin.Seat.Row2.Pos3 (All seats.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row2 Description: All …","ref":"/leda/docs/vss/vehicle/cabin/seat/row2/","tags":"","title":"Row2"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating Description: Describes switches related to the seating of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating is b1ff7876dbab59f2bf7358c932a7e1fb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsBackwardEngaged (Is switch to decrease seating length engaged (SingleSeat.Seating.Length).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating.IsForwardEngaged (Is switch to increase seating length engaged (SingleSeat.Seating.Length).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster Description: Switches for SingleSeat.Backrest.SideBolster. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster is 46c9fbf2750b517f8d1c09fee21fdd06\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsLessSupportEngaged (Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest.SideBolster.IsMoreSupportEngaged (Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch Description: Seat switch signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSwitch Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Switch Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Switch is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Switch is 1eda245135ce5788bfcbc75b082af947\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Switch.Backrest (Describes switches related to the backrest of the seat.) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Headrest (Switches for SingleSeat.Headrest.) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsBackwardEngaged (Seat backward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsCoolerEngaged (Cooler switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsDownEngaged (Seat down switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsForwardEngaged (Seat forward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltBackwardEngaged (Tilt backward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsTiltForwardEngaged (Tilt forward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsUpEngaged (Seat up switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.IsWarmerEngaged (Warmer switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Massage (Switches for SingleSeat.Massage.) Vehicle.Cabin.Seat.Row1.Pos3.Switch.Seating (Describes switches related to the seating of the seat.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Switch …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Airbag Description: Airbag signals. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eAirbag Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Airbag Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Airbag is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Airbag is 243d103c16055180abef52fef071ad22\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Airbag.IsDeployed (Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Airbag …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/airbag/","tags":"","title":"Airbag"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle Description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eHeadrest Headrest--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle is b4d77cf7a7f55768b3910435e79027f2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/headrest/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest Description: Describes signals related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest is ce7b00453a0a53d3b6e6cbc395bd5c78\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar (Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.) Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline (Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.) Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster (Backrest side bolster (lumbar side support) settings.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Headrest Description: Headrest settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Headrest is 1714ccbc269f59ee807a51c7f1a6103b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Headrest.Angle (Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.) Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height (Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Heating Description: Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eHeating Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Heating [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Heating: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Heating 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Heating Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Heating VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Heating is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Heating is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Heating is 4af67468dd7a55a58195d9b61997d077\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Heating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/heating/","tags":"","title":"Heating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height Description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height is 4a529381905750be9c09a1bfec05eabd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/lumbar/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height Description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eHeadrest Headrest--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height is 420eaf9bc7ac5560a26ad018afe27e1b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Headrest.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/headrest/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Height Description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Height is d19199de59a153f782b8d61788c510a7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eOccupant Occupant--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier is f59d9531974256cab958e5e31588565d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/occupant/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged Description: Head rest backward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged is 556de341eb5052489018ae6ff95310e2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/headrest/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.IsBelted Description: Is the belt engaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eIsBelted Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.IsBelted [get] OK Vehicle.Cabin.Seat.Row1.Pos3.IsBelted: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.IsBelted false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.IsBelted Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.IsBelted VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.IsBelted is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.IsBelted is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.IsBelted is 975fe66f9fa05d8ca7fb9d334641bb97\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.IsBelted …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/isbelted/","tags":"","title":"IsBelted"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged Description: Decrease massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsDecreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged is b655bf7a99015d638a6d7177aa6d89e9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/massage/isdecreaseengaged/","tags":"","title":"IsDecreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged Description: Head rest down switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged is 2245feeb2eeb54e3b9303bc2dc232de6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/headrest/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged Description: Head rest forward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged is 39e5e43777ab5af9ba972a6da265a4f1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/headrest/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged Description: Increase massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsIncreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged is 8d81938f575756199e1c604f6a51677e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/massage/isincreaseengaged/","tags":"","title":"IsIncreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied Description: Does the seat have a passenger in it. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eIsOccupied Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied [get] OK Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied is 1540906a83bd5f70af4859910aafd890\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/isoccupied/","tags":"","title":"IsOccupied"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Issuer is 0d29fa2a1b97563c8e1ba31b8571f328\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/occupant/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length Description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSeating Seating--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length is c44b283345dd5a428bd099ed1153d4a4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Seating.Length …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/seating/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar Description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar is 678e3d997c295575ba6337464fe2a912\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Height (Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support (Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage Description: Switches for SingleSeat.Massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eMassage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage is 82f1b4ee3b9c58998115117f6e8c39a7\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsDecreaseEngaged (Decrease massage level switch engaged (SingleSeat.Massage).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage.IsIncreaseEngaged (Increase massage level switch engaged (SingleSeat.Massage).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Massage Description: Seat massage level. 0 = off. 100 = max massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eMassage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Massage [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Massage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Massage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Massage Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Massage VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Massage is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Massage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Massage is d63d68381ec65f50a8dd6dfbc0bd751d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Occupant Description: Occupant data. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eOccupant Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Occupant Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Occupant is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Occupant is 4e68d3feef825f6f99c44cec9f7c1217\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier (Identifier attributes based on OAuth 2.0.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Occupant …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/occupant/","tags":"","title":"Occupant"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3 is add6f181ffd35d03b57d9833e7e22f4f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Airbag (Airbag signals.) Vehicle.Cabin.Seat.Row1.Pos3.Backrest (Describes signals related to the backrest of the seat.) Vehicle.Cabin.Seat.Row1.Pos3.Headrest (Headrest settings.) Vehicle.Cabin.Seat.Row1.Pos3.Heating (Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.) Vehicle.Cabin.Seat.Row1.Pos3.Height (Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row1.Pos3.IsBelted (Is the belt engaged.) Vehicle.Cabin.Seat.Row1.Pos3.IsOccupied (Does the seat have a passenger in it.) Vehicle.Cabin.Seat.Row1.Pos3.Massage (Seat massage level. 0 = off. 100 = max massage.) Vehicle.Cabin.Seat.Row1.Pos3.Occupant (Occupant data.) Vehicle.Cabin.Seat.Row1.Pos3.Position (Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.) Vehicle.Cabin.Seat.Row1.Pos3.Seating (Describes signals related to the seat bottom of the seat.) Vehicle.Cabin.Seat.Row1.Pos3.Switch (Seat switch signals) Vehicle.Cabin.Seat.Row1.Pos3.Tilt (Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3 Description: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/","tags":"","title":"Pos3"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Position Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Position [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Position Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Position VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Position is 2a2ba0e42dcc563cba80cc491b66c45f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Position …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline Description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline. Comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eRecline Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Recline is dc901384498f5de6b93b2a5b3850fb87\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/recline/","tags":"","title":"Recline"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Seating Description: Describes signals related to the seat bottom of the seat. Comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Seating is 4c98bb65b4095480bdc7262b902a767a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Seating.Length (Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster Description: Backrest side bolster (lumbar side support) settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster is 605ae18d7b4e5613ac7252ee35df58c1\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support (Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Occupant.Identifier.Subject is a7306a24de2155f2a1de070bc8f1bd60\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/occupant/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support Description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest.Lumbar.Support is 127744c26ebe5c729d69a95bfe96b00e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/lumbar/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support Description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Backrest.SideBolster.Support is dba595a898b75345bf1d013a45261681\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/backrest/sidebolster/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Tilt Description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward. Comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos3 Pos3--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos3.Tilt [get] OK Vehicle.Cabin.Seat.Row1.Pos3.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos3.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos3.Tilt Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos3.Tilt VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Tilt is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos3.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos3.Tilt is 9fb74b71b3ce54f4af6e5e472f159949\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos3.Tilt …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos3/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Airbag Description: Airbag signals. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eAirbag Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Airbag Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Airbag is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Airbag is 8150bc56e95453f4be691ee05241fa1a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed (Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Airbag …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/airbag/","tags":"","title":"Airbag"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle Description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eHeadrest Headrest--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle is 73491bcc68d850849cd6cbb7c2d4fdb1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/headrest/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest Description: Describes switches related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest is 79b1c57ac9245a5ca426a8b5e21717a6\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged (Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged (Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar (Switches for SingleSeat.Backrest.Lumbar.) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster (Switches for SingleSeat.Backrest.SideBolster.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Headrest Description: Headrest settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Headrest is 8a6f8868590653b7adce26541a66e531\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Headrest.Angle (Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.) Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height (Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest Description: Switches for SingleSeat.Headrest. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest is 250bfde61cbe52659913655dd521fa0f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsBackwardEngaged (Head rest backward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsDownEngaged (Head rest down switch engaged (SingleSeat.Headrest.Height).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsForwardEngaged (Head rest forward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged (Head rest up switch engaged (SingleSeat.Headrest.Height).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height Description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height is 3c282a3edb5c504e83f32ba674c3d0fc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/lumbar/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height Description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eHeadrest Headrest--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height is 2d8573879aaa5b28bcdf425c82bc6aa2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Headrest.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/headrest/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged Description: Seat backward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged is 861eca7954cb554e9fb8a21568126e10\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged Description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged is e6d761d8e77651dab939076cdc8bd529\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/seating/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged Description: Cooler switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsCoolerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged is d3e2606f6cdc57759850f19e1ce8c4f2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/iscoolerengaged/","tags":"","title":"IsCoolerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed Description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eAirbag Airbag--\u003eIsDeployed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Airbag.IsDeployed is d65c423837db53ebbfd462ead6c92687\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/airbag/isdeployed/","tags":"","title":"IsDeployed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged Description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged is 3491b91384f95975851e64636514f52f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/lumbar/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged Description: Seat down switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged is 7da73beabcbc5f338bc68e9b5e3daf06\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged Description: Seat forward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged is 28ff94d05f795705928644e5a0101e8b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged Description: Is switch to increase seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged is 4081bab44a1d5da1b70a5dc158f2ae39\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/seating/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged Description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged is af092a25f40a5003b7354f5f580b0e11\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/lumbar/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged Description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged is 5e6fa87ef4fd563d97299bc2d88300d1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/sidebolster/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged Description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged is 1ae05b08ed295d4f8305abc26088cca2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/lumbar/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged Description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged is 33b758ca51f15403a398ef3072dcaae2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/sidebolster/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged Description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineBackwardEngaged is 524f91af31e150b8aca5de230369be7f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/isreclinebackwardengaged/","tags":"","title":"IsReclineBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged Description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.IsReclineForwardEngaged is e5bd5743807c5b899098d22e6cc3a4bc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/isreclineforwardengaged/","tags":"","title":"IsReclineForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged Description: Tilt backward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsTiltBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged is 0482452fd1a3501d96e06ee7c5dba6dd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/istiltbackwardengaged/","tags":"","title":"IsTiltBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged Description: Tilt forward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsTiltForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged is d0433b6d2d965fecb9384ac5205de397\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/istiltforwardengaged/","tags":"","title":"IsTiltForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged Description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged is da6a3f596a5c5db2b5984356087278d4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/lumbar/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged Description: Head rest up switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest.IsUpEngaged is f182830bd5955b85b8e755895d578b03\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/headrest/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged Description: Seat up switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged is 3906c493560e5c5686c69f0d2aa65e91\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged Description: Warmer switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eIsWarmerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged is 61eb1ede01d45ff2a6a4eec903741a08\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/iswarmerengaged/","tags":"","title":"IsWarmerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length Description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSeating Seating--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length is cef5936e042158fd9259018d9895b860\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Seating.Length …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/seating/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar Description: Switches for SingleSeat.Backrest.Lumbar. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar is b05d8f4aa67c5e28af3a6dc957786834\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsDownEngaged (Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsLessSupportEngaged (Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsMoreSupportEngaged (Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.Lumbar.IsUpEngaged (Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Seating Description: Describes signals related to the seat bottom of the seat. Comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Seating is ce6a7323a8b45ef8aef48bfce9704dec\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Seating.Length (Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating Description: Describes switches related to the seating of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating is de12f83c5e425b6b9a9ef9e90b030fda\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsBackwardEngaged (Is switch to decrease seating length engaged (SingleSeat.Seating.Length).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating.IsForwardEngaged (Is switch to increase seating length engaged (SingleSeat.Seating.Length).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster Description: Backrest side bolster (lumbar side support) settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster is 2435afb459d85aa49907dcfcf0adc3f5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support (Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster Description: Switches for SingleSeat.Backrest.SideBolster. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster is 07ff192c99275f8e88451c79ceb7aa03\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsLessSupportEngaged (Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest.SideBolster.IsMoreSupportEngaged (Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support Description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster.Support is 63d6501d545350d7bd98d377bf43c45d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/sidebolster/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch Description: Seat switch signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eSwitch Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Switch Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Switch is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Switch is dd54a1a61c7c5d79a420edb7b1755aa1\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Switch.Backrest (Describes switches related to the backrest of the seat.) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Headrest (Switches for SingleSeat.Headrest.) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsBackwardEngaged (Seat backward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsCoolerEngaged (Cooler switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsDownEngaged (Seat down switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsForwardEngaged (Seat forward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltBackwardEngaged (Tilt backward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsTiltForwardEngaged (Tilt forward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsUpEngaged (Seat up switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.IsWarmerEngaged (Warmer switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Massage (Switches for SingleSeat.Massage.) Vehicle.Cabin.Seat.Row1.Pos2.Switch.Seating (Describes switches related to the seating of the seat.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Switch …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest Description: Describes signals related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest is a53f27317a3e5a7c8a0ed7df44c4e0b0\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar (Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.) Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline (Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.) Vehicle.Cabin.Seat.Row1.Pos2.Backrest.SideBolster (Backrest side bolster (lumbar side support) settings.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest Description: Switches for SingleSeat.Headrest. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest is e3d3659aed435d7c9bb58bad03590d3a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged (Head rest backward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged (Head rest down switch engaged (SingleSeat.Headrest.Height).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged (Head rest forward switch engaged (SingleSeat.Headrest.Angle).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged (Head rest up switch engaged (SingleSeat.Headrest.Height).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Heating Description: Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eHeating Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Heating [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Heating: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Heating 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Heating Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Heating VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Heating is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Heating is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Heating is eae672cc71dc5046bf1bdef59b8cd980\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Heating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/heating/","tags":"","title":"Heating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Height Description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Height is fc3b3498a15c5417aadbbce4f758a6d5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eOccupant Occupant--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier is ac22e6c5d43053b383f14c6b712b0698\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/occupant/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged Description: Head rest backward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsBackwardEngaged is 6ec4a46af3db57cc9d4c45923996923c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/headrest/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged Description: Is switch to decrease seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged is b623d9fd81d658c7a4872550065a26f0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/seating/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.IsBelted Description: Is the belt engaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eIsBelted Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.IsBelted [get] OK Vehicle.Cabin.Seat.Row1.Pos2.IsBelted: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.IsBelted false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.IsBelted Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.IsBelted VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.IsBelted is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.IsBelted is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.IsBelted is ee2919e0ffdd5a939a1b86b570c14112\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.IsBelted …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/isbelted/","tags":"","title":"IsBelted"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged Description: Decrease massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsDecreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged is c6209e1fd41e5efbbe3b70910068533b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/massage/isdecreaseengaged/","tags":"","title":"IsDecreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged Description: Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged is 01644b70287d5d1ba9a2f0c9770dadb8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/lumbar/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged Description: Head rest down switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsDownEngaged is 0d844cc3591453b48177a3ed45880e21\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/headrest/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged Description: Head rest forward switch engaged (SingleSeat.Headrest.Angle). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsForwardEngaged is ca96e4f18b1753faab74e2d4c452d8df\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/headrest/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged Description: Is switch to increase seating length engaged (SingleSeat.Seating.Length). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eSeating Seating--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged is 8ef4c44f8e42567f89c1ff54dd337e91\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/seating/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged Description: Increase massage level switch engaged (SingleSeat.Massage). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eMassage Massage--\u003eIsIncreaseEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged is 3500d7caafe458e19dac56fcff1ada61\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/massage/isincreaseengaged/","tags":"","title":"IsIncreaseEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged Description: Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged is 757b1f58b4c558429b1d3f11f1a89e6f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/lumbar/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged Description: Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsLessSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged is cc76940524925bf3883918b8ee30d702\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/sidebolster/islesssupportengaged/","tags":"","title":"IsLessSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged Description: Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged is 3542721cf4cc5d8c86e9f8e4a3f36736\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/lumbar/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged Description: Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eIsMoreSupportEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged is 515bd1ca932a5747b8f8523aa5e26466\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/sidebolster/ismoresupportengaged/","tags":"","title":"IsMoreSupportEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied Description: Does the seat have a passenger in it. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eIsOccupied Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied [get] OK Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied is 4d0cdff266e45dd2a8a878b572d34b7e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/isoccupied/","tags":"","title":"IsOccupied"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Issuer is f88bffa4714d57f8b61b1034c57190ff\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/occupant/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged Description: Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged is ceceff9c973453d3bec25db6a56be86c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/lumbar/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged Description: Head rest up switch engaged (SingleSeat.Headrest.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eHeadrest Headrest--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest.IsUpEngaged is a603834c5eae54a78222d20515bd64df\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/headrest/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar Description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar is 26c099ebe82b5131abd9dd9af4ae9eeb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Height (Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support (Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage Description: Switches for SingleSeat.Massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eMassage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage is 46a23e294875537d9ce222d748dd43ef\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsDecreaseEngaged (Decrease massage level switch engaged (SingleSeat.Massage).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage.IsIncreaseEngaged (Increase massage level switch engaged (SingleSeat.Massage).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Massage Description: Seat massage level. 0 = off. 100 = max massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eMassage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Massage [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Massage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Massage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Massage Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Massage VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Massage is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Massage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Massage is c1935863d503574fb5d20b703974399c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Occupant Description: Occupant data. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eOccupant Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Occupant Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Occupant is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Occupant is d85baab0f292585b912fd8ba8eae234f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier (Identifier attributes based on OAuth 2.0.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Occupant …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/occupant/","tags":"","title":"Occupant"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2 is 614cecf6380d5c23989d2c8bf20bd8c3\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos2.Airbag (Airbag signals.) Vehicle.Cabin.Seat.Row1.Pos2.Backrest (Describes signals related to the backrest of the seat.) Vehicle.Cabin.Seat.Row1.Pos2.Headrest (Headrest settings.) Vehicle.Cabin.Seat.Row1.Pos2.Heating (Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.) Vehicle.Cabin.Seat.Row1.Pos2.Height (Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row1.Pos2.IsBelted (Is the belt engaged.) Vehicle.Cabin.Seat.Row1.Pos2.IsOccupied (Does the seat have a passenger in it.) Vehicle.Cabin.Seat.Row1.Pos2.Massage (Seat massage level. 0 = off. 100 = max massage.) Vehicle.Cabin.Seat.Row1.Pos2.Occupant (Occupant data.) Vehicle.Cabin.Seat.Row1.Pos2.Position (Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.) Vehicle.Cabin.Seat.Row1.Pos2.Seating (Describes signals related to the seat bottom of the seat.) Vehicle.Cabin.Seat.Row1.Pos2.Switch (Seat switch signals) Vehicle.Cabin.Seat.Row1.Pos2.Tilt (Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2 Description: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/","tags":"","title":"Pos2"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Position Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Position [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Position Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Position VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Position is f14a3e9eaaf35012a8be3782b6a53f55\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Position …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline Description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline. Comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eRecline Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Recline is a30da9db6ae45d4d80fbd81952d94479\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/recline/","tags":"","title":"Recline"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating Description: Describes switches related to the seating of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating is 250088210ce059c7a262331242ef1408\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsBackwardEngaged (Is switch to decrease seating length engaged (SingleSeat.Seating.Length).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating.IsForwardEngaged (Is switch to increase seating length engaged (SingleSeat.Seating.Length).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster Description: Switches for SingleSeat.Backrest.SideBolster. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster is b49b7c0aa3135e209bb7888e143a6823\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsLessSupportEngaged (Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster.IsMoreSupportEngaged (Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Occupant.Identifier.Subject is f8f67096b9e35197a3e199e9171c4872\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/occupant/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support Description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Backrest.Lumbar.Support is 049baabba96d52a5b1936acc45cb6e2c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/backrest/lumbar/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Tilt Description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward. Comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos2 Pos2--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos2.Tilt [get] OK Vehicle.Cabin.Seat.Row1.Pos2.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos2.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos2.Tilt Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos2.Tilt VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Tilt is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos2.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos2.Tilt is 6156f12b768e56929c7d325c4bbe1d78\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos2.Tilt …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos2/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Airbag Description: Airbag signals. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eAirbag Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Airbag Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Airbag is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Airbag is 51c12c552b745ead85e10392cd42791f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed (Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Airbag …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/airbag/","tags":"","title":"Airbag"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle Description: Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eHeadrest Headrest--\u003eAngle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle is a438c09436955cdd859b08848642464e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/headrest/angle/","tags":"","title":"Angle"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest Description: Describes signals related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest is b088e24466215c55b4e3b1ca84321fb9\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar (Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape.) Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline (Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.) Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster (Backrest side bolster (lumbar side support) settings.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest Description: Describes switches related to the backrest of the seat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest is b45a8ec5ab9251689f42d58d2d954c4e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged (Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged (Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar (Switches for SingleSeat.Backrest.Lumbar.) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.SideBolster (Switches for SingleSeat.Backrest.SideBolster.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/","tags":"","title":"Backrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Headrest Description: Headrest settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eHeadrest Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Headrest Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Headrest is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Headrest is 1b08f767214753648ce939fc23e7d530\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Headrest.Angle (Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.) Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height (Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Headrest …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/headrest/","tags":"","title":"Headrest"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Heating Description: Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eHeating Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Heating [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Heating: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Heating 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Heating Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Heating VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Heating is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Heating is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Heating is 6055f646e52c58959fe7c89e7e5e77df\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Heating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/heating/","tags":"","title":"Heating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height Description: Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height is 2093f65ca1085a8fab20837e00218461\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/lumbar/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height Description: Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eHeadrest Headrest--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height is 04fbc8b58fb1507ca46e133f502212a8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Headrest.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/headrest/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Height Description: Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Height [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Height Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Height is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Height is a28e02777f0652c09282c639b2ab0a63\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Height …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier Description: Identifier attributes based on OAuth 2.0. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eOccupant Occupant--\u003eIdentifier Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier is 473c3f152df7564589d0e09947ae428f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer (Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com.) Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject (Subject for the authentication of the occupant. E.g. UserID 7331677.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/occupant/identifier/","tags":"","title":"Identifier"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged Description: Seat backward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged is 6a28f8e404f05a5b9339b3a40b8c0275\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/isbackwardengaged/","tags":"","title":"IsBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.IsBelted Description: Is the belt engaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eIsBelted Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.IsBelted [get] OK Vehicle.Cabin.Seat.Row1.Pos1.IsBelted: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.IsBelted false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.IsBelted Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.IsBelted VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.IsBelted is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.IsBelted is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.IsBelted is 6bd16a2258d152919db77e9592ac837a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.IsBelted …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/isbelted/","tags":"","title":"IsBelted"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged Description: Cooler switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsCoolerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged is abab10f2fc1753fc9276f4571d24b3ac\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/iscoolerengaged/","tags":"","title":"IsCoolerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed Description: Airbag deployment status. True = Airbag deployed. False = Airbag not deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eAirbag Airbag--\u003eIsDeployed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Airbag.IsDeployed is 49cc2754a4385ef8bdd8ba4e81ae91f6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/airbag/isdeployed/","tags":"","title":"IsDeployed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged Description: Seat down switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsDownEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged is 2f758e9b09dc518693db398d31551eeb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/isdownengaged/","tags":"","title":"IsDownEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged Description: Seat forward switch engaged (SingleSeat.Position). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged is 849766f5f3885f9ba0c4cd817290b6a1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/isforwardengaged/","tags":"","title":"IsForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged Description: Backrest recline backward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineBackwardEngaged is d21af34f33955fdf8a35b2909f1db5ae\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/isreclinebackwardengaged/","tags":"","title":"IsReclineBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged Description: Backrest recline forward switch engaged (SingleSeat.Backrest.Recline). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eIsReclineForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.IsReclineForwardEngaged is fd1e56d716d2594b84e1c46b00ab47a5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/isreclineforwardengaged/","tags":"","title":"IsReclineForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer Description: Unique Issuer for the authentication of the occupant. E.g. https://accounts.funcorp.com. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eIssuer Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Issuer is c631b08751b851ec9b12ade8332ba5e6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/occupant/identifier/issuer/","tags":"","title":"Issuer"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged Description: Tilt backward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsTiltBackwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged is 810dfaf2b68950e7b695efbfdd80f58a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/istiltbackwardengaged/","tags":"","title":"IsTiltBackwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged Description: Tilt forward switch engaged (SingleSeat.Tilt). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsTiltForwardEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged is ee55f014fe5c59c8a3808f64b0c51f9e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/istiltforwardengaged/","tags":"","title":"IsTiltForwardEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged Description: Seat up switch engaged (SingleSeat.Height). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsUpEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged is efb6bf4955d45232b8443c3428ec91c2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/isupengaged/","tags":"","title":"IsUpEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged Description: Warmer switch for Seat heater (SingleSeat.Heating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eIsWarmerEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged is f60421d441985b5bb8f68fabae1e937a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/iswarmerengaged/","tags":"","title":"IsWarmerEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length Description: Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating). Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSeating Seating--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length is 365425c0104757ae9d14c29c0cc61f78\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Seating.Length …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/seating/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar Description: Adjustable lumbar support mechanisms in seats allow the user to change the seat back shape. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar is 58ce084f42255af281ba9827af2f69de\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Height (Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support (Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar Description: Switches for SingleSeat.Backrest.Lumbar. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Switch--\u003eBackrest Backrest--\u003eLumbar Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar is 61bb2068d2355dad9ab5ef35709ce97a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsDownEngaged (Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsLessSupportEngaged (Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsMoreSupportEngaged (Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest.Lumbar.IsUpEngaged (Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/backrest/lumbar/","tags":"","title":"Lumbar"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Massage Description: Seat massage level. 0 = off. 100 = max massage. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eMassage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Massage [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Massage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Massage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Massage Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Massage VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Massage is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Massage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Massage is 0e668142a0855c31845050e3535ff1b3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Massage …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/massage/","tags":"","title":"Massage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Position Description: Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Position [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Position Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Position VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Position is 78283eb5efee58f8bce8b5fa3760df54\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Position …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline Description: Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline. Comment: Seat z-axis depends on seat tilt. This means that movement of backrest due to seat tilting will not affect Backrest.Recline as long as the angle between Seating and Backrest are constant. Absolute recline relative to vehicle z-axis can be calculated as Tilt + Backrest.Recline. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eRecline Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Recline is b1d538f0eb1658639e64f024e1a42831\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/recline/","tags":"","title":"Recline"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Seating Description: Describes signals related to the seat bottom of the seat. Comment: Seating is here considered as the part of the seat that supports the thighs. Additional cushions (if any) for support of lower legs is not covered by this branch. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSeating Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Seating Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Seating is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Seating is 0cfad6a333b651f4b3adc589a19bd8c2\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Seating.Length (Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Seating …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/seating/","tags":"","title":"Seating"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster Description: Backrest side bolster (lumbar side support) settings. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eSideBolster Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster is dc92cbf22f7a54bca076ca9e64dde9e6\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support (Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/sidebolster/","tags":"","title":"SideBolster"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject Description: Subject for the authentication of the occupant. E.g. UserID 7331677. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eOccupant Occupant--\u003eIdentifier Identifier--\u003eSubject Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier.Subject is 8df99b3fedff5a219eacf254fb299ffb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/occupant/identifier/subject/","tags":"","title":"Subject"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support Description: Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eLumbar Lumbar--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest.Lumbar.Support is c072a2f72b9554b2b45d81a352bc48ad\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/lumbar/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support Description: Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eBackrest Backrest--\u003eSideBolster SideBolster--\u003eSupport Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Backrest.SideBolster.Support is b9a59ddb83995d6381d38ebdd19fb4b9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/backrest/sidebolster/support/","tags":"","title":"Support"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch Description: Seat switch signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eSwitch Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Switch Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Switch is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Switch is 6aeff0a2d48f5f28995f83cc5ada057d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Switch.Backrest (Describes switches related to the backrest of the seat.) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Headrest (Switches for SingleSeat.Headrest.) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsBackwardEngaged (Seat backward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsCoolerEngaged (Cooler switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsDownEngaged (Seat down switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsForwardEngaged (Seat forward switch engaged (SingleSeat.Position).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltBackwardEngaged (Tilt backward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsTiltForwardEngaged (Tilt forward switch engaged (SingleSeat.Tilt).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsUpEngaged (Seat up switch engaged (SingleSeat.Height).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.IsWarmerEngaged (Warmer switch for Seat heater (SingleSeat.Heating).) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Massage (Switches for SingleSeat.Massage.) Vehicle.Cabin.Seat.Row1.Pos1.Switch.Seating (Describes switches related to the seating of the seat.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Switch …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Tilt Description: Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward. Comment: In VSS it is assumed that tilting a seat affects both seating (seat bottom) and backrest, i.e. the angle between seating and backrest will not be affected when changing Tilt. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.Tilt [get] OK Vehicle.Cabin.Seat.Row1.Pos1.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Tilt Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.Tilt VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Tilt is an Actuator.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Tilt is 20630968a82f53bc89aed9797e0b9c59\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Tilt …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Cabin.DoorCount Description: Number of doors in vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoorCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.DoorCount [get] OK Vehicle.Cabin.DoorCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.DoorCount 4 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.DoorCount Data Type \u0026 Unit Path Vehicle.Cabin.DoorCount VSS: Addressing nodes Data type uint8 VSS: Datatypes Default value 4 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.DoorCount is an Attribute.\nThe vehicle signal Vehicle.Cabin.DoorCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.DoorCount is c293fbef75725c57a9918dd5a34055c4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.DoorCount Description: Number …","ref":"/leda/docs/vss/vehicle/cabin/doorcount/","tags":"","title":"DoorCount"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.IsChildLockActive Description: Is door child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eIsChildLockActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.IsChildLockActive [get] OK Vehicle.Cabin.Door.Row2.Left.IsChildLockActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.IsChildLockActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.IsChildLockActive Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.IsChildLockActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.IsChildLockActive is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.IsChildLockActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.IsChildLockActive is 1c08760700ca5814a62bac4e64628f8e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/ischildlockactive/","tags":"","title":"IsChildLockActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.IsChildLockActive Description: Is door child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eIsChildLockActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.IsChildLockActive [get] OK Vehicle.Cabin.Door.Row2.Right.IsChildLockActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.IsChildLockActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.IsChildLockActive Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.IsChildLockActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.IsChildLockActive is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.IsChildLockActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.IsChildLockActive is c3747fdce0835d9abf8030917f3a6d3c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/ischildlockactive/","tags":"","title":"IsChildLockActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged Description: Is window child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eWindow Window--\u003eIsChildLockEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged [get] OK Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged is f41454131c6d502da452e1b1436e20c1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/window/ischildlockengaged/","tags":"","title":"IsChildLockEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged Description: Is window child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eWindow Window--\u003eIsChildLockEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged [get] OK Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged is 6f018766950a5b5284ac1e8824fdacb0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/window/ischildlockengaged/","tags":"","title":"IsChildLockEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.IsLocked Description: Is door locked or unlocked. True = Locked. False = Unlocked. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eIsLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.IsLocked [get] OK Vehicle.Cabin.Door.Row2.Right.IsLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.IsLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.IsLocked Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.IsLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.IsLocked is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.IsLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.IsLocked is 51e82637cc1a5c6994e1928402a29419\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.IsLocked …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/islocked/","tags":"","title":"IsLocked"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied Description: Does the seat have a passenger in it. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eIsOccupied Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied [get] OK Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied Data Type \u0026 Unit Path Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied is a Sensor.\nThe vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied is 4e85e2b0ec45582f90f2a17b3636ccc0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/isoccupied/","tags":"","title":"IsOccupied"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.IsOpen Description: Is door open or closed Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.IsOpen [get] OK Vehicle.Cabin.Door.Row2.Right.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.IsOpen is 06f3b61e354f5db7b5b0e7f551fac582\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window.IsOpen Description: Is window open or closed? Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eWindow Window--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.Window.IsOpen [get] OK Vehicle.Cabin.Door.Row2.Right.Window.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.Window.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Window.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.Window.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.IsOpen is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Window.IsOpen is 793b5c94b89f5e11bc71cc8a6de8ec34\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/window/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Occupant Description: Occupant data. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Pos1--\u003eOccupant Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1.Occupant Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1.Occupant is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1.Occupant is e2303f18abb35b25932e97165858fa2e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Occupant.Identifier (Identifier attributes based on OAuth 2.0.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1.Occupant …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/occupant/","tags":"","title":"Occupant"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Row1--\u003ePos1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1.Pos1 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1.Pos1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1.Pos1 is 9f570421f00a53f19f3741bd4e53303b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1.Airbag (Airbag signals.) Vehicle.Cabin.Seat.Row1.Pos1.Backrest (Describes signals related to the backrest of the seat.) Vehicle.Cabin.Seat.Row1.Pos1.Headrest (Headrest settings.) Vehicle.Cabin.Seat.Row1.Pos1.Heating (Seat cooling / heating. 0 = off. -100 = max cold. +100 = max heat.) Vehicle.Cabin.Seat.Row1.Pos1.Height (Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.) Vehicle.Cabin.Seat.Row1.Pos1.IsBelted (Is the belt engaged.) Vehicle.Cabin.Seat.Row1.Pos1.IsOccupied (Does the seat have a passenger in it.) Vehicle.Cabin.Seat.Row1.Pos1.Massage (Seat massage level. 0 = off. 100 = max massage.) Vehicle.Cabin.Seat.Row1.Pos1.Occupant (Occupant data.) Vehicle.Cabin.Seat.Row1.Pos1.Position (Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.) Vehicle.Cabin.Seat.Row1.Pos1.Seating (Describes signals related to the seat bottom of the seat.) Vehicle.Cabin.Seat.Row1.Pos1.Switch (Seat switch signals) Vehicle.Cabin.Seat.Row1.Pos1.Tilt (Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1.Pos1 Description: …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/pos1/","tags":"","title":"Pos1"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Shade.Position Description: Position of window blind. 0 = Fully retracted. 100 = Fully deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eShade Shade--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.Shade.Position [get] OK Vehicle.Cabin.Door.Row2.Left.Shade.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.Shade.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Shade.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.Shade.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Shade.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.Shade.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Shade.Position is 33d7bdce5c915c3ea9633851f4f79cfb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Shade.Position …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/shade/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Shade.Position Description: Position of window blind. 0 = Fully retracted. 100 = Fully deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eShade Shade--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.Shade.Position [get] OK Vehicle.Cabin.Door.Row2.Right.Shade.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.Shade.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Shade.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.Shade.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Shade.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.Shade.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Shade.Position is fa705739512a54e9a103ff356be14df7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Shade.Position …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/shade/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window.Position Description: Window position. 0 = Fully closed 100 = Fully opened. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eWindow Window--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.Window.Position [get] OK Vehicle.Cabin.Door.Row2.Right.Window.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.Window.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Window.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.Window.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.Position is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Window.Position is f6323b78eecc58e5a9bc5d66f2548ce3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/window/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right Signal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right is e40a30e4838f5aaa970888d2865bc19e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Right.IsChildLockActive (Is door child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row2.Right.IsLocked (Is door locked or unlocked. True = Locked. False = Unlocked.) Vehicle.Cabin.Door.Row2.Right.IsOpen (Is door open or closed) Vehicle.Cabin.Door.Row2.Right.Shade (Side window shade) Vehicle.Cabin.Door.Row2.Right.Window (Door window status) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right Description: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1 Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Seat--\u003eRow1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat.Row1 Signal Information The vehicle signal Vehicle.Cabin.Seat.Row1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat.Row1 is 7a420ddeac6f538eb3939bb4a242d136\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1.Pos1 (All seats.) Vehicle.Cabin.Seat.Row1.Pos2 (All seats.) Vehicle.Cabin.Seat.Row1.Pos3 (All seats.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat.Row1 Description: All …","ref":"/leda/docs/vss/vehicle/cabin/seat/row1/","tags":"","title":"Row1"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Seat Description: All seats. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSeat Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Seat Signal Information The vehicle signal Vehicle.Cabin.Seat is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Seat is b0b253106b2851e3bb5c71ae3b09f09d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Seat.Row1 (All seats.) Vehicle.Cabin.Seat.Row2 (All seats.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Seat Description: All seats. …","ref":"/leda/docs/vss/vehicle/cabin/seat/","tags":"","title":"Seat"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Shade Description: Side window shade Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eShade Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Shade Signal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Shade is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Shade is beed1cdec4fb502390041087feaaa1bd\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Left.Shade.Position (Position of window blind. 0 = Fully retracted. 100 = Fully deployed.) Vehicle.Cabin.Door.Row2.Left.Shade.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Shade …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/shade/","tags":"","title":"Shade"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Shade Description: Side window shade Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eShade Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Shade Signal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Shade is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Shade is 092479bc8da55730827f3365828c89b2\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Right.Shade.Position (Position of window blind. 0 = Fully retracted. 100 = Fully deployed.) Vehicle.Cabin.Door.Row2.Right.Shade.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Shade …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/shade/","tags":"","title":"Shade"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Shade.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eShade Shade--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.Shade.Switch [get] OK Vehicle.Cabin.Door.Row2.Left.Shade.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.Shade.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Shade.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.Shade.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Shade.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.Shade.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Shade.Switch is 41f6f14bbb595dcf8e51d1696e877114\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Shade.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/shade/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eWindow Window--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.Window.Switch [get] OK Vehicle.Cabin.Door.Row2.Left.Window.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.Window.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Window.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.Window.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Window.Switch is 1a5d1c57f46e576a8a94853e2a44d3f8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/window/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Shade.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eShade Shade--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.Shade.Switch [get] OK Vehicle.Cabin.Door.Row2.Right.Shade.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.Shade.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Shade.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.Shade.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Shade.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.Shade.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Shade.Switch is 5b94a0c4e30a575c93942f0566be8be7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Shade.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/shade/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eWindow Window--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Right.Window.Switch [get] OK Vehicle.Cabin.Door.Row2.Right.Window.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Right.Window.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Window.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Right.Window.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Right.Window.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Window.Switch is 364c0a712fa854b4b1b332eae1be179b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/window/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window Description: Door window status Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eRight Right--\u003eWindow Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Right.Window Signal Information The vehicle signal Vehicle.Cabin.Door.Row2.Right.Window is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Right.Window is 18950f3ff3a1598585a603c4224ad7bd\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Right.Window.IsChildLockEngaged (Is window child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row2.Right.Window.IsOpen (Is window open or closed?) Vehicle.Cabin.Door.Row2.Right.Window.Position (Window position. 0 = Fully closed 100 = Fully opened.) Vehicle.Cabin.Door.Row2.Right.Window.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Right.Window …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/right/window/","tags":"","title":"Window"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.IsChildLockActive Description: Is door child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eIsChildLockActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.IsChildLockActive [get] OK Vehicle.Cabin.Door.Row1.Left.IsChildLockActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.IsChildLockActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.IsChildLockActive Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.IsChildLockActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.IsChildLockActive is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.IsChildLockActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.IsChildLockActive is 194a1dd29e245ff8a19dee7e022bad02\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/ischildlockactive/","tags":"","title":"IsChildLockActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.IsChildLockActive Description: Is door child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eIsChildLockActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.IsChildLockActive [get] OK Vehicle.Cabin.Door.Row1.Right.IsChildLockActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.IsChildLockActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.IsChildLockActive Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.IsChildLockActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.IsChildLockActive is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.IsChildLockActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.IsChildLockActive is 2eedf9e01c225ff39ee62a7c11395d6c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/ischildlockactive/","tags":"","title":"IsChildLockActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged Description: Is window child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eWindow Window--\u003eIsChildLockEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged [get] OK Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged is 618fe1eb106857faaf83f24236ed1819\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/window/ischildlockengaged/","tags":"","title":"IsChildLockEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged Description: Is window child lock engaged. True = Engaged. False = Disengaged. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eWindow Window--\u003eIsChildLockEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged [get] OK Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged is 6a65a16ba60c5c41b550a7b5f8b313dd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/window/ischildlockengaged/","tags":"","title":"IsChildLockEngaged"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.IsLocked Description: Is door locked or unlocked. True = Locked. False = Unlocked. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eIsLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.IsLocked [get] OK Vehicle.Cabin.Door.Row1.Left.IsLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.IsLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.IsLocked Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.IsLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.IsLocked is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.IsLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.IsLocked is 859b44ab75de5d67a8beedff883a72d0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.IsLocked …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/islocked/","tags":"","title":"IsLocked"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.IsLocked Description: Is door locked or unlocked. True = Locked. False = Unlocked. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eIsLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.IsLocked [get] OK Vehicle.Cabin.Door.Row1.Right.IsLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.IsLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.IsLocked Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.IsLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.IsLocked is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.IsLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.IsLocked is 7e5cf60543505205922b714cee2a3246\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.IsLocked …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/islocked/","tags":"","title":"IsLocked"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.IsLocked Description: Is door locked or unlocked. True = Locked. False = Unlocked. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eIsLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.IsLocked [get] OK Vehicle.Cabin.Door.Row2.Left.IsLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.IsLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.IsLocked Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.IsLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.IsLocked is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.IsLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.IsLocked is 5fb9d9707cd85925ab6658d90f044b45\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.IsLocked …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/islocked/","tags":"","title":"IsLocked"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.IsOpen Description: Is door open or closed Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.IsOpen [get] OK Vehicle.Cabin.Door.Row1.Left.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.IsOpen is a5560fa546985678be670c13a0467545\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.IsOpen Description: Is window open or closed? Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eWindow Window--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.Window.IsOpen [get] OK Vehicle.Cabin.Door.Row1.Left.Window.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.Window.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Window.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.Window.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.IsOpen is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Window.IsOpen is e7a98f3520825732922e41eb5b88ac49\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/window/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.IsOpen Description: Is door open or closed Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.IsOpen [get] OK Vehicle.Cabin.Door.Row1.Right.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.IsOpen is 055c01ebe86f507b97d15cfba82482a9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window.IsOpen Description: Is window open or closed? Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eWindow Window--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.Window.IsOpen [get] OK Vehicle.Cabin.Door.Row1.Right.Window.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.Window.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Window.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.Window.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.IsOpen is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Window.IsOpen is 90d0fdeaef075b78abab0b710c760393\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/window/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.IsOpen Description: Is door open or closed Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.IsOpen [get] OK Vehicle.Cabin.Door.Row2.Left.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.IsOpen is 0143c6028c355f29ae5b3ee2d31869a8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.IsOpen Description: Is window open or closed? Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eWindow Window--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.Window.IsOpen [get] OK Vehicle.Cabin.Door.Row2.Left.Window.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.Window.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Window.IsOpen Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.Window.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.IsOpen is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Window.IsOpen is 6abd32926e7a5b6b9767033063baaf4c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.IsOpen …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/window/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left Signal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left is ee74ca8275485ea89f70931d3b3e4bed\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Left.IsChildLockActive (Is door child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row1.Left.IsLocked (Is door locked or unlocked. True = Locked. False = Unlocked.) Vehicle.Cabin.Door.Row1.Left.IsOpen (Is door open or closed) Vehicle.Cabin.Door.Row1.Left.Shade (Side window shade) Vehicle.Cabin.Door.Row1.Left.Window (Door window status) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left Description: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left Signal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left is 20c6ae3bdb9b5fc8b8098d87f06c9069\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Left.IsChildLockActive (Is door child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row2.Left.IsLocked (Is door locked or unlocked. True = Locked. False = Unlocked.) Vehicle.Cabin.Door.Row2.Left.IsOpen (Is door open or closed) Vehicle.Cabin.Door.Row2.Left.Shade (Side window shade) Vehicle.Cabin.Door.Row2.Left.Window (Door window status) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left Description: …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Shade.Position Description: Position of window blind. 0 = Fully retracted. 100 = Fully deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eShade Shade--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.Shade.Position [get] OK Vehicle.Cabin.Door.Row1.Left.Shade.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.Shade.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Shade.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.Shade.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Shade.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.Shade.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Shade.Position is a4c73477293156999f74416245d4f858\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Shade.Position …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/shade/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.Position Description: Window position. 0 = Fully closed 100 = Fully opened. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eWindow Window--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.Window.Position [get] OK Vehicle.Cabin.Door.Row1.Left.Window.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.Window.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Window.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.Window.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.Position is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Window.Position is 63137367f94856acbb900a0dcdc7e495\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.Position …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/window/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Shade.Position Description: Position of window blind. 0 = Fully retracted. 100 = Fully deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eShade Shade--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.Shade.Position [get] OK Vehicle.Cabin.Door.Row1.Right.Shade.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.Shade.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Shade.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.Shade.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Shade.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.Shade.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Shade.Position is 22944f205eb45c6f804e481b8dd783c5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Shade.Position …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/shade/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window.Position Description: Window position. 0 = Fully closed 100 = Fully opened. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eWindow Window--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.Window.Position [get] OK Vehicle.Cabin.Door.Row1.Right.Window.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.Window.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Window.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.Window.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.Position is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Window.Position is e7ef528471eb585a937664abab9fbc68\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/window/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.Position Description: Window position. 0 = Fully closed 100 = Fully opened. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eWindow Window--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row2.Left.Window.Position [get] OK Vehicle.Cabin.Door.Row2.Left.Window.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row2.Left.Window.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Window.Position Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row2.Left.Window.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.Position is a Sensor.\nThe vehicle signal Vehicle.Cabin.Door.Row2.Left.Window.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Window.Position is 6eeda05cd5d357958a0b0649b1b406f8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window.Position …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/window/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right Signal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right is f1140cf0720157a1a2ffb62745a82916\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Right.IsChildLockActive (Is door child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row1.Right.IsLocked (Is door locked or unlocked. True = Locked. False = Unlocked.) Vehicle.Cabin.Door.Row1.Right.IsOpen (Is door open or closed) Vehicle.Cabin.Door.Row1.Right.Shade (Side window shade) Vehicle.Cabin.Door.Row1.Right.Window (Door window status) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right Description: …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2 Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2 Signal Information The vehicle signal Vehicle.Cabin.Door.Row2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2 is 74c8a76ad2545ceba474a85ae84eec8e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Left (All doors, including windows and switches.) Vehicle.Cabin.Door.Row2.Right (All doors, including windows and switches.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2 Description: All …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/","tags":"","title":"Row2"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Shade Description: Side window shade Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eShade Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Shade Signal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Shade is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Shade is f1a8db725cfd54c5b22594c456bcb05a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Left.Shade.Position (Position of window blind. 0 = Fully retracted. 100 = Fully deployed.) Vehicle.Cabin.Door.Row1.Left.Shade.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Shade …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/shade/","tags":"","title":"Shade"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Shade Description: Side window shade Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eShade Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Shade Signal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Shade is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Shade is f8f91480eb7c59d6ad697f2f9b2f46f1\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Right.Shade.Position (Position of window blind. 0 = Fully retracted. 100 = Fully deployed.) Vehicle.Cabin.Door.Row1.Right.Shade.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Shade …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/shade/","tags":"","title":"Shade"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Shade.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eShade Shade--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.Shade.Switch [get] OK Vehicle.Cabin.Door.Row1.Left.Shade.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.Shade.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Shade.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.Shade.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Shade.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.Shade.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Shade.Switch is 15c012ed31a054ecb2b9b2b1cf57e825\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Shade.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/shade/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eWindow Window--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Left.Window.Switch [get] OK Vehicle.Cabin.Door.Row1.Left.Window.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Left.Window.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Window.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Left.Window.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Left.Window.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Window.Switch is e276bf971dae507f99b463f7fe574969\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/window/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Shade.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eShade Shade--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.Shade.Switch [get] OK Vehicle.Cabin.Door.Row1.Right.Shade.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.Shade.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Shade.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.Shade.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Shade.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.Shade.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Shade.Switch is 763aea099a515fc998fde10d936b0b38\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Shade.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/shade/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eWindow Window--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Door.Row1.Right.Window.Switch [get] OK Vehicle.Cabin.Door.Row1.Right.Window.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Door.Row1.Right.Window.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Window.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Door.Row1.Right.Window.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Door.Row1.Right.Window.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Window.Switch is fcb9ede77f065479a10740324c0efdc6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window.Switch …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/window/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window Description: Door window status Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eLeft Left--\u003eWindow Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Left.Window Signal Information The vehicle signal Vehicle.Cabin.Door.Row1.Left.Window is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Left.Window is abbf75f4e6b9581db4aacda0f1e2789c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Left.Window.IsChildLockEngaged (Is window child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row1.Left.Window.IsOpen (Is window open or closed?) Vehicle.Cabin.Door.Row1.Left.Window.Position (Window position. 0 = Fully closed 100 = Fully opened.) Vehicle.Cabin.Door.Row1.Left.Window.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Left.Window …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/left/window/","tags":"","title":"Window"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window Description: Door window status Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Row1--\u003eRight Right--\u003eWindow Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1.Right.Window Signal Information The vehicle signal Vehicle.Cabin.Door.Row1.Right.Window is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1.Right.Window is 12e8cf5eb1c65954bb92f5144e2b22f9\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Right.Window.IsChildLockEngaged (Is window child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row1.Right.Window.IsOpen (Is window open or closed?) Vehicle.Cabin.Door.Row1.Right.Window.Position (Window position. 0 = Fully closed 100 = Fully opened.) Vehicle.Cabin.Door.Row1.Right.Window.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1.Right.Window …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/right/window/","tags":"","title":"Window"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window Description: Door window status Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow2 Row2--\u003eLeft Left--\u003eWindow Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row2.Left.Window Signal Information The vehicle signal Vehicle.Cabin.Door.Row2.Left.Window is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row2.Left.Window is 424d04d0ae8351af8c7115b131f1fe2e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row2.Left.Window.IsChildLockEngaged (Is window child lock engaged. True = Engaged. False = Disengaged.) Vehicle.Cabin.Door.Row2.Left.Window.IsOpen (Is window open or closed?) Vehicle.Cabin.Door.Row2.Left.Window.Position (Window position. 0 = Fully closed 100 = Fully opened.) Vehicle.Cabin.Door.Row2.Left.Window.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row2.Left.Window …","ref":"/leda/docs/vss/vehicle/cabin/door/row2/left/window/","tags":"","title":"Window"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.AmbientLight Description: How much ambient light is detected in cabin. 0 = No ambient light. 100 = Full brightness Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eAmbientLight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.AmbientLight [get] OK Vehicle.Cabin.Lights.AmbientLight: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.AmbientLight 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.AmbientLight Data Type \u0026 Unit Path Vehicle.Cabin.Lights.AmbientLight VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Lights.AmbientLight is a Sensor.\nThe vehicle signal Vehicle.Cabin.Lights.AmbientLight is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.AmbientLight is cf7bf6bc25c2564383e72ef840e4b47d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.AmbientLight …","ref":"/leda/docs/vss/vehicle/cabin/lights/ambientlight/","tags":"","title":"AmbientLight"},{"body":" Full qualified VSS Path: Vehicle.Cabin.RearviewMirror.DimmingLevel Description: Dimming level of rearview mirror. 0 = undimmed. 100 = fully dimmed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eRearviewMirror RearviewMirror--\u003eDimmingLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.RearviewMirror.DimmingLevel [get] OK Vehicle.Cabin.RearviewMirror.DimmingLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.RearviewMirror.DimmingLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.RearviewMirror.DimmingLevel Data Type \u0026 Unit Path Vehicle.Cabin.RearviewMirror.DimmingLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.RearviewMirror.DimmingLevel is an Actuator.\nThe vehicle signal Vehicle.Cabin.RearviewMirror.DimmingLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.RearviewMirror.DimmingLevel is 4e2bcbaa6dc1586d8282324b475e5dee\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.RearviewMirror.DimmingLevel …","ref":"/leda/docs/vss/vehicle/cabin/rearviewmirror/dimminglevel/","tags":"","title":"DimmingLevel"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door Signal Information The vehicle signal Vehicle.Cabin.Door is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door is fd7f4d16f8965419a9a69fd66b40c1d7\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1 (All doors, including windows and switches.) Vehicle.Cabin.Door.Row2 (All doors, including windows and switches.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door Description: All doors, …","ref":"/leda/docs/vss/vehicle/cabin/door/","tags":"","title":"Door"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.IsDomeOn Description: Is central dome light light on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eIsDomeOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.IsDomeOn [get] OK Vehicle.Cabin.Lights.IsDomeOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.IsDomeOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.IsDomeOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.IsDomeOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.IsDomeOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.IsDomeOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.IsDomeOn is cc100f4cd2ff5e0593a557a74ebf5d9a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.IsDomeOn Description: …","ref":"/leda/docs/vss/vehicle/cabin/lights/isdomeon/","tags":"","title":"IsDomeOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.IsGloveBoxOn Description: Is glove box light on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eIsGloveBoxOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.IsGloveBoxOn [get] OK Vehicle.Cabin.Lights.IsGloveBoxOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.IsGloveBoxOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.IsGloveBoxOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.IsGloveBoxOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.IsGloveBoxOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.IsGloveBoxOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.IsGloveBoxOn is f7281175fbc85b4a937b2606e4300f9a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.IsGloveBoxOn …","ref":"/leda/docs/vss/vehicle/cabin/lights/isgloveboxon/","tags":"","title":"IsGloveBoxOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn Description: Is light on the left side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow1 Row1--\u003eIsLeftOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn is c6a9c6b14d725113a087ce7e58a9c90b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row1/islefton/","tags":"","title":"IsLeftOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn Description: Is light on the left side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow2 Row2--\u003eIsLeftOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn is 15534d254ce851509a8dfae763a9d709\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row2/islefton/","tags":"","title":"IsLeftOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn Description: Is light on the left side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow3 Row3--\u003eIsLeftOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn is f32530172b1a535cba376e660a3a630a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row3/islefton/","tags":"","title":"IsLeftOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn Description: Is light on the left side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow4 Row4--\u003eIsLeftOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn is 643c07780d2453e98b5091a39516f7ec\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row4/islefton/","tags":"","title":"IsLeftOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn Description: Is light on the right side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow1 Row1--\u003eIsRightOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn is 7c08ddd9067f5905855cec9f30546fc9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row1/isrighton/","tags":"","title":"IsRightOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn Description: Is light on the right side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow2 Row2--\u003eIsRightOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn is 06e866363b5c589db5b446eca0b68c8b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row2/isrighton/","tags":"","title":"IsRightOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn Description: Is light on the right side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow3 Row3--\u003eIsRightOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn is 20424c00cf1d5e49b4287efe186cd263\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row3/isrighton/","tags":"","title":"IsRightOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn Description: Is light on the right side switched on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow4 Row4--\u003eIsRightOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn is f012d37429aa53d1bf8648d686a804ef\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row4/isrighton/","tags":"","title":"IsRightOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn Description: Is a shared light across a specific row on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow1 Row1--\u003eIsSharedOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn is a Sensor.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn is 99614d03c27f50a6a32b99b68814e6d7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row1/issharedon/","tags":"","title":"IsSharedOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn Description: Is a shared light across a specific row on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow2 Row2--\u003eIsSharedOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn is a Sensor.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn is 087dd02860965a61a5cba8c66f8dbd36\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row2/issharedon/","tags":"","title":"IsSharedOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn Description: Is a shared light across a specific row on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow3 Row3--\u003eIsSharedOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn is a Sensor.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn is 87f00a029ec854d39702ef86e030c00c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row3/issharedon/","tags":"","title":"IsSharedOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn Description: Is a shared light across a specific row on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow4 Row4--\u003eIsSharedOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn [get] OK Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn is a Sensor.\nThe vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn is 8f8de6d5b18f5cc69c9ecd556ce6b6ed\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row4/issharedon/","tags":"","title":"IsSharedOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.IsTrunkOn Description: Is trunk light light on Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eIsTrunkOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.IsTrunkOn [get] OK Vehicle.Cabin.Lights.IsTrunkOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.IsTrunkOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.IsTrunkOn Data Type \u0026 Unit Path Vehicle.Cabin.Lights.IsTrunkOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.Lights.IsTrunkOn is an Actuator.\nThe vehicle signal Vehicle.Cabin.Lights.IsTrunkOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.IsTrunkOn is 3697df4cddc751df847fac74bd32390f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.IsTrunkOn Description: …","ref":"/leda/docs/vss/vehicle/cabin/lights/istrunkon/","tags":"","title":"IsTrunkOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.LightIntensity Description: Intensity of the interior lights. 0 = Off. 100 = Full brightness. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eLightIntensity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Lights.LightIntensity [get] OK Vehicle.Cabin.Lights.LightIntensity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Lights.LightIntensity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.LightIntensity Data Type \u0026 Unit Path Vehicle.Cabin.Lights.LightIntensity VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Lights.LightIntensity is a Sensor.\nThe vehicle signal Vehicle.Cabin.Lights.LightIntensity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.LightIntensity is a66eba0bae225a56babf3f9ceb65fc76\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.LightIntensity …","ref":"/leda/docs/vss/vehicle/cabin/lights/lightintensity/","tags":"","title":"LightIntensity"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights Description: Interior lights signals and sensors. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights Signal Information The vehicle signal Vehicle.Cabin.Lights is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights is 8b5cd8c4d1e752b38c65a5966c870ccb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Lights.AmbientLight (How much ambient light is detected in cabin. 0 = No ambient light. 100 = Full brightness) Vehicle.Cabin.Lights.IsDomeOn (Is central dome light light on) Vehicle.Cabin.Lights.IsGloveBoxOn (Is glove box light on) Vehicle.Cabin.Lights.IsTrunkOn (Is trunk light light on) Vehicle.Cabin.Lights.LightIntensity (Intensity of the interior lights. 0 = Off. 100 = Full brightness.) Vehicle.Cabin.Lights.Spotlight (Spotlight for a specific area in the vehicle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights Description: Interior …","ref":"/leda/docs/vss/vehicle/cabin/lights/","tags":"","title":"Lights"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Shade.Position Description: Position of window blind. 0 = Fully retracted. 100 = Fully deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSunroof Sunroof--\u003eShade Shade--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Sunroof.Shade.Position [get] OK Vehicle.Cabin.Sunroof.Shade.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Sunroof.Shade.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Sunroof.Shade.Position Data Type \u0026 Unit Path Vehicle.Cabin.Sunroof.Shade.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Sunroof.Shade.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.Sunroof.Shade.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Sunroof.Shade.Position is 5f78c2a631b75abc88744f9bad277f5a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Shade.Position …","ref":"/leda/docs/vss/vehicle/cabin/sunroof/shade/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.RearviewMirror Description: Rearview mirror. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eRearviewMirror Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.RearviewMirror Signal Information The vehicle signal Vehicle.Cabin.RearviewMirror is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.RearviewMirror is e655b654ab9f55bbb04952a99755efae\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.RearviewMirror.DimmingLevel (Dimming level of rearview mirror. 0 = undimmed. 100 = fully dimmed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.RearviewMirror Description: …","ref":"/leda/docs/vss/vehicle/cabin/rearviewmirror/","tags":"","title":"RearviewMirror"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1 Description: All doors, including windows and switches. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eDoor Door--\u003eRow1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Door.Row1 Signal Information The vehicle signal Vehicle.Cabin.Door.Row1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Door.Row1 is fd3fcb481cb953dc9a853125c6ca0453\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Door.Row1.Left (All doors, including windows and switches.) Vehicle.Cabin.Door.Row1.Right (All doors, including windows and switches.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Door.Row1 Description: All …","ref":"/leda/docs/vss/vehicle/cabin/door/row1/","tags":"","title":"Row1"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row1 Description: Spotlight for a specific area in the vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row1 Signal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row1 is ea2b102268735567b3d7d6c36b34e480\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Lights.Spotlight.Row1.IsLeftOn (Is light on the left side switched on) Vehicle.Cabin.Lights.Spotlight.Row1.IsRightOn (Is light on the right side switched on) Vehicle.Cabin.Lights.Spotlight.Row1.IsSharedOn (Is a shared light across a specific row on) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row1 …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row1/","tags":"","title":"Row1"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row2 Description: Spotlight for a specific area in the vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row2 Signal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row2 is 504e514166d255439fd3f61acd3d412b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Lights.Spotlight.Row2.IsLeftOn (Is light on the left side switched on) Vehicle.Cabin.Lights.Spotlight.Row2.IsRightOn (Is light on the right side switched on) Vehicle.Cabin.Lights.Spotlight.Row2.IsSharedOn (Is a shared light across a specific row on) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row2 …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row2/","tags":"","title":"Row2"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row3 Description: Spotlight for a specific area in the vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow3 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row3 Signal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row3 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row3 is c0352a193354597692626b6f0b6d9537\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Lights.Spotlight.Row3.IsLeftOn (Is light on the left side switched on) Vehicle.Cabin.Lights.Spotlight.Row3.IsRightOn (Is light on the right side switched on) Vehicle.Cabin.Lights.Spotlight.Row3.IsSharedOn (Is a shared light across a specific row on) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row3 …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row3/","tags":"","title":"Row3"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row4 Description: Spotlight for a specific area in the vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Spotlight--\u003eRow4 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight.Row4 Signal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight.Row4 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight.Row4 is 42c09d108927563293adcb93738895a0\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Lights.Spotlight.Row4.IsLeftOn (Is light on the left side switched on) Vehicle.Cabin.Lights.Spotlight.Row4.IsRightOn (Is light on the right side switched on) Vehicle.Cabin.Lights.Spotlight.Row4.IsSharedOn (Is a shared light across a specific row on) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight.Row4 …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/row4/","tags":"","title":"Row4"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight Description: Spotlight for a specific area in the vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eLights Lights--\u003eSpotlight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Lights.Spotlight Signal Information The vehicle signal Vehicle.Cabin.Lights.Spotlight is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Lights.Spotlight is 8528c64a4c775da3ab01617bbff2e3c9\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Lights.Spotlight.Row1 (Spotlight for a specific area in the vehicle.) Vehicle.Cabin.Lights.Spotlight.Row2 (Spotlight for a specific area in the vehicle.) Vehicle.Cabin.Lights.Spotlight.Row3 (Spotlight for a specific area in the vehicle.) Vehicle.Cabin.Lights.Spotlight.Row4 (Spotlight for a specific area in the vehicle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Lights.Spotlight Description: …","ref":"/leda/docs/vss/vehicle/cabin/lights/spotlight/","tags":"","title":"Spotlight"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.SmartphoneProjection.Active Description: Projection activation info. Comment: NONE indicates that projection is not supported. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eSmartphoneProjection SmartphoneProjection--\u003eActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.SmartphoneProjection.Active [get] OK Vehicle.Cabin.Infotainment.SmartphoneProjection.Active: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.SmartphoneProjection.Active Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.SmartphoneProjection.Active Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.SmartphoneProjection.Active VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['NONE', 'ACTIVE', 'INACTIVE'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection.Active is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection.Active is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.SmartphoneProjection.Active is 7156b00b47a8513c8e86f50f7d152614\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/smartphoneprojection/active/","tags":"","title":"Active"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.Brightness Description: Brightness of the HMI, relative to supported range. 0 = Lowest brightness possible. 100 = Maximum Brightness possible. Comment: The value 0 does not necessarily correspond to a turned off HMI, as it may not be allowed/supported to turn off the HMI completely. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eBrightness Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.Brightness [get] OK Vehicle.Cabin.Infotainment.HMI.Brightness: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.Brightness 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.Brightness Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.Brightness VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.Brightness is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.Brightness is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.Brightness is 44147980dabd56b883ae4d2491383a17\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.Brightness …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/brightness/","tags":"","title":"Brightness"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.CurrentLanguage Description: ISO 639-1 standard language code for the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eCurrentLanguage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.CurrentLanguage [get] OK Vehicle.Cabin.Infotainment.HMI.CurrentLanguage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.CurrentLanguage Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.CurrentLanguage Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.CurrentLanguage VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.CurrentLanguage is a Sensor.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.CurrentLanguage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.CurrentLanguage is dc29ee5b7f7154b4ab05a9771fe930b3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/currentlanguage/","tags":"","title":"CurrentLanguage"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.DateFormat Description: Date format used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eDateFormat Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.DateFormat [get] OK Vehicle.Cabin.Infotainment.HMI.DateFormat: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.DateFormat Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.DateFormat Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.DateFormat VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['YYYY_MM_DD', 'DD_MM_YYYY', 'MM_DD_YYYY', 'YY_MM_DD', 'DD_MM_YY', 'MM_DD_YY'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.DateFormat is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.DateFormat is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.DateFormat is 0f03c3955fe953e9893a1f52e964919e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.DateFormat …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/dateformat/","tags":"","title":"DateFormat"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.DayNightMode Description: Current display theme Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eDayNightMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.DayNightMode [get] OK Vehicle.Cabin.Infotainment.HMI.DayNightMode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.DayNightMode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.DayNightMode Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.DayNightMode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['DAY', 'NIGHT'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.DayNightMode is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.DayNightMode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.DayNightMode is a892039ba136588fa26b2670f839c0cc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.DayNightMode …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/daynightmode/","tags":"","title":"DayNightMode"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.DeclinedURI Description: URI of suggested media that was declined Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003eDeclinedURI Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.DeclinedURI [get] OK Vehicle.Cabin.Infotainment.Media.DeclinedURI: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.DeclinedURI Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.DeclinedURI Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.DeclinedURI VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.DeclinedURI is a Sensor.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.DeclinedURI is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.DeclinedURI is 51b0d6227db55b92bc35eedd8277f4c4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.DeclinedURI …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/declineduri/","tags":"","title":"DeclinedURI"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.DestinationSet Description: A navigation has been selected. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eNavigation Navigation--\u003eDestinationSet Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Navigation.DestinationSet Signal Information The vehicle signal Vehicle.Cabin.Infotainment.Navigation.DestinationSet is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Navigation.DestinationSet is f51ce253dc5b58168ecca99297139455\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude (Latitude of destination in WGS 84 geodetic coordinates.) Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude (Longitude of destination in WGS 84 geodetic coordinates.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/navigation/destinationset/","tags":"","title":"DestinationSet"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.DistanceUnit Description: Distance unit used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eDistanceUnit Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.DistanceUnit [get] OK Vehicle.Cabin.Infotainment.HMI.DistanceUnit: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.DistanceUnit Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.DistanceUnit Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.DistanceUnit VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['MILES', 'KILOMETERS'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.DistanceUnit is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.DistanceUnit is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.DistanceUnit is 4b40e8bdb1a053ee9ee35338d8804e7b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.DistanceUnit …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/distanceunit/","tags":"","title":"DistanceUnit"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits Description: EV fuel economy unit used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eEVEconomyUnits Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits [get] OK Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['MILES_PER_KILOWATT_HOUR', 'KILOMETERS_PER_KILOWATT_HOUR', 'KILOWATT_HOURS_PER_100_MILES', 'KILOWATT_HOURS_PER_100_KILOMETERS', 'WATT_HOURS_PER_MILE', 'WATT_HOURS_PER_KILOMETER'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits is 914846f6804757ba81ca6bcfac8d2c48\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/eveconomyunits/","tags":"","title":"EVEconomyUnits"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits Description: Fuel economy unit used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eFuelEconomyUnits Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits [get] OK Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['MPG_UK', 'MPG_US', 'MILES_PER_LITER', 'KILOMETERS_PER_LITER', 'LITERS_PER_100_KILOMETERS'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits is 0e6a43ce1aa45243b753545ffa1f0f8c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/fueleconomyunits/","tags":"","title":"FuelEconomyUnits"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit Description: Fuel volume unit used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eFuelVolumeUnit Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit [get] OK Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['LITER', 'GALLON_US', 'GALLON_UK'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit is aef80d0bd01d593082e41abf072dab9b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/fuelvolumeunit/","tags":"","title":"FuelVolumeUnit"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI Description: HMI related signals Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI Signal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI is 271e3d9202825f37bd054820e5ea8141\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.HMI.Brightness (Brightness of the HMI, relative to supported range. 0 = Lowest brightness possible. 100 = Maximum Brightness possible.) Vehicle.Cabin.Infotainment.HMI.CurrentLanguage (ISO 639-1 standard language code for the current HMI) Vehicle.Cabin.Infotainment.HMI.DateFormat (Date format used in the current HMI) Vehicle.Cabin.Infotainment.HMI.DayNightMode (Current display theme) Vehicle.Cabin.Infotainment.HMI.DistanceUnit (Distance unit used in the current HMI) Vehicle.Cabin.Infotainment.HMI.EVEconomyUnits (EV fuel economy unit used in the current HMI) Vehicle.Cabin.Infotainment.HMI.FuelEconomyUnits (Fuel economy unit used in the current HMI) Vehicle.Cabin.Infotainment.HMI.FuelVolumeUnit (Fuel volume unit used in the current HMI) Vehicle.Cabin.Infotainment.HMI.TemperatureUnit (Temperature unit used in the current HMI) Vehicle.Cabin.Infotainment.HMI.TimeFormat (Time format used in the current HMI) Vehicle.Cabin.Infotainment.HMI.TirePressureUnit (Tire pressure unit used in the current HMI) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI Description: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/","tags":"","title":"HMI"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude Description: Latitude of destination in WGS 84 geodetic coordinates. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eNavigation Navigation--\u003eDestinationSet DestinationSet--\u003eLatitude Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude [get] OK Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude VSS: Addressing nodes Data type double VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Minimum value -90 VSS: Sensors \u0026 Actuators Maximum value 90 VSS: Sensors \u0026 Actuators Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Latitude is 3e33f3252934565d86de5409c761262b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/navigation/destinationset/latitude/","tags":"","title":"Latitude"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude Description: Longitude of destination in WGS 84 geodetic coordinates. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eNavigation Navigation--\u003eDestinationSet DestinationSet--\u003eLongitude Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude [get] OK Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude VSS: Addressing nodes Data type double VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Minimum value -180 VSS: Sensors \u0026 Actuators Maximum value 180 VSS: Sensors \u0026 Actuators Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Navigation.DestinationSet.Longitude is e9bd511146ca51639c8d42c0702e22ee\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/navigation/destinationset/longitude/","tags":"","title":"Longitude"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.Mute Description: Navigation mute state that was selected. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eNavigation Navigation--\u003eMute Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Navigation.Mute [get] OK Vehicle.Cabin.Infotainment.Navigation.Mute: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Navigation.Mute Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Navigation.Mute Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Navigation.Mute VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['MUTED', 'ALERT_ONLY', 'UNMUTED'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Navigation.Mute is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Navigation.Mute is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Navigation.Mute is d7ab68ec65aa5bafa95f042a60c91639\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.Mute …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/navigation/mute/","tags":"","title":"Mute"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation Description: All navigation actions Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eNavigation Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Navigation Signal Information The vehicle signal Vehicle.Cabin.Infotainment.Navigation is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Navigation is 79bb0cc4acae5d1eb34fb214352d7863\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.Navigation.DestinationSet (A navigation has been selected.) Vehicle.Cabin.Infotainment.Navigation.Mute (Navigation mute state that was selected.) Vehicle.Cabin.Infotainment.Navigation.Volume (Current navigation volume) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/navigation/","tags":"","title":"Navigation"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate Description: Current playback rate of media being played. Comment: The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed. Values of lower than 1.0 make the media play slower than normal. Values of higher than 1.0 make the media play faster than normal. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Played--\u003ePlaybackRate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate [get] OK Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate VSS: Addressing nodes Data type float VSS: Datatypes Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate is f5e58f66f21f560fbd0124ab5b17460e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/playbackrate/","tags":"","title":"PlaybackRate"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Position Description: Sunroof position. 0 = Fully closed 100 = Fully opened. -100 = Fully tilted. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSunroof Sunroof--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Sunroof.Position [get] OK Vehicle.Cabin.Sunroof.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Sunroof.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Sunroof.Position Data Type \u0026 Unit Path Vehicle.Cabin.Sunroof.Position VSS: Addressing nodes Data type int8 VSS: Datatypes Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Sunroof.Position is a Sensor.\nThe vehicle signal Vehicle.Cabin.Sunroof.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Sunroof.Position is ab598697f1c852eda4df9ed62a956d17\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Position Description: …","ref":"/leda/docs/vss/vehicle/cabin/sunroof/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.PowerOptimizeLevel [get] OK Vehicle.Cabin.Infotainment.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.PowerOptimizeLevel is 7be907e3d9fd5c46a516f7cd07f050a3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.SelectedURI Description: URI of suggested media that was selected Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003eSelectedURI Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.SelectedURI [get] OK Vehicle.Cabin.Infotainment.Media.SelectedURI: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.SelectedURI Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.SelectedURI Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.SelectedURI VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.SelectedURI is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.SelectedURI is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.SelectedURI is 4820f7a961c25e91af12d3417a145d32\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.SelectedURI …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/selecteduri/","tags":"","title":"SelectedURI"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Shade Description: Sun roof shade status. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSunroof Sunroof--\u003eShade Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Sunroof.Shade Signal Information The vehicle signal Vehicle.Cabin.Sunroof.Shade is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Sunroof.Shade is eeaae5977adb5683b16f405993405b2e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Sunroof.Shade.Position (Position of window blind. 0 = Fully retracted. 100 = Fully deployed.) Vehicle.Cabin.Sunroof.Shade.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Shade Description: Sun …","ref":"/leda/docs/vss/vehicle/cabin/sunroof/shade/","tags":"","title":"Shade"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.SmartphoneProjection Description: All smartphone projection actions. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eSmartphoneProjection Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.SmartphoneProjection Signal Information The vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.SmartphoneProjection is fd47f73b4d6b51679f4bed75f6d63518\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.SmartphoneProjection.Active (Projection activation info.) Vehicle.Cabin.Infotainment.SmartphoneProjection.Source (Connectivity source selected for projection.) Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode (Supportable list for projection.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/smartphoneprojection/","tags":"","title":"SmartphoneProjection"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.SmartphoneProjection.Source Description: Connectivity source selected for projection. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eSmartphoneProjection SmartphoneProjection--\u003eSource Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.SmartphoneProjection.Source [get] OK Vehicle.Cabin.Infotainment.SmartphoneProjection.Source: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.SmartphoneProjection.Source Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.SmartphoneProjection.Source Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.SmartphoneProjection.Source VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['USB', 'BLUETOOTH', 'WIFI'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection.Source is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection.Source is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.SmartphoneProjection.Source is 1c2d1f379f5752ac802456a992b88156\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/smartphoneprojection/source/","tags":"","title":"Source"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Sunroof Description: Sun roof status. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSunroof Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Sunroof Signal Information The vehicle signal Vehicle.Cabin.Sunroof is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Sunroof is 8ff70db05c065e3eb530082a0b6983cf\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Sunroof.Position (Sunroof position. 0 = Fully closed 100 = Fully opened. -100 = Fully tilted.) Vehicle.Cabin.Sunroof.Shade (Sun roof shade status.) Vehicle.Cabin.Sunroof.Switch (Switch controlling sliding action such as window, sunroof, or shade.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Sunroof Description: Sun roof …","ref":"/leda/docs/vss/vehicle/cabin/sunroof/","tags":"","title":"Sunroof"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode Description: Supportable list for projection. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eSmartphoneProjection SmartphoneProjection--\u003eSupportedMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode [get] OK Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode VSS: Addressing nodes Data type string[] VSS: Datatypes Allowed values ['ANDROID_AUTO', 'APPLE_CARPLAY', 'MIRROR_LINK', 'OTHER'] VSS: Specifying allowed values Signal Information The vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode is an Attribute.\nThe vehicle signal Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.SmartphoneProjection.SupportedMode is 80fa132703655d989386bc6711afed49\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/smartphoneprojection/supportedmode/","tags":"","title":"SupportedMode"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Shade.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSunroof Sunroof--\u003eShade Shade--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Sunroof.Shade.Switch [get] OK Vehicle.Cabin.Sunroof.Shade.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Sunroof.Shade.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Sunroof.Shade.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Sunroof.Shade.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Sunroof.Shade.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Sunroof.Shade.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Sunroof.Shade.Switch is 3836077128c65381b01e74a1a8be1c40\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Shade.Switch …","ref":"/leda/docs/vss/vehicle/cabin/sunroof/shade/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Switch Description: Switch controlling sliding action such as window, sunroof, or shade. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eSunroof Sunroof--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Sunroof.Switch [get] OK Vehicle.Cabin.Sunroof.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Sunroof.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Sunroof.Switch Data Type \u0026 Unit Path Vehicle.Cabin.Sunroof.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN', 'TILT_UP', 'TILT_DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Sunroof.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.Sunroof.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Sunroof.Switch is 88c39afd45a25ea2b474ff581e1fb138\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Sunroof.Switch Description: …","ref":"/leda/docs/vss/vehicle/cabin/sunroof/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.TemperatureUnit Description: Temperature unit used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eTemperatureUnit Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.TemperatureUnit [get] OK Vehicle.Cabin.Infotainment.HMI.TemperatureUnit: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.TemperatureUnit Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.TemperatureUnit Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.TemperatureUnit VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['C', 'F'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.TemperatureUnit is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.TemperatureUnit is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.TemperatureUnit is a7d1533490bb52b6b4f650280e72543d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/temperatureunit/","tags":"","title":"TemperatureUnit"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.TimeFormat Description: Time format used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eTimeFormat Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.TimeFormat [get] OK Vehicle.Cabin.Infotainment.HMI.TimeFormat: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.TimeFormat Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.TimeFormat Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.TimeFormat VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['HR_12', 'HR_24'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.TimeFormat is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.TimeFormat is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.TimeFormat is 73083b87a4e25c02aee672ea32e40005\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.TimeFormat …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/timeformat/","tags":"","title":"TimeFormat"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.HMI.TirePressureUnit Description: Tire pressure unit used in the current HMI Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eHMI HMI--\u003eTirePressureUnit Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.HMI.TirePressureUnit [get] OK Vehicle.Cabin.Infotainment.HMI.TirePressureUnit: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.HMI.TirePressureUnit Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.HMI.TirePressureUnit Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.HMI.TirePressureUnit VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['PSI', 'KPA', 'BAR'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.HMI.TirePressureUnit is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.HMI.TirePressureUnit is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.HMI.TirePressureUnit is e5ffaf58cc10523fa0858deafb61a8ce\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/hmi/tirepressureunit/","tags":"","title":"TirePressureUnit"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Volume Description: Current Media Volume Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003eVolume Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Volume [get] OK Vehicle.Cabin.Infotainment.Media.Volume: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Volume 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Volume Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Volume VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Volume is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Volume is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Volume is 8b344688816f5844ae5812bb136c8006\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Volume …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/volume/","tags":"","title":"Volume"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.Volume Description: Current navigation volume Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eNavigation Navigation--\u003eVolume Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Navigation.Volume [get] OK Vehicle.Cabin.Infotainment.Navigation.Volume: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Navigation.Volume 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Navigation.Volume Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Navigation.Volume VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Navigation.Volume is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Navigation.Volume is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Navigation.Volume is 3609ff09d29d54d596068f978cbc0777\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Navigation.Volume …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/navigation/volume/","tags":"","title":"Volume"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Action Description: Tells if the media was Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003eAction Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Action [get] OK Vehicle.Cabin.Infotainment.Media.Action: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Action Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Action Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Action VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UNKNOWN', 'STOP', 'PLAY', 'FAST_FORWARD', 'FAST_BACKWARD', 'SKIP_FORWARD', 'SKIP_BACKWARD'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Action is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Action is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Action is 0357aea525bf505981a14e4fc720094e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Action …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/action/","tags":"","title":"Action"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eRight Right--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution is 1b6c21042e3b5ac9ae351f807722795a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/right/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eLeft Left--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution is ee591723296a580ea4ce9fc6ddbb5cf5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/left/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eRight Right--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution is 7d8b7cbfe68156d4a190a0a7525ee26c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/right/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.Album Description: Name of album being played Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Played--\u003eAlbum Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Played.Album [get] OK Vehicle.Cabin.Infotainment.Media.Played.Album: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Played.Album Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played.Album Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Played.Album VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Album is a Sensor.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Album is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played.Album is 1d80b1e2c1085def92b3548b5db2786e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/album/","tags":"","title":"Album"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.AmbientAirTemperature Description: Ambient air temperature inside the vehicle. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eAmbientAirTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.AmbientAirTemperature [get] OK Vehicle.Cabin.HVAC.AmbientAirTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.AmbientAirTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.AmbientAirTemperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.AmbientAirTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.AmbientAirTemperature is a Sensor.\nThe vehicle signal Vehicle.Cabin.HVAC.AmbientAirTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.AmbientAirTemperature is 611868a24bc25eb9a837208c235e9491\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.AmbientAirTemperature …","ref":"/leda/docs/vss/vehicle/cabin/hvac/ambientairtemperature/","tags":"","title":"AmbientAirTemperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.Artist Description: Name of artist being played Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Played--\u003eArtist Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Played.Artist [get] OK Vehicle.Cabin.Infotainment.Media.Played.Artist: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Played.Artist Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played.Artist Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Played.Artist VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Artist is a Sensor.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Artist is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played.Artist is 076af7ad8aff5110ab5a64d1f58ccdcb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/artist/","tags":"","title":"Artist"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eRight Right--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed is 9d5312c0ccc15f578b2c5e5512d34cb3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/right/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eLeft Left--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed is afd89e90044e5d5fa99e9c627742adb0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/left/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eRight Right--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed is b3cc73b02e5c5254b691373caacd7d21\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/right/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment Description: Infotainment system. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment Signal Information The vehicle signal Vehicle.Cabin.Infotainment is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment is d88f92fbdda35012a2443b5e130d5eff\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.HMI (HMI related signals) Vehicle.Cabin.Infotainment.Media (All Media actions) Vehicle.Cabin.Infotainment.Navigation (All navigation actions) Vehicle.Cabin.Infotainment.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.Cabin.Infotainment.SmartphoneProjection (All smartphone projection actions.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment Description: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/","tags":"","title":"Infotainment"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsAirConditioningActive Description: Is Air conditioning active. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eIsAirConditioningActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.IsAirConditioningActive [get] OK Vehicle.Cabin.HVAC.IsAirConditioningActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.IsAirConditioningActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.IsAirConditioningActive Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.IsAirConditioningActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.IsAirConditioningActive is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.IsAirConditioningActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.IsAirConditioningActive is dc4f79e4211c54a6b4eed0236aae84a6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsAirConditioningActive …","ref":"/leda/docs/vss/vehicle/cabin/hvac/isairconditioningactive/","tags":"","title":"IsAirConditioningActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsFrontDefrosterActive Description: Is front defroster active. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eIsFrontDefrosterActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.IsFrontDefrosterActive [get] OK Vehicle.Cabin.HVAC.IsFrontDefrosterActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.IsFrontDefrosterActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.IsFrontDefrosterActive Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.IsFrontDefrosterActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.IsFrontDefrosterActive is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.IsFrontDefrosterActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.IsFrontDefrosterActive is afa678c87182544bb6ab81fa6a770791\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsFrontDefrosterActive …","ref":"/leda/docs/vss/vehicle/cabin/hvac/isfrontdefrosteractive/","tags":"","title":"IsFrontDefrosterActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsRearDefrosterActive Description: Is rear defroster active. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eIsRearDefrosterActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.IsRearDefrosterActive [get] OK Vehicle.Cabin.HVAC.IsRearDefrosterActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.IsRearDefrosterActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.IsRearDefrosterActive Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.IsRearDefrosterActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.IsRearDefrosterActive is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.IsRearDefrosterActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.IsRearDefrosterActive is d342a7939f2e5adeaeb5e68e3a314445\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsRearDefrosterActive …","ref":"/leda/docs/vss/vehicle/cabin/hvac/isreardefrosteractive/","tags":"","title":"IsRearDefrosterActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsRecirculationActive Description: Is recirculation active. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eIsRecirculationActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.IsRecirculationActive [get] OK Vehicle.Cabin.HVAC.IsRecirculationActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.IsRecirculationActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.IsRecirculationActive Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.IsRecirculationActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.IsRecirculationActive is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.IsRecirculationActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.IsRecirculationActive is 7b80c41c63b35c9299a410166cd33c81\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.IsRecirculationActive …","ref":"/leda/docs/vss/vehicle/cabin/hvac/isrecirculationactive/","tags":"","title":"IsRecirculationActive"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Left Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Left Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Left is 4adb4059a21757bdabd902998ffb7da5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row4.Left.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row4.Left.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Left …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media Description: All Media actions Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media Signal Information The vehicle signal Vehicle.Cabin.Infotainment.Media is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media is 3f324d13873e501a84daf2cfade24d0f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.Media.Action (Tells if the media was) Vehicle.Cabin.Infotainment.Media.DeclinedURI (URI of suggested media that was declined) Vehicle.Cabin.Infotainment.Media.Played (Collection of signals updated in concert when a new media is played) Vehicle.Cabin.Infotainment.Media.SelectedURI (URI of suggested media that was selected) Vehicle.Cabin.Infotainment.Media.Volume (Current Media Volume) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/","tags":"","title":"Media"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played Description: Collection of signals updated in concert when a new media is played Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played Signal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played is 6585e9d3b6ff596da72a5f8c98d2d47a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Infotainment.Media.Played.Album (Name of album being played) Vehicle.Cabin.Infotainment.Media.Played.Artist (Name of artist being played) Vehicle.Cabin.Infotainment.Media.Played.PlaybackRate (Current playback rate of media being played.) Vehicle.Cabin.Infotainment.Media.Played.Source (Media selected for playback) Vehicle.Cabin.Infotainment.Media.Played.Track (Name of track being played) Vehicle.Cabin.Infotainment.Media.Played.URI (User Resource associated with the media) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/","tags":"","title":"Played"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.PowerOptimizeLevel [get] OK Vehicle.Cabin.HVAC.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.PowerOptimizeLevel is ee011a09ebc6519183177b05d7302ce8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.PowerOptimizeLevel …","ref":"/leda/docs/vss/vehicle/cabin/hvac/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Right Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Right Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Right is b4bf2c99c2af580cbb92e0bbd0a40730\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row4.Right.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row4.Right.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Right …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4 Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4 Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4 is ff0c0fa26de7508dbe92a83bc087dff6\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row4.Left (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row4.Right (HVAC for single station in the vehicle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4 Description: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/","tags":"","title":"Row4"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.Source Description: Media selected for playback Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Played--\u003eSource Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Played.Source [get] OK Vehicle.Cabin.Infotainment.Media.Played.Source: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Played.Source Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played.Source Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Played.Source VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UNKNOWN', 'SIRIUS_XM', 'AM', 'FM', 'DAB', 'TV', 'CD', 'DVD', 'AUX', 'USB', 'DISK', 'BLUETOOTH', 'INTERNET', 'VOICE', 'BEEP'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Source is an Actuator.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Source is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played.Source is 54fb88a7d7cf5e3aab63e8f52415c187\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/source/","tags":"","title":"Source"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eRight Right--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature is a76ea2c628df5099b0dca839aac84e63\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/right/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eLeft Left--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Left.Temperature is accc4bb43c775735843e87b545af08b2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/left/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow4 Row4--\u003eRight Right--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row4.Right.Temperature is 49c59496aa7356cf86c275a0eb93ba28\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row4/right/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.Track Description: Name of track being played Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Played--\u003eTrack Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Played.Track [get] OK Vehicle.Cabin.Infotainment.Media.Played.Track: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Played.Track Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played.Track Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Played.Track VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Track is a Sensor.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Played.Track is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played.Track is ee800d62a40351e6934649ca75927d69\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/track/","tags":"","title":"Track"},{"body":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.URI Description: User Resource associated with the media Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eInfotainment Infotainment--\u003eMedia Media--\u003ePlayed Played--\u003eURI Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.Infotainment.Media.Played.URI [get] OK Vehicle.Cabin.Infotainment.Media.Played.URI: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.Infotainment.Media.Played.URI Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.Infotainment.Media.Played.URI Data Type \u0026 Unit Path Vehicle.Cabin.Infotainment.Media.Played.URI VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.Infotainment.Media.Played.URI is a Sensor.\nThe vehicle signal Vehicle.Cabin.Infotainment.Media.Played.URI is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.Infotainment.Media.Played.URI is 1ed22b9925c3502d8d1389c8e02d0f07\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.Infotainment.Media.Played.URI …","ref":"/leda/docs/vss/vehicle/cabin/infotainment/media/played/uri/","tags":"","title":"URI"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eLeft Left--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution is 33ca2e1ed1b1533b8e1309320074c07b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/left/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eRight Right--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution is 00e25d807a755c4cb978a40ebfc0e8d0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/right/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eLeft Left--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution is 3c22cd8ac56b59978927fc815ee79104\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/left/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eRight Right--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution is 10d42dd4337450e2af1c0dd2c9dcb3a7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/right/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution Description: Direction of airstream Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eLeft Left--\u003eAirDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution [get] OK Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UP', 'MIDDLE', 'DOWN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution is f1e2dc36082b5980920c5fe3ee875659\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/left/airdistribution/","tags":"","title":"AirDistribution"},{"body":" Full qualified VSS Path: Vehicle.Cabin Description: All in-cabin components, including doors. Navigation flowchart LR Vehicle--\u003eCabin Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin Signal Information The vehicle signal Vehicle.Cabin is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin is 1a94457b237f5e8eb3c77c0532ac88d7\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.Convertible (Convertible roof.) Vehicle.Cabin.Door (All doors, including windows and switches.) Vehicle.Cabin.DoorCount (Number of doors in vehicle.) Vehicle.Cabin.DriverPosition (The position of the driver seat in row 1.) Vehicle.Cabin.HVAC (Climate control) Vehicle.Cabin.Infotainment (Infotainment system.) Vehicle.Cabin.Lights (Interior lights signals and sensors.) Vehicle.Cabin.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.Cabin.RearShade (Rear window shade.) Vehicle.Cabin.RearviewMirror (Rearview mirror.) Vehicle.Cabin.Seat (All seats.) Vehicle.Cabin.SeatPosCount (Number of seats across each row from the front to the rear.) Vehicle.Cabin.SeatRowCount (Number of seat rows in vehicle.) Vehicle.Cabin.Sunroof (Sun roof status.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin Description: All in-cabin …","ref":"/leda/docs/vss/vehicle/cabin/","tags":"","title":"Cabin"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eLeft Left--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed is 483bcf787a715f10a1c936464fcb18a2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/left/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eRight Right--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed is 4b15871631c35ca583a1fc64524676ef\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/right/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eLeft Left--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed is 3eb6e8979cb25efe9f33bc89c6b9e364\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/left/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eRight Right--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed is b83d6d979cbc5507b1c43e988024c0af\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/right/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed Description: Fan Speed, 0 = off. 100 = max Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eLeft Left--\u003eFanSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed [get] OK Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed is 13170d23934e5a4ab97174ddee4dc180\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/left/fanspeed/","tags":"","title":"FanSpeed"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC Description: Climate control Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC Signal Information The vehicle signal Vehicle.Cabin.HVAC is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC is f8ff34337cdf568e91ab406a365c3249\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.AmbientAirTemperature (Ambient air temperature inside the vehicle.) Vehicle.Cabin.HVAC.IsAirConditioningActive (Is Air conditioning active.) Vehicle.Cabin.HVAC.IsFrontDefrosterActive (Is front defroster active.) Vehicle.Cabin.HVAC.IsRearDefrosterActive (Is rear defroster active.) Vehicle.Cabin.HVAC.IsRecirculationActive (Is recirculation active.) Vehicle.Cabin.HVAC.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.Cabin.HVAC.Station (HVAC for single station in the vehicle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC Description: Climate …","ref":"/leda/docs/vss/vehicle/cabin/hvac/","tags":"","title":"HVAC"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left.IsHeatingOn Description: Mirror Heater on or off. True = Heater On. False = Heater Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eLeft Left--\u003eIsHeatingOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Mirrors.Left.IsHeatingOn [get] OK Vehicle.Body.Mirrors.Left.IsHeatingOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Mirrors.Left.IsHeatingOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Left.IsHeatingOn Data Type \u0026 Unit Path Vehicle.Body.Mirrors.Left.IsHeatingOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Mirrors.Left.IsHeatingOn is an Actuator.\nThe vehicle signal Vehicle.Body.Mirrors.Left.IsHeatingOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Left.IsHeatingOn is b8591c0592d8525e91e1a04495b6995d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left.IsHeatingOn …","ref":"/leda/docs/vss/vehicle/body/mirrors/left/isheatingon/","tags":"","title":"IsHeatingOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right.IsHeatingOn Description: Mirror Heater on or off. True = Heater On. False = Heater Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eRight Right--\u003eIsHeatingOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Mirrors.Right.IsHeatingOn [get] OK Vehicle.Body.Mirrors.Right.IsHeatingOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Mirrors.Right.IsHeatingOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Right.IsHeatingOn Data Type \u0026 Unit Path Vehicle.Body.Mirrors.Right.IsHeatingOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Mirrors.Right.IsHeatingOn is an Actuator.\nThe vehicle signal Vehicle.Body.Mirrors.Right.IsHeatingOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Right.IsHeatingOn is 9a57455f48ea5fdbb7a998905dda318c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right.IsHeatingOn …","ref":"/leda/docs/vss/vehicle/body/mirrors/right/isheatingon/","tags":"","title":"IsHeatingOn"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Left Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Left Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Left is 7cc0977f55f15f2c884e19a25d07a8b4\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row1.Left.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row1.Left.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Left …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Left Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Left Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Left is 48fcecce8d925121b116ed3ecc3157bb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row2.Left.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row2.Left.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Left …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Left Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Left Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Left is e4d100e0bcb75fedb4ab0761d92bcf0e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row3.Left.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row3.Left.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Left …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left.Pan Description: Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eLeft Left--\u003ePan Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Mirrors.Left.Pan [get] OK Vehicle.Body.Mirrors.Left.Pan: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Mirrors.Left.Pan 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Left.Pan Data Type \u0026 Unit Path Vehicle.Body.Mirrors.Left.Pan VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Mirrors.Left.Pan is an Actuator.\nThe vehicle signal Vehicle.Body.Mirrors.Left.Pan is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Left.Pan is 9dae4bc33a28531199fce500e0562f82\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left.Pan Description: …","ref":"/leda/docs/vss/vehicle/body/mirrors/left/pan/","tags":"","title":"Pan"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right.Pan Description: Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eRight Right--\u003ePan Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Mirrors.Right.Pan [get] OK Vehicle.Body.Mirrors.Right.Pan: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Mirrors.Right.Pan 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Right.Pan Data Type \u0026 Unit Path Vehicle.Body.Mirrors.Right.Pan VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Mirrors.Right.Pan is an Actuator.\nThe vehicle signal Vehicle.Body.Mirrors.Right.Pan is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Right.Pan is 26088f96804d5d7e811ba50bfb1113eb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right.Pan Description: …","ref":"/leda/docs/vss/vehicle/body/mirrors/right/pan/","tags":"","title":"Pan"},{"body":" Full qualified VSS Path: Vehicle.Cabin.RearShade.Position Description: Position of window blind. 0 = Fully retracted. 100 = Fully deployed. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eRearShade RearShade--\u003ePosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.RearShade.Position [get] OK Vehicle.Cabin.RearShade.Position: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.RearShade.Position 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.RearShade.Position Data Type \u0026 Unit Path Vehicle.Cabin.RearShade.Position VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.RearShade.Position is an Actuator.\nThe vehicle signal Vehicle.Cabin.RearShade.Position is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.RearShade.Position is 9e16fc53f2ec575dbf66c79f969949a9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.RearShade.Position …","ref":"/leda/docs/vss/vehicle/cabin/rearshade/position/","tags":"","title":"Position"},{"body":" Full qualified VSS Path: Vehicle.Body.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003eBody Body--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.PowerOptimizeLevel [get] OK Vehicle.Body.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.Body.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.Body.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.PowerOptimizeLevel is 2fe44a1c3bb155aca782b017efeb6175\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.PowerOptimizeLevel Description: …","ref":"/leda/docs/vss/vehicle/body/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.Body.RearMainSpoilerPosition Description: Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eRearMainSpoilerPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.RearMainSpoilerPosition [get] OK Vehicle.Body.RearMainSpoilerPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.RearMainSpoilerPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.RearMainSpoilerPosition Data Type \u0026 Unit Path Vehicle.Body.RearMainSpoilerPosition VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.RearMainSpoilerPosition is an Actuator.\nThe vehicle signal Vehicle.Body.RearMainSpoilerPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.RearMainSpoilerPosition is 6209a82390585b869cc3d00d069eade2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.RearMainSpoilerPosition …","ref":"/leda/docs/vss/vehicle/body/rearmainspoilerposition/","tags":"","title":"RearMainSpoilerPosition"},{"body":" Full qualified VSS Path: Vehicle.Cabin.RearShade Description: Rear window shade. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eRearShade Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.RearShade Signal Information The vehicle signal Vehicle.Cabin.RearShade is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.RearShade is 8a0c86f4fc6f5ea8ac8cf8f327969dcc\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.RearShade.Position (Position of window blind. 0 = Fully retracted. 100 = Fully deployed.) Vehicle.Cabin.RearShade.Switch (Switch controlling sliding action such as window, sunroof, or blind.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.RearShade Description: Rear …","ref":"/leda/docs/vss/vehicle/cabin/rearshade/","tags":"","title":"RearShade"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right Description: All mirrors. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Right Signal Information The vehicle signal Vehicle.Body.Mirrors.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Right is 64291c99f7e752c2b035262c17dc85dd\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Mirrors.Right.IsHeatingOn (Mirror Heater on or off. True = Heater On. False = Heater Off.) Vehicle.Body.Mirrors.Right.Pan (Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.) Vehicle.Body.Mirrors.Right.Tilt (Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right Description: All …","ref":"/leda/docs/vss/vehicle/body/mirrors/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Right Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Right Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Right is 84b84df901075e8a8ac4837fe4af6a8e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row1.Right.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row1.Right.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Right …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Right Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Right Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Right is 028e4f674c725c009af8eaf77a79d9e7\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row2.Right.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row2.Right.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Right …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Right Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Right Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Right is a14449b5c1345feb90c2e4fbefd4ecef\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row3.Right.AirDistribution (Direction of airstream) Vehicle.Cabin.HVAC.Station.Row3.Right.FanSpeed (Fan Speed, 0 = off. 100 = max) Vehicle.Cabin.HVAC.Station.Row3.Right.Temperature (Temperature) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Right …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1 Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1 Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1 is 80860491fba75babaf3c439d1d471a6d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row1.Left (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row1.Right (HVAC for single station in the vehicle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1 Description: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/","tags":"","title":"Row1"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2 Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2 Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2 is d98e8f5f94da5acfbf428c635a8bcc0c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row2.Left (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row2.Right (HVAC for single station in the vehicle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2 Description: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/","tags":"","title":"Row2"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3 Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3 Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3 is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3 is 6eb8d63b66c859d5b36ef52d264aed2b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row3.Left (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row3.Right (HVAC for single station in the vehicle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3 Description: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/","tags":"","title":"Row3"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station Description: HVAC for single station in the vehicle Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station Signal Information The vehicle signal Vehicle.Cabin.HVAC.Station is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station is 253e683e6f135b83b6302a30b6c0ec8d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Cabin.HVAC.Station.Row1 (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row2 (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row3 (HVAC for single station in the vehicle) Vehicle.Cabin.HVAC.Station.Row4 (HVAC for single station in the vehicle) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station Description: HVAC …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/","tags":"","title":"Station"},{"body":" Full qualified VSS Path: Vehicle.Cabin.RearShade.Switch Description: Switch controlling sliding action such as window, sunroof, or blind. Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eRearShade RearShade--\u003eSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.RearShade.Switch [get] OK Vehicle.Cabin.RearShade.Switch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.RearShade.Switch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.RearShade.Switch Data Type \u0026 Unit Path Vehicle.Cabin.RearShade.Switch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'CLOSE', 'OPEN', 'ONE_SHOT_CLOSE', 'ONE_SHOT_OPEN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Cabin.RearShade.Switch is an Actuator.\nThe vehicle signal Vehicle.Cabin.RearShade.Switch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.RearShade.Switch is da9f01e9baf35544842f1a7674c5172a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Cabin.RearShade.Switch Description: …","ref":"/leda/docs/vss/vehicle/cabin/rearshade/switch/","tags":"","title":"Switch"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eLeft Left--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Left.Temperature is 347c13ff2a735d54a5f011d4573694cd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/left/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow1 Row1--\u003eRight Right--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row1.Right.Temperature is 592dc63c45145f739edbc5677196eb85\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row1/right/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eLeft Left--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Left.Temperature is 7185fb43728f53f3960e1284b89a6f66\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/left/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow2 Row2--\u003eRight Right--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row2.Right.Temperature is c6822e4c0eae59cab832057bac327c67\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row2/right/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature Description: Temperature Navigation flowchart LR Vehicle--\u003eCabin Cabin--\u003eHVAC HVAC--\u003eStation Station--\u003eRow3 Row3--\u003eLeft Left--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature [get] OK Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature Data Type \u0026 Unit Path Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature VSS: Addressing nodes Data type int8 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature is an Actuator.\nThe vehicle signal Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Cabin.HVAC.Station.Row3.Left.Temperature is b12b9565bd4e5c8e974ac0ff97223af4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/cabin/hvac/station/row3/left/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left.Tilt Description: Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eLeft Left--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Mirrors.Left.Tilt [get] OK Vehicle.Body.Mirrors.Left.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Mirrors.Left.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Left.Tilt Data Type \u0026 Unit Path Vehicle.Body.Mirrors.Left.Tilt VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Mirrors.Left.Tilt is an Actuator.\nThe vehicle signal Vehicle.Body.Mirrors.Left.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Left.Tilt is 698fee82cc115f3cba54825a298b46ab\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left.Tilt Description: …","ref":"/leda/docs/vss/vehicle/body/mirrors/left/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right.Tilt Description: Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eRight Right--\u003eTilt Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Mirrors.Right.Tilt [get] OK Vehicle.Body.Mirrors.Right.Tilt: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Mirrors.Right.Tilt 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Right.Tilt Data Type \u0026 Unit Path Vehicle.Body.Mirrors.Right.Tilt VSS: Addressing nodes Data type int8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Mirrors.Right.Tilt is an Actuator.\nThe vehicle signal Vehicle.Body.Mirrors.Right.Tilt is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Right.Tilt is 9a28a6ec824c57408881b916a1a0e32b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Right.Tilt Description: …","ref":"/leda/docs/vss/vehicle/body/mirrors/right/tilt/","tags":"","title":"Tilt"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Backup Description: Backup lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBackup Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Backup Signal Information The vehicle signal Vehicle.Body.Lights.Backup is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Backup is 4fe2cb68fc77506686eced7225aeff9a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Backup.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Backup.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Backup Description: …","ref":"/leda/docs/vss/vehicle/body/lights/backup/","tags":"","title":"Backup"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Brake Description: Brake lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBrake Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Brake Signal Information The vehicle signal Vehicle.Body.Lights.Brake is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Brake is 30eabe704102501cb299d03696fad92a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Brake.IsActive (Indicates if break-light is active. INACTIVE means lights are off. ACTIVE means lights are on. ADAPTIVE means that break-light is indicating emergency-breaking.) Vehicle.Body.Lights.Brake.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Brake Description: Brake …","ref":"/leda/docs/vss/vehicle/body/lights/brake/","tags":"","title":"Brake"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator Description: Indicator lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator Signal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator is 0566cb97d05c554eb88a07142f2475ac\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.DirectionIndicator.Left (Indicator lights.) Vehicle.Body.Lights.DirectionIndicator.Right (Indicator lights.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/","tags":"","title":"DirectionIndicator"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog Description: Fog lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog Signal Information The vehicle signal Vehicle.Body.Lights.Fog is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog is 1e90cf42bb825217b283c7285a606953\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Fog.Front (Fog lights.) Vehicle.Body.Lights.Fog.Rear (Fog lights.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog Description: Fog …","ref":"/leda/docs/vss/vehicle/body/lights/fog/","tags":"","title":"Fog"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Front Description: Fog lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Fog--\u003eFront Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog.Front Signal Information The vehicle signal Vehicle.Body.Lights.Fog.Front is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog.Front is 230cc65abaaf500c9085c29d48107552\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Fog.Front.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Fog.Front.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Front Description: …","ref":"/leda/docs/vss/vehicle/body/lights/fog/front/","tags":"","title":"Front"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Hazard Description: Hazard lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eHazard Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Hazard Signal Information The vehicle signal Vehicle.Body.Lights.Hazard is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Hazard is 803498c3be6253dfb074c0e0294be758\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Hazard.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Hazard.IsSignaling (Indicates if light is signaling or off. True = signaling. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Hazard Description: …","ref":"/leda/docs/vss/vehicle/body/lights/hazard/","tags":"","title":"Hazard"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.High Description: Beam lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Beam--\u003eHigh Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam.High Signal Information The vehicle signal Vehicle.Body.Lights.Beam.High is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam.High is 306b51d2e1ec572fa80172aad6727da0\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Beam.High.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Beam.High.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.High Description: …","ref":"/leda/docs/vss/vehicle/body/lights/beam/high/","tags":"","title":"High"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Brake.IsActive Description: Indicates if break-light is active. INACTIVE means lights are off. ACTIVE means lights are on. ADAPTIVE means that break-light is indicating emergency-breaking. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBrake Brake--\u003eIsActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Brake.IsActive [get] OK Vehicle.Body.Lights.Brake.IsActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Brake.IsActive Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Brake.IsActive Data Type \u0026 Unit Path Vehicle.Body.Lights.Brake.IsActive VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'ACTIVE', 'ADAPTIVE'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.Lights.Brake.IsActive is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Brake.IsActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Brake.IsActive is 65eb84d61ea95313985054f626b85b59\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Brake.IsActive …","ref":"/leda/docs/vss/vehicle/body/lights/brake/isactive/","tags":"","title":"IsActive"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Backup.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBackup Backup--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Backup.IsDefect [get] OK Vehicle.Body.Lights.Backup.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Backup.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Backup.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Backup.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Backup.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Backup.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Backup.IsDefect is b907c4ac4ee459faa987c64a6da424c3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Backup.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/backup/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.High.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Beam--\u003eHigh High--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Beam.High.IsDefect [get] OK Vehicle.Body.Lights.Beam.High.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Beam.High.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam.High.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Beam.High.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Beam.High.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Beam.High.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam.High.IsDefect is 83561d8c9a025cfdad6c4b325829fa00\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.High.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/beam/high/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Brake.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBrake Brake--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Brake.IsDefect [get] OK Vehicle.Body.Lights.Brake.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Brake.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Brake.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Brake.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Brake.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Brake.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Brake.IsDefect is 1db542c5ba715e09b948527418966728\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Brake.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/brake/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator DirectionIndicator--\u003eLeft Left--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect [get] OK Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator.Left.IsDefect is 32a092936fb65165ba1dd8dfa38bf77d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/left/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator DirectionIndicator--\u003eRight Right--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect [get] OK Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator.Right.IsDefect is db70c2d885725583a7ed95b215a8ec6c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/right/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Front.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Fog--\u003eFront Front--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Fog.Front.IsDefect [get] OK Vehicle.Body.Lights.Fog.Front.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Fog.Front.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog.Front.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Fog.Front.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Fog.Front.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Fog.Front.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog.Front.IsDefect is f9238f15d2615a22802ce9ec9f1d72e9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Front.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/fog/front/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Rear.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Fog--\u003eRear Rear--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Fog.Rear.IsDefect [get] OK Vehicle.Body.Lights.Fog.Rear.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Fog.Rear.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog.Rear.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Fog.Rear.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Fog.Rear.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Fog.Rear.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog.Rear.IsDefect is 1d44e594ffa35d73a6f620f479eeef4c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Rear.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/fog/rear/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Hazard.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eHazard Hazard--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Hazard.IsDefect [get] OK Vehicle.Body.Lights.Hazard.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Hazard.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Hazard.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Hazard.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Hazard.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Hazard.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Hazard.IsDefect is 25cd3475beb6543a8538974b67544c43\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Hazard.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/hazard/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.LicensePlate.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eLicensePlate LicensePlate--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.LicensePlate.IsDefect [get] OK Vehicle.Body.Lights.LicensePlate.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.LicensePlate.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.LicensePlate.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.LicensePlate.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.LicensePlate.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.LicensePlate.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.LicensePlate.IsDefect is 4de6594de7815cec97e5b851d70e239b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.LicensePlate.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/licenseplate/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Parking.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eParking Parking--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Parking.IsDefect [get] OK Vehicle.Body.Lights.Parking.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Parking.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Parking.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Parking.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Parking.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Parking.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Parking.IsDefect is 56761305eae559c7931f6ff5fee0dfa8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Parking.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/parking/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Running.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eRunning Running--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Running.IsDefect [get] OK Vehicle.Body.Lights.Running.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Running.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Running.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Running.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Running.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Running.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Running.IsDefect is 7cda127e6d45547681757e789c0b7a87\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Running.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/running/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Backup.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBackup Backup--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Backup.IsOn [get] OK Vehicle.Body.Lights.Backup.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Backup.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Backup.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Backup.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Backup.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Backup.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Backup.IsOn is ef23a3fa6106564195a66e21d8cf69b4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Backup.IsOn Description: …","ref":"/leda/docs/vss/vehicle/body/lights/backup/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.High.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Beam--\u003eHigh High--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Beam.High.IsOn [get] OK Vehicle.Body.Lights.Beam.High.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Beam.High.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam.High.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Beam.High.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Beam.High.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Beam.High.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam.High.IsOn is 24d1346519b05697b872c06556a09fb4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.High.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/beam/high/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Front.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Fog--\u003eFront Front--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Fog.Front.IsOn [get] OK Vehicle.Body.Lights.Fog.Front.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Fog.Front.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog.Front.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Fog.Front.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Fog.Front.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Fog.Front.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog.Front.IsOn is 0ec10846d20a5d1b9b8a286303ecb844\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Front.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/fog/front/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Rear.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Fog--\u003eRear Rear--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Fog.Rear.IsOn [get] OK Vehicle.Body.Lights.Fog.Rear.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Fog.Rear.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog.Rear.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Fog.Rear.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Fog.Rear.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Fog.Rear.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog.Rear.IsOn is 1fe08a2f687c5c2880adef26cc7de746\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Rear.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/fog/rear/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.LicensePlate.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eLicensePlate LicensePlate--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.LicensePlate.IsOn [get] OK Vehicle.Body.Lights.LicensePlate.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.LicensePlate.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.LicensePlate.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.LicensePlate.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.LicensePlate.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.LicensePlate.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.LicensePlate.IsOn is afeace5d76ed53f989ae4251090ba069\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.LicensePlate.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/licenseplate/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Parking.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eParking Parking--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Parking.IsOn [get] OK Vehicle.Body.Lights.Parking.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Parking.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Parking.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Parking.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Parking.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Parking.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Parking.IsOn is 6ba0825427335408ad7d0f148d6250ea\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Parking.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/parking/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Running.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eRunning Running--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Running.IsOn [get] OK Vehicle.Body.Lights.Running.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Running.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Running.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Running.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Running.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Running.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Running.IsOn is 1c4e44f1e0275965b466ac674a5b8cac\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Running.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/running/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling Description: Indicates if light is signaling or off. True = signaling. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator DirectionIndicator--\u003eLeft Left--\u003eIsSignaling Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling [get] OK Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling Data Type \u0026 Unit Path Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling is 33ac6ec5e4d9550aac6ae0ce97dae259\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/left/issignaling/","tags":"","title":"IsSignaling"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling Description: Indicates if light is signaling or off. True = signaling. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator DirectionIndicator--\u003eRight Right--\u003eIsSignaling Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling [get] OK Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling Data Type \u0026 Unit Path Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling is 9b0a1dab153f5dcda8df2116c3b6d487\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/right/issignaling/","tags":"","title":"IsSignaling"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Hazard.IsSignaling Description: Indicates if light is signaling or off. True = signaling. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eHazard Hazard--\u003eIsSignaling Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Hazard.IsSignaling [get] OK Vehicle.Body.Lights.Hazard.IsSignaling: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Hazard.IsSignaling false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Hazard.IsSignaling Data Type \u0026 Unit Path Vehicle.Body.Lights.Hazard.IsSignaling VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Hazard.IsSignaling is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Hazard.IsSignaling is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Hazard.IsSignaling is c53950205aa15dffa304390dcb761cc3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Hazard.IsSignaling …","ref":"/leda/docs/vss/vehicle/body/lights/hazard/issignaling/","tags":"","title":"IsSignaling"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Left Description: Indicator lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator DirectionIndicator--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator.Left Signal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator.Left is 446dea42b8e95d87b45e5e51c881bf98\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.DirectionIndicator.Left.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.DirectionIndicator.Left.IsSignaling (Indicates if light is signaling or off. True = signaling. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Left …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left Description: All mirrors. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Mirrors--\u003eLeft Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors.Left Signal Information The vehicle signal Vehicle.Body.Mirrors.Left is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors.Left is 22609e45a09d58fc85cb77959a686abc\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Mirrors.Left.IsHeatingOn (Mirror Heater on or off. True = Heater On. False = Heater Off.) Vehicle.Body.Mirrors.Left.Pan (Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.) Vehicle.Body.Mirrors.Left.Tilt (Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors.Left Description: All …","ref":"/leda/docs/vss/vehicle/body/mirrors/left/","tags":"","title":"Left"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.LicensePlate Description: License plate lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eLicensePlate Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.LicensePlate Signal Information The vehicle signal Vehicle.Body.Lights.LicensePlate is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.LicensePlate is 7bb12e42a8c45c198f83bf41b19131fa\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.LicensePlate.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.LicensePlate.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.LicensePlate …","ref":"/leda/docs/vss/vehicle/body/lights/licenseplate/","tags":"","title":"LicensePlate"},{"body":" Full qualified VSS Path: Vehicle.Body.Mirrors Description: All mirrors. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eMirrors Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Mirrors Signal Information The vehicle signal Vehicle.Body.Mirrors is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Mirrors is a4ea618914885a239ef5fa62c671a800\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Mirrors.Left (All mirrors.) Vehicle.Body.Mirrors.Right (All mirrors.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Mirrors Description: All …","ref":"/leda/docs/vss/vehicle/body/mirrors/","tags":"","title":"Mirrors"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Parking Description: Parking lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eParking Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Parking Signal Information The vehicle signal Vehicle.Body.Lights.Parking is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Parking is dfb819be5cec5be09b9fb743829301c3\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Parking.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Parking.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Parking Description: …","ref":"/leda/docs/vss/vehicle/body/lights/parking/","tags":"","title":"Parking"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Rear Description: Fog lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eFog Fog--\u003eRear Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Fog.Rear Signal Information The vehicle signal Vehicle.Body.Lights.Fog.Rear is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Fog.Rear is 38359f258135516cb49c0fa1f093d478\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Fog.Rear.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Fog.Rear.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Fog.Rear Description: …","ref":"/leda/docs/vss/vehicle/body/lights/fog/rear/","tags":"","title":"Rear"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Right Description: Indicator lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eDirectionIndicator DirectionIndicator--\u003eRight Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.DirectionIndicator.Right Signal Information The vehicle signal Vehicle.Body.Lights.DirectionIndicator.Right is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.DirectionIndicator.Right is 9922f6b417e95f1c945ef9f414bcdf78\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.DirectionIndicator.Right.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.DirectionIndicator.Right.IsSignaling (Indicates if light is signaling or off. True = signaling. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.DirectionIndicator.Right …","ref":"/leda/docs/vss/vehicle/body/lights/directionindicator/right/","tags":"","title":"Right"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Running Description: Running lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eRunning Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Running Signal Information The vehicle signal Vehicle.Body.Lights.Running is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Running is 38868a9f1bda573595501302c1f0a1db\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Running.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Running.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Running Description: …","ref":"/leda/docs/vss/vehicle/body/lights/running/","tags":"","title":"Running"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition Description: Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. Comment: Default parking position might be used as reference position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eActualPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.ActualPosition is eddee2607a135582bbcf3d3afc845892\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/actualposition/","tags":"","title":"ActualPosition"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam Description: Beam lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam Signal Information The vehicle signal Vehicle.Body.Lights.Beam is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam is 6685308a9d955ecdad92a7cc68666a12\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Beam.High (Beam lights.) Vehicle.Body.Lights.Beam.Low (Beam lights.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam Description: Beam …","ref":"/leda/docs/vss/vehicle/body/lights/beam/","tags":"","title":"Beam"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent Description: Actual current used by wiper drive. Comment: May be negative in special situations. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eDriveCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent is 7a254692329055dfb4089e2dcc1d4ef3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/drivecurrent/","tags":"","title":"DriveCurrent"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.Frequency Description: Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range. Comment: Examples - 0 = Wipers stopped, 80 = Wipers doing 80 cycles per minute (in WIPE mode). Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eFrequency Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.Frequency [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.Frequency: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.Frequency 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.Frequency Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.Frequency VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.Frequency is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.Frequency is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.Frequency is 371171d971995c999585b028e19be461\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/frequency/","tags":"","title":"Frequency"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.Intensity Description: Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/… - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eIntensity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.Intensity [get] OK Vehicle.Body.Windshield.Rear.Wiping.Intensity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.Intensity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.Intensity Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.Intensity VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.Intensity is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.Intensity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.Intensity is f18b13b9d96b51c492c031d3d86d22da\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/intensity/","tags":"","title":"Intensity"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked Description: Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eIsBlocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked is 046e818b4dd9595a8301503e9afe028b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/isblocked/","tags":"","title":"IsBlocked"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.Low.IsDefect Description: Indicates if light is defect. True = Light is defect. False = Light has no defect. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Beam--\u003eLow Low--\u003eIsDefect Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Beam.Low.IsDefect [get] OK Vehicle.Body.Lights.Beam.Low.IsDefect: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Beam.Low.IsDefect false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam.Low.IsDefect Data Type \u0026 Unit Path Vehicle.Body.Lights.Beam.Low.IsDefect VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Beam.Low.IsDefect is a Sensor.\nThe vehicle signal Vehicle.Body.Lights.Beam.Low.IsDefect is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam.Low.IsDefect is 3a135f1267ea5b2a80aa9a17fc8072db\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.Low.IsDefect …","ref":"/leda/docs/vss/vehicle/body/lights/beam/low/isdefect/","tags":"","title":"IsDefect"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle Description: Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed. Comment: In continuous wiping between A and B this sensor can be used a trigger to update TargetPosition. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eIsEndingWipeCycle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle is c1357156d87c58f49d4c43c2a6e97c03\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/isendingwipecycle/","tags":"","title":"IsEndingWipeCycle"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.IsHeatingOn Description: Windshield heater status. False - off, True - on. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eIsHeatingOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.IsHeatingOn [get] OK Vehicle.Body.Windshield.Rear.IsHeatingOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.IsHeatingOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.IsHeatingOn Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.IsHeatingOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.IsHeatingOn is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.IsHeatingOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.IsHeatingOn is 76d811b4c4c356f4898dd6383e28bc6f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.IsHeatingOn …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/isheatingon/","tags":"","title":"IsHeatingOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.IsHighBeamSwitchOn Description: Status of the high beam switch. True = high beam enabled. False = high beam not enabled. Comment: This signal indicates the status of the switch and does not indicate if low or high beam actually are on. That typically depends on vehicle logic and other signals like Lights.LightSwitch and Vehicle.LowVoltageSystemState. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eIsHighBeamSwitchOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.IsHighBeamSwitchOn [get] OK Vehicle.Body.Lights.IsHighBeamSwitchOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.IsHighBeamSwitchOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.IsHighBeamSwitchOn Data Type \u0026 Unit Path Vehicle.Body.Lights.IsHighBeamSwitchOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.IsHighBeamSwitchOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.IsHighBeamSwitchOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.IsHighBeamSwitchOn is ac7db3cd30f55650bc6939df504f1a79\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.IsHighBeamSwitchOn …","ref":"/leda/docs/vss/vehicle/body/lights/ishighbeamswitchon/","tags":"","title":"IsHighBeamSwitchOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow Description: Low level indication for washer fluid. True = Level Low. False = Level OK. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWasherFluid WasherFluid--\u003eIsLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow [get] OK Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow is 8ca0356548ae54e8af3aeace49e5ed71\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/washerfluid/islevellow/","tags":"","title":"IsLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.Low.IsOn Description: Indicates if light is on or off. True = On. False = Off. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Beam--\u003eLow Low--\u003eIsOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.Beam.Low.IsOn [get] OK Vehicle.Body.Lights.Beam.Low.IsOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.Beam.Low.IsOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam.Low.IsOn Data Type \u0026 Unit Path Vehicle.Body.Lights.Beam.Low.IsOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Lights.Beam.Low.IsOn is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.Beam.Low.IsOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam.Low.IsOn is 8b4d4855b0c95963a25dc564c9758610\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.Low.IsOn …","ref":"/leda/docs/vss/vehicle/body/lights/beam/low/ison/","tags":"","title":"IsOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated Description: Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eIsOverheated Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated is d30bc6f33b995ef491c252980a559ee2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/isoverheated/","tags":"","title":"IsOverheated"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached Description: Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eIsPositionReached Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached is ad35e8d17cd95273b1091dcef2104ea1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/ispositionreached/","tags":"","title":"IsPositionReached"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError Description: Indicates system failure. True if wiping is disabled due to system failure. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eIsWiperError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError is ac5983deacbe59d7ba1312d44bfd9cd4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/iswipererror/","tags":"","title":"IsWiperError"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn Description: Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eIsWipersWorn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn [get] OK Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn is 0e8d5f7cb6295b908be3a03e8792cca8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/iswipersworn/","tags":"","title":"IsWipersWorn"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping Description: Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eIsWiping Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping is 4e001bf679e85c9aa7319bafc3a86e75\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/iswiping/","tags":"","title":"IsWiping"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.WasherFluid.Level Description: Washer fluid level as a percent. 0 = Empty. 100 = Full. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWasherFluid WasherFluid--\u003eLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.WasherFluid.Level [get] OK Vehicle.Body.Windshield.Rear.WasherFluid.Level: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.WasherFluid.Level 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.WasherFluid.Level Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.WasherFluid.Level VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.WasherFluid.Level is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.WasherFluid.Level is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.WasherFluid.Level is c167e5b265895c108da1b9582de2dd91\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/washerfluid/level/","tags":"","title":"Level"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights Description: Exterior lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights Signal Information The vehicle signal Vehicle.Body.Lights is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights is 399d1ec14d6f55bb825e078a801bde55\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Backup (Backup lights.) Vehicle.Body.Lights.Beam (Beam lights.) Vehicle.Body.Lights.Brake (Brake lights.) Vehicle.Body.Lights.DirectionIndicator (Indicator lights.) Vehicle.Body.Lights.Fog (Fog lights.) Vehicle.Body.Lights.Hazard (Hazard lights.) Vehicle.Body.Lights.IsHighBeamSwitchOn (Status of the high beam switch. True = high beam enabled. False = high beam not enabled.) Vehicle.Body.Lights.LicensePlate (License plate lights.) Vehicle.Body.Lights.LightSwitch (Status of the vehicle main light switch.) Vehicle.Body.Lights.Parking (Parking lights.) Vehicle.Body.Lights.Running (Running lights.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights Description: Exterior …","ref":"/leda/docs/vss/vehicle/body/lights/","tags":"","title":"Lights"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.LightSwitch Description: Status of the vehicle main light switch. Comment: A vehicle typically does not support all alternatives. Which lights that actually are lit may vary according to vehicle configuration and local legislation. OFF is typically indicated by 0. POSITION is typically indicated by ISO 7000 symbol 0456. DAYTIME_RUNNING_LIGHTS (DRL) can be indicated by ISO 7000 symbol 2611. AUTO indicates that vehicle automatically selects suitable lights. BEAM is typically indicated by ISO 7000 symbol 0083. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eLightSwitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Lights.LightSwitch [get] OK Vehicle.Body.Lights.LightSwitch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Lights.LightSwitch Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.LightSwitch Data Type \u0026 Unit Path Vehicle.Body.Lights.LightSwitch VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['OFF', 'POSITION', 'DAYTIME_RUNNING_LIGHTS', 'AUTO', 'BEAM'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.Lights.LightSwitch is an Actuator.\nThe vehicle signal Vehicle.Body.Lights.LightSwitch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.LightSwitch is 2feb14a3558256339442413783969f4f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.LightSwitch Description: …","ref":"/leda/docs/vss/vehicle/body/lights/lightswitch/","tags":"","title":"LightSwitch"},{"body":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.Low Description: Beam lights. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eLights Lights--\u003eBeam Beam--\u003eLow Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Lights.Beam.Low Signal Information The vehicle signal Vehicle.Body.Lights.Beam.Low is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Lights.Beam.Low is f6f21ea5b263545297f4411b2e15037f\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Lights.Beam.Low.IsDefect (Indicates if light is defect. True = Light is defect. False = Light has no defect.) Vehicle.Body.Lights.Beam.Low.IsOn (Indicates if light is on or off. True = On. False = Off.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Lights.Beam.Low Description: …","ref":"/leda/docs/vss/vehicle/body/lights/beam/low/","tags":"","title":"Low"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.Mode Description: Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.Mode [get] OK Vehicle.Body.Windshield.Rear.Wiping.Mode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.Mode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.Mode Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.Mode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['OFF', 'SLOW', 'MEDIUM', 'FAST', 'INTERVAL', 'RAIN_SENSOR'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.Mode is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.Mode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.Mode is 8cc0b88ac8b45f5fa30bb7755ce22648\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.Mode …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/mode/","tags":"","title":"Mode"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.Mode Description: Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.Mode [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.Mode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.Mode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.Mode Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.Mode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['STOP_HOLD', 'WIPE', 'PLANT_MODE', 'EMERGENCY_STOP'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.Mode is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.Mode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.Mode is f2f47522466d570baa7618fac5b0359c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/mode/","tags":"","title":"Mode"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System Description: Signals to control behavior of wipers in detail. By default VSS expects only one instance. Comment: These signals are typically not directly available to the user/driver of the vehicle. The overlay in overlays/extensions/dual_wiper_systems.vspec can be used to modify this branch to support two instances; Primary and Secondary. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System Signal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System is a00826f6ecc25c3fae7ad164361bdb33\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Rear.Wiping.System.ActualPosition (Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.) Vehicle.Body.Windshield.Rear.Wiping.System.DriveCurrent (Actual current used by wiper drive.) Vehicle.Body.Windshield.Rear.Wiping.System.Frequency (Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.) Vehicle.Body.Windshield.Rear.Wiping.System.IsBlocked (Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.) Vehicle.Body.Windshield.Rear.Wiping.System.IsEndingWipeCycle (Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.) Vehicle.Body.Windshield.Rear.Wiping.System.IsOverheated (Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.) Vehicle.Body.Windshield.Rear.Wiping.System.IsPositionReached (Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.) Vehicle.Body.Windshield.Rear.Wiping.System.IsWiperError (Indicates system failure. True if wiping is disabled due to system failure.) Vehicle.Body.Windshield.Rear.Wiping.System.IsWiping (Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.) Vehicle.Body.Windshield.Rear.Wiping.System.Mode (Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.) Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition (Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/","tags":"","title":"System"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition Description: Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed. Comment: Default parking position might be used as reference position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eSystem System--\u003eTargetPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition [get] OK Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.System.TargetPosition is c39bef0760185555904a92a305392080\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/system/targetposition/","tags":"","title":"TargetPosition"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.WasherFluid Description: Windshield washer fluid signals Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWasherFluid Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.WasherFluid Signal Information The vehicle signal Vehicle.Body.Windshield.Rear.WasherFluid is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.WasherFluid is 1ea4ac2370e1567b9b812c1e3020ddfb\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Rear.WasherFluid.IsLevelLow (Low level indication for washer fluid. True = Level Low. False = Level OK.) Vehicle.Body.Windshield.Rear.WasherFluid.Level (Washer fluid level as a percent. 0 = Empty. 100 = Full.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.WasherFluid …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/washerfluid/","tags":"","title":"WasherFluid"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping.WiperWear Description: Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Wiping--\u003eWiperWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Rear.Wiping.WiperWear [get] OK Vehicle.Body.Windshield.Rear.Wiping.WiperWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Rear.Wiping.WiperWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping.WiperWear Data Type \u0026 Unit Path Vehicle.Body.Windshield.Rear.Wiping.WiperWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping.WiperWear is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Rear.Wiping.WiperWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping.WiperWear is afd6a352230f5eeaa8ac5f1f188bfd33\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/wiperwear/","tags":"","title":"WiperWear"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping Description: Windshield wiper signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Rear--\u003eWiping Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear.Wiping Signal Information The vehicle signal Vehicle.Body.Windshield.Rear.Wiping is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear.Wiping is f56e80a50fd75dbca48581aea4f012b7\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Rear.Wiping.Intensity (Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/… - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.) Vehicle.Body.Windshield.Rear.Wiping.IsWipersWorn (Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.) Vehicle.Body.Windshield.Rear.Wiping.Mode (Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.) Vehicle.Body.Windshield.Rear.Wiping.System (Signals to control behavior of wipers in detail. By default VSS expects only one instance.) Vehicle.Body.Windshield.Rear.Wiping.WiperWear (Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear.Wiping …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/wiping/","tags":"","title":"Wiping"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition Description: Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. Comment: Default parking position might be used as reference position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eActualPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition [get] OK Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.ActualPosition is 026307b591465a8a99ffc0ebf262b393\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/actualposition/","tags":"","title":"ActualPosition"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent Description: Actual current used by wiper drive. Comment: May be negative in special situations. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eDriveCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent [get] OK Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent is 251e695821b758e7b7d459d5e2ab6ca4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/drivecurrent/","tags":"","title":"DriveCurrent"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.Frequency Description: Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range. Comment: Examples - 0 = Wipers stopped, 80 = Wipers doing 80 cycles per minute (in WIPE mode). Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eFrequency Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.Frequency [get] OK Vehicle.Body.Windshield.Front.Wiping.System.Frequency: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.Frequency 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.Frequency Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.Frequency VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.Frequency is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.Frequency is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.Frequency is 7394c8b8d20d52638881161ec1b41fc0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/frequency/","tags":"","title":"Frequency"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front Description: Windshield signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front Signal Information The vehicle signal Vehicle.Body.Windshield.Front is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front is 8f0c61e4e4f557d98729210fc3c74f72\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Front.IsHeatingOn (Windshield heater status. False - off, True - on.) Vehicle.Body.Windshield.Front.WasherFluid (Windshield washer fluid signals) Vehicle.Body.Windshield.Front.Wiping (Windshield wiper signals.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Front Description: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/","tags":"","title":"Front"},{"body":" Full qualified VSS Path: Vehicle.Body.Horn Description: Horn signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eHorn Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Horn Signal Information The vehicle signal Vehicle.Body.Horn is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Horn is 09c76633887f52268b960740eb969c89\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Horn.IsActive (Horn active or inactive. True = Active. False = Inactive.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Horn Description: Horn signals. …","ref":"/leda/docs/vss/vehicle/body/horn/","tags":"","title":"Horn"},{"body":" Full qualified VSS Path: Vehicle.Body.Raindetection.Intensity Description: Rain intensity. 0 = Dry, No Rain. 100 = Covered. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eRaindetection Raindetection--\u003eIntensity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Raindetection.Intensity [get] OK Vehicle.Body.Raindetection.Intensity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Raindetection.Intensity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Raindetection.Intensity Data Type \u0026 Unit Path Vehicle.Body.Raindetection.Intensity VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Raindetection.Intensity is a Sensor.\nThe vehicle signal Vehicle.Body.Raindetection.Intensity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Raindetection.Intensity is 1ee0a2f22e8257d299425a4ff2652555\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Raindetection.Intensity …","ref":"/leda/docs/vss/vehicle/body/raindetection/intensity/","tags":"","title":"Intensity"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.Intensity Description: Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/… - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eIntensity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.Intensity [get] OK Vehicle.Body.Windshield.Front.Wiping.Intensity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.Intensity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.Intensity Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.Intensity VSS: Addressing nodes Data type uint8 VSS: Datatypes Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.Intensity is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.Intensity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.Intensity is 7cdd36d1cc8f5f9a9f079f663190b588\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/intensity/","tags":"","title":"Intensity"},{"body":" Full qualified VSS Path: Vehicle.Body.Horn.IsActive Description: Horn active or inactive. True = Active. False = Inactive. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eHorn Horn--\u003eIsActive Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Horn.IsActive [get] OK Vehicle.Body.Horn.IsActive: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Horn.IsActive false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Horn.IsActive Data Type \u0026 Unit Path Vehicle.Body.Horn.IsActive VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Horn.IsActive is an Actuator.\nThe vehicle signal Vehicle.Body.Horn.IsActive is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Horn.IsActive is ba20deed9314525bb9d552a2b787fb20\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Horn.IsActive Description: Horn …","ref":"/leda/docs/vss/vehicle/body/horn/isactive/","tags":"","title":"IsActive"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked Description: Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eIsBlocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked [get] OK Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked is 4b526a2c781e56e386c82df226061f9e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/isblocked/","tags":"","title":"IsBlocked"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle Description: Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed. Comment: In continuous wiping between A and B this sensor can be used a trigger to update TargetPosition. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eIsEndingWipeCycle Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle [get] OK Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle is 5000f7f0c39e5fed9a95413ae4166482\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/isendingwipecycle/","tags":"","title":"IsEndingWipeCycle"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.IsHeatingOn Description: Windshield heater status. False - off, True - on. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eIsHeatingOn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.IsHeatingOn [get] OK Vehicle.Body.Windshield.Front.IsHeatingOn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.IsHeatingOn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.IsHeatingOn Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.IsHeatingOn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.IsHeatingOn is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.IsHeatingOn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.IsHeatingOn is 26e6a3b7e9bb58bebba29258faa6e300\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.IsHeatingOn …","ref":"/leda/docs/vss/vehicle/body/windshield/front/isheatingon/","tags":"","title":"IsHeatingOn"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow Description: Low level indication for washer fluid. True = Level Low. False = Level OK. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWasherFluid WasherFluid--\u003eIsLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow [get] OK Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.WasherFluid.IsLevelLow is 8ca54695ad115f9bb6f56d7c450781a7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/washerfluid/islevellow/","tags":"","title":"IsLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated Description: Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eIsOverheated Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated [get] OK Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated is e05d376ec2525ba2b61039d55f93760f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/isoverheated/","tags":"","title":"IsOverheated"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached Description: Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eIsPositionReached Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached [get] OK Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached is d42149fa8982593991aa5cd13a1cdee9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/ispositionreached/","tags":"","title":"IsPositionReached"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError Description: Indicates system failure. True if wiping is disabled due to system failure. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eIsWiperError Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError [get] OK Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError is 5276055d973f57998e1b8d6e536de735\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/iswipererror/","tags":"","title":"IsWiperError"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn Description: Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eIsWipersWorn Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn [get] OK Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn is b04ccc7daedb559c9bcdda6b00332be5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/iswipersworn/","tags":"","title":"IsWipersWorn"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.IsWiping Description: Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eIsWiping Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.IsWiping [get] OK Vehicle.Body.Windshield.Front.Wiping.System.IsWiping: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.IsWiping false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.IsWiping Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.IsWiping VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsWiping is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.IsWiping is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.IsWiping is 2015a4610d7a5fbdbb63b260640838e6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/iswiping/","tags":"","title":"IsWiping"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.WasherFluid.Level Description: Washer fluid level as a percent. 0 = Empty. 100 = Full. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWasherFluid WasherFluid--\u003eLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.WasherFluid.Level [get] OK Vehicle.Body.Windshield.Front.WasherFluid.Level: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.WasherFluid.Level 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.WasherFluid.Level Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.WasherFluid.Level VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.WasherFluid.Level is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.WasherFluid.Level is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.WasherFluid.Level is a36dfb91414f5792bd01d193dceff1f4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/washerfluid/level/","tags":"","title":"Level"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.Mode Description: Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.Mode [get] OK Vehicle.Body.Windshield.Front.Wiping.Mode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.Mode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.Mode Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.Mode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['OFF', 'SLOW', 'MEDIUM', 'FAST', 'INTERVAL', 'RAIN_SENSOR'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.Mode is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.Mode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.Mode is 3ee6552c96e551c5b06b79ad30226767\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.Mode …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/mode/","tags":"","title":"Mode"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.Mode Description: Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.Mode [get] OK Vehicle.Body.Windshield.Front.Wiping.System.Mode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.Mode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.Mode Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.Mode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['STOP_HOLD', 'WIPE', 'PLANT_MODE', 'EMERGENCY_STOP'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.Mode is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.Mode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.Mode is d15518f5d1bc54a38718f43ef749dd34\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/mode/","tags":"","title":"Mode"},{"body":" Full qualified VSS Path: Vehicle.Body.Raindetection Description: Rainsensor signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eRaindetection Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Raindetection Signal Information The vehicle signal Vehicle.Body.Raindetection is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Raindetection is f16759f3dcfb5be4832e962da29ebd6c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Raindetection.Intensity (Rain intensity. 0 = Dry, No Rain. 100 = Covered.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Raindetection Description: …","ref":"/leda/docs/vss/vehicle/body/raindetection/","tags":"","title":"Raindetection"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear Description: Windshield signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eRear Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Rear Signal Information The vehicle signal Vehicle.Body.Windshield.Rear is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Rear is 095ff58459b854aaa742e56447fe7a93\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Rear.IsHeatingOn (Windshield heater status. False - off, True - on.) Vehicle.Body.Windshield.Rear.WasherFluid (Windshield washer fluid signals) Vehicle.Body.Windshield.Rear.Wiping (Windshield wiper signals.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Rear Description: …","ref":"/leda/docs/vss/vehicle/body/windshield/rear/","tags":"","title":"Rear"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System Description: Signals to control behavior of wipers in detail. By default VSS expects only one instance. Comment: These signals are typically not directly available to the user/driver of the vehicle. The overlay in overlays/extensions/dual_wiper_systems.vspec can be used to modify this branch to support two instances; Primary and Secondary. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System Signal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System is 9002ff76166950e0aa3b7c9df3b53468\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Front.Wiping.System.ActualPosition (Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.) Vehicle.Body.Windshield.Front.Wiping.System.DriveCurrent (Actual current used by wiper drive.) Vehicle.Body.Windshield.Front.Wiping.System.Frequency (Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.) Vehicle.Body.Windshield.Front.Wiping.System.IsBlocked (Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.) Vehicle.Body.Windshield.Front.Wiping.System.IsEndingWipeCycle (Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.) Vehicle.Body.Windshield.Front.Wiping.System.IsOverheated (Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.) Vehicle.Body.Windshield.Front.Wiping.System.IsPositionReached (Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.) Vehicle.Body.Windshield.Front.Wiping.System.IsWiperError (Indicates system failure. True if wiping is disabled due to system failure.) Vehicle.Body.Windshield.Front.Wiping.System.IsWiping (Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.) Vehicle.Body.Windshield.Front.Wiping.System.Mode (Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.) Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition (Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/","tags":"","title":"System"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition Description: Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed. Comment: Default parking position might be used as reference position. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eSystem System--\u003eTargetPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition [get] OK Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition is an Actuator.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition is 7a4a3fdd2947596dbada6980c142f090\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/system/targetposition/","tags":"","title":"TargetPosition"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.WasherFluid Description: Windshield washer fluid signals Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWasherFluid Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.WasherFluid Signal Information The vehicle signal Vehicle.Body.Windshield.Front.WasherFluid is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.WasherFluid is 2de24016515353289953de5ea81efd3c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Front.WasherFluid.IsLevelLow (Low level indication for washer fluid. True = Level Low. False = Level OK.) Vehicle.Body.Windshield.Front.WasherFluid.Level (Washer fluid level as a percent. 0 = Empty. 100 = Full.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.WasherFluid …","ref":"/leda/docs/vss/vehicle/body/windshield/front/washerfluid/","tags":"","title":"WasherFluid"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield Description: Windshield signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield Signal Information The vehicle signal Vehicle.Body.Windshield is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield is 73efba535dcb5032b9edc43406b050b8\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Front (Windshield signals.) Vehicle.Body.Windshield.Rear (Windshield signals.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield Description: …","ref":"/leda/docs/vss/vehicle/body/windshield/","tags":"","title":"Windshield"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping.WiperWear Description: Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Wiping--\u003eWiperWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Windshield.Front.Wiping.WiperWear [get] OK Vehicle.Body.Windshield.Front.Wiping.WiperWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Windshield.Front.Wiping.WiperWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping.WiperWear Data Type \u0026 Unit Path Vehicle.Body.Windshield.Front.Wiping.WiperWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping.WiperWear is a Sensor.\nThe vehicle signal Vehicle.Body.Windshield.Front.Wiping.WiperWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping.WiperWear is 92c879c11bc65e6da30d582a3928caac\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/wiperwear/","tags":"","title":"WiperWear"},{"body":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping Description: Windshield wiper signals. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eWindshield Windshield--\u003eFront Front--\u003eWiping Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Windshield.Front.Wiping Signal Information The vehicle signal Vehicle.Body.Windshield.Front.Wiping is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Windshield.Front.Wiping is 2cffeccdc19a587cbe2264f426c6881a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Windshield.Front.Wiping.Intensity (Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/… - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.) Vehicle.Body.Windshield.Front.Wiping.IsWipersWorn (Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.) Vehicle.Body.Windshield.Front.Wiping.Mode (Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.) Vehicle.Body.Windshield.Front.Wiping.System (Signals to control behavior of wipers in detail. By default VSS expects only one instance.) Vehicle.Body.Windshield.Front.Wiping.WiperWear (Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Windshield.Front.Wiping …","ref":"/leda/docs/vss/vehicle/body/windshield/front/wiping/","tags":"","title":"Wiping"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.AverageConsumption Description: Average consumption in liters per 100 km. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eAverageConsumption Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.AverageConsumption [get] OK Vehicle.Powertrain.FuelSystem.AverageConsumption: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.AverageConsumption 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.AverageConsumption Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.AverageConsumption VSS: Addressing nodes Data type float VSS: Datatypes Unit l/100km VSS: Units Label liter per 100 kilometers Description Volume per distance measured in liters per 100 kilometers VSS: Sensors \u0026 Actuators Domain volume per distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.AverageConsumption is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.AverageConsumption is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.AverageConsumption is e2252108125a54dcab34e1bad0fe8bdc\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/averageconsumption/","tags":"","title":"AverageConsumption"},{"body":" Full qualified VSS Path: Vehicle.Body Description: All body components. Navigation flowchart LR Vehicle--\u003eBody Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body Signal Information The vehicle signal Vehicle.Body is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body is bd2854e6a9165c5698ce8dd9f0438ecc\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.BodyType (Body type code as defined by ISO 3779.) Vehicle.Body.Hood (Hood status.) Vehicle.Body.Horn (Horn signals.) Vehicle.Body.Lights (Exterior lights.) Vehicle.Body.Mirrors (All mirrors.) Vehicle.Body.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.Body.Raindetection (Rainsensor signals.) Vehicle.Body.RearMainSpoilerPosition (Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed.) Vehicle.Body.RefuelPosition (Location of the fuel cap or charge port.) Vehicle.Body.Trunk (Trunk status.) Vehicle.Body.Windshield (Windshield signals.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body Description: All body …","ref":"/leda/docs/vss/vehicle/body/","tags":"","title":"Body"},{"body":" Full qualified VSS Path: Vehicle.Body.BodyType Description: Body type code as defined by ISO 3779. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eBodyType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.BodyType [get] OK Vehicle.Body.BodyType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.BodyType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.BodyType Data Type \u0026 Unit Path Vehicle.Body.BodyType VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.BodyType is an Attribute.\nThe vehicle signal Vehicle.Body.BodyType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.BodyType is 6253412513105deea63b1d424117fd88\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.BodyType Description: Body type …","ref":"/leda/docs/vss/vehicle/body/bodytype/","tags":"","title":"BodyType"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart Description: Fuel amount in liters consumed since start of current trip. Comment: A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The signal may however keep the value of the last trip until a new trip is started. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eConsumptionSinceStart Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart [get] OK Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart VSS: Addressing nodes Data type float VSS: Datatypes Unit l VSS: Units Label liter Description Volume measured in liters VSS: Sensors \u0026 Actuators Domain volume Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart is adf0a40964ff556f92b10275ad918883\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/consumptionsincestart/","tags":"","title":"ConsumptionSinceStart"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.DCDC Description: Properties related to DC/DC converter converting high voltage (from high voltage battery) to vehicle low voltage (supply voltage, typically 12 Volts). Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eDCDC Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.DCDC Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.DCDC is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.DCDC is 01f4943795b55cbd8f94e1bca137fc0a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.DCDC.PowerLoss (Electrical energy lost by power dissipation to heat inside DC/DC converter.) Vehicle.Powertrain.TractionBattery.DCDC.Temperature (Current temperature of DC/DC converter converting battery high voltage to vehicle low voltage (typically 12 Volts).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.DCDC …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/dcdc/","tags":"","title":"DCDC"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk.Front Description: Trunk status. Comment: A trunk is a luggage compartment in a vehicle. Depending on vehicle, it can be either in the front or back of the vehicle. Some vehicles may have trunks both at the front and at the rear of the vehicle. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Trunk--\u003eFront Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk.Front Signal Information The vehicle signal Vehicle.Body.Trunk.Front is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk.Front is a455aca5bae55c22b7949fd31a765a6c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Trunk.Front.IsLocked (Is trunk locked or unlocked. True = Locked. False = Unlocked.) Vehicle.Body.Trunk.Front.IsOpen (Trunk open or closed. True = Open. False = Closed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk.Front Description: Trunk …","ref":"/leda/docs/vss/vehicle/body/trunk/front/","tags":"","title":"Front"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem Description: Fuel system data. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem Signal Information The vehicle signal Vehicle.Powertrain.FuelSystem is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem is dbc194a7f97d5a56bc8942c17c2db22e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.FuelSystem.AverageConsumption (Average consumption in liters per 100 km.) Vehicle.Powertrain.FuelSystem.ConsumptionSinceStart (Fuel amount in liters consumed since start of current trip.) Vehicle.Powertrain.FuelSystem.HybridType (Defines the hybrid type of the vehicle.) Vehicle.Powertrain.FuelSystem.InstantConsumption (Current consumption in liters per 100 km.) Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled (Indicates whether eco start stop is currently enabled.) Vehicle.Powertrain.FuelSystem.IsFuelLevelLow (Indicates that the fuel level is low (e.g. \u003c50km range).) Vehicle.Powertrain.FuelSystem.Level (Level in fuel tank as percent of capacity. 0 = empty. 100 = full.) Vehicle.Powertrain.FuelSystem.Range (Remaining range in meters using only liquid fuel.) Vehicle.Powertrain.FuelSystem.SupportedFuel (Detailed information on fuels supported by the vehicle. Identifiers originating from DIN EN 16942:2021-08, appendix B, with additional suffix for octane (RON) where relevant.) Vehicle.Powertrain.FuelSystem.SupportedFuelTypes (High level information of fuel types supported) Vehicle.Powertrain.FuelSystem.TankCapacity (Capacity of the fuel tank in liters.) Vehicle.Powertrain.FuelSystem.TimeSinceStart (Time in seconds elapsed since start of current trip.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem Description: …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/","tags":"","title":"FuelSystem"},{"body":" Full qualified VSS Path: Vehicle.Body.Hood Description: Hood status. Comment: The hood is the hinged cover over the engine compartment of a motor vehicles. Depending on vehicle, it can be either in the front or back of the vehicle. Luggage compartments are in VSS called trunks, even if they are located at the front of the vehicle. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eHood Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Hood Signal Information The vehicle signal Vehicle.Body.Hood is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Hood is 84510652bf915bbe8bf5f477aab2b44a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Hood.IsOpen (Hood open or closed. True = Open. False = Closed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Hood Description: Hood status. …","ref":"/leda/docs/vss/vehicle/body/hood/","tags":"","title":"Hood"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.HybridType Description: Defines the hybrid type of the vehicle. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eHybridType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.HybridType [get] OK Vehicle.Powertrain.FuelSystem.HybridType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.HybridType UNKNOWN [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.HybridType Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.HybridType VSS: Addressing nodes Data type string VSS: Datatypes Default value UNKNOWN VSS: Sensors \u0026 Actuators Allowed values ['UNKNOWN', 'NOT_APPLICABLE', 'STOP_START', 'BELT_ISG', 'CIMG', 'PHEV'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.HybridType is an Attribute.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.HybridType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.HybridType is f0f72012f5e453c1935ff8c3a5aff696\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.HybridType …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/hybridtype/","tags":"","title":"HybridType"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.InstantConsumption Description: Current consumption in liters per 100 km. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eInstantConsumption Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.InstantConsumption [get] OK Vehicle.Powertrain.FuelSystem.InstantConsumption: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.InstantConsumption 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.InstantConsumption Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.InstantConsumption VSS: Addressing nodes Data type float VSS: Datatypes Unit l/100km VSS: Units Label liter per 100 kilometers Description Volume per distance measured in liters per 100 kilometers VSS: Sensors \u0026 Actuators Domain volume per distance Minimum value 0 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.InstantConsumption is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.InstantConsumption is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.InstantConsumption is cf65767ec8ad56ffadfdccd831e4b562\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/instantconsumption/","tags":"","title":"InstantConsumption"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled Description: Indicates whether eco start stop is currently enabled. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eIsEngineStopStartEnabled Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled [get] OK Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.IsEngineStopStartEnabled is 176eed5bb0da582a9ee56f1c70e12075\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/isenginestopstartenabled/","tags":"","title":"IsEngineStopStartEnabled"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.IsFuelLevelLow Description: Indicates that the fuel level is low (e.g. \u003c50km range). Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eIsFuelLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.IsFuelLevelLow [get] OK Vehicle.Powertrain.FuelSystem.IsFuelLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.IsFuelLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.IsFuelLevelLow Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.IsFuelLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.IsFuelLevelLow is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.IsFuelLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.IsFuelLevelLow is 65f18ee3b04f5d4c8bb76083227dd9fe\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.IsFuelLevelLow …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/isfuellevellow/","tags":"","title":"IsFuelLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk.Front.IsLocked Description: Is trunk locked or unlocked. True = Locked. False = Unlocked. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Trunk--\u003eFront Front--\u003eIsLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Trunk.Front.IsLocked [get] OK Vehicle.Body.Trunk.Front.IsLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Trunk.Front.IsLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk.Front.IsLocked Data Type \u0026 Unit Path Vehicle.Body.Trunk.Front.IsLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Trunk.Front.IsLocked is an Actuator.\nThe vehicle signal Vehicle.Body.Trunk.Front.IsLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk.Front.IsLocked is e0eabc210f07505fa1b66b67729d681b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk.Front.IsLocked …","ref":"/leda/docs/vss/vehicle/body/trunk/front/islocked/","tags":"","title":"IsLocked"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk.Rear.IsLocked Description: Is trunk locked or unlocked. True = Locked. False = Unlocked. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Trunk--\u003eRear Rear--\u003eIsLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Trunk.Rear.IsLocked [get] OK Vehicle.Body.Trunk.Rear.IsLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Trunk.Rear.IsLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk.Rear.IsLocked Data Type \u0026 Unit Path Vehicle.Body.Trunk.Rear.IsLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Trunk.Rear.IsLocked is an Actuator.\nThe vehicle signal Vehicle.Body.Trunk.Rear.IsLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk.Rear.IsLocked is 8f9b55b002ed59d3ac2ef0b014abf4aa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk.Rear.IsLocked …","ref":"/leda/docs/vss/vehicle/body/trunk/rear/islocked/","tags":"","title":"IsLocked"},{"body":" Full qualified VSS Path: Vehicle.Body.Hood.IsOpen Description: Hood open or closed. True = Open. False = Closed. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eHood Hood--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Hood.IsOpen [get] OK Vehicle.Body.Hood.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Hood.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Hood.IsOpen Data Type \u0026 Unit Path Vehicle.Body.Hood.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Hood.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Body.Hood.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Hood.IsOpen is 890aa3359e1a579288af1cf8e6b5b71f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Hood.IsOpen Description: Hood …","ref":"/leda/docs/vss/vehicle/body/hood/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk.Front.IsOpen Description: Trunk open or closed. True = Open. False = Closed. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Trunk--\u003eFront Front--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Trunk.Front.IsOpen [get] OK Vehicle.Body.Trunk.Front.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Trunk.Front.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk.Front.IsOpen Data Type \u0026 Unit Path Vehicle.Body.Trunk.Front.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Trunk.Front.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Body.Trunk.Front.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk.Front.IsOpen is 2047de0896a352fcaf02baa06819a023\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk.Front.IsOpen Description: …","ref":"/leda/docs/vss/vehicle/body/trunk/front/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk.Rear.IsOpen Description: Trunk open or closed. True = Open. False = Closed. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Trunk--\u003eRear Rear--\u003eIsOpen Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.Trunk.Rear.IsOpen [get] OK Vehicle.Body.Trunk.Rear.IsOpen: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.Trunk.Rear.IsOpen false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk.Rear.IsOpen Data Type \u0026 Unit Path Vehicle.Body.Trunk.Rear.IsOpen VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Body.Trunk.Rear.IsOpen is an Actuator.\nThe vehicle signal Vehicle.Body.Trunk.Rear.IsOpen is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk.Rear.IsOpen is 3d3249e59306594698367b839b12c938\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk.Rear.IsOpen Description: …","ref":"/leda/docs/vss/vehicle/body/trunk/rear/isopen/","tags":"","title":"IsOpen"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.Level Description: Level in fuel tank as percent of capacity. 0 = empty. 100 = full. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.Level [get] OK Vehicle.Powertrain.FuelSystem.Level: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.Level 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.Level Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.Level VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.Level is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.Level is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.Level is 902bd295a662573088291e8b6a6b7943\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.Level …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/level/","tags":"","title":"Level"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode Description: Defines timer mode for charging: INACTIVE - no timer set, charging may start as soon as battery is connected to a charger. START_TIME - charging shall start at Charging.Timer.Time. END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time. When charging is completed the vehicle shall change mode to ‘inactive’ or set a new Charging.Timer.Time. Charging shall start immediately if mode is ‘starttime’ or ’endtime’ and Charging.Timer.Time is a time in the past. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eTimer Timer--\u003eMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode [get] OK Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['INACTIVE', 'START_TIME', 'END_TIME'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.Timer.Mode is b09fb52261735977af275dda1904a7a1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/timer/mode/","tags":"","title":"Mode"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss Description: Electrical energy lost by power dissipation to heat inside DC/DC converter. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eDCDC DCDC--\u003ePowerLoss Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss [get] OK Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss VSS: Addressing nodes Data type float VSS: Datatypes Unit W VSS: Units Label watt Description Power measured in watts VSS: Sensors \u0026 Actuators Domain power Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.DCDC.PowerLoss is f29e37087cdf57ca998188c7b945a77b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/dcdc/powerloss/","tags":"","title":"PowerLoss"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.Range Description: Remaining range in meters using only liquid fuel. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eRange Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.Range [get] OK Vehicle.Powertrain.FuelSystem.Range: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.Range 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.Range Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.Range VSS: Addressing nodes Data type uint32 VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.Range is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.Range is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.Range is c5a0dbe5e754553897f0aed0069af57a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.Range …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/range/","tags":"","title":"Range"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk.Rear Description: Trunk status. Comment: A trunk is a luggage compartment in a vehicle. Depending on vehicle, it can be either in the front or back of the vehicle. Some vehicles may have trunks both at the front and at the rear of the vehicle. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Trunk--\u003eRear Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk.Rear Signal Information The vehicle signal Vehicle.Body.Trunk.Rear is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk.Rear is a6170ff5e4325f38b5d57402e1d95e5a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Trunk.Rear.IsLocked (Is trunk locked or unlocked. True = Locked. False = Unlocked.) Vehicle.Body.Trunk.Rear.IsOpen (Trunk open or closed. True = Open. False = Closed.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk.Rear Description: Trunk …","ref":"/leda/docs/vss/vehicle/body/trunk/rear/","tags":"","title":"Rear"},{"body":" Full qualified VSS Path: Vehicle.Body.RefuelPosition Description: Location of the fuel cap or charge port. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eRefuelPosition Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Body.RefuelPosition [get] OK Vehicle.Body.RefuelPosition: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Body.RefuelPosition Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.RefuelPosition Data Type \u0026 Unit Path Vehicle.Body.RefuelPosition VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['FRONT_LEFT', 'FRONT_RIGHT', 'MIDDLE_LEFT', 'MIDDLE_RIGHT', 'REAR_LEFT', 'REAR_RIGHT'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Body.RefuelPosition is an Attribute.\nThe vehicle signal Vehicle.Body.RefuelPosition is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.RefuelPosition is 53ef90a851fa57f0810d50238e852f02\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.RefuelPosition Description: …","ref":"/leda/docs/vss/vehicle/body/refuelposition/","tags":"","title":"RefuelPosition"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.SupportedFuel Description: Detailed information on fuels supported by the vehicle. Identifiers originating from DIN EN 16942:2021-08, appendix B, with additional suffix for octane (RON) where relevant. Comment: RON 95 is sometimes referred to as Super, RON 98 as Super Plus. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eSupportedFuel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.SupportedFuel [get] OK Vehicle.Powertrain.FuelSystem.SupportedFuel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.SupportedFuel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.SupportedFuel Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.SupportedFuel VSS: Addressing nodes Data type string[] VSS: Datatypes Allowed values ['E5_95', 'E5_98', 'E10_95', 'E10_98', 'E85', 'B7', 'B10', 'B20', 'B30', 'B100', 'XTL', 'LPG', 'CNG', 'LNG', 'H2', 'OTHER'] VSS: Specifying allowed values Signal Information The vehicle signal Vehicle.Powertrain.FuelSystem.SupportedFuel is an Attribute.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.SupportedFuel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.SupportedFuel is 7fd3bf2ef0c650e69ff2037875ec59ee\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.SupportedFuel …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/supportedfuel/","tags":"","title":"SupportedFuel"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.SupportedFuelTypes Description: High level information of fuel types supported Comment: If a vehicle also has an electric drivetrain (e.g. hybrid) that will be obvious from the PowerTrain.Type signal. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eSupportedFuelTypes Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.SupportedFuelTypes [get] OK Vehicle.Powertrain.FuelSystem.SupportedFuelTypes: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.SupportedFuelTypes 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.SupportedFuelTypes Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.SupportedFuelTypes VSS: Addressing nodes Data type string[] VSS: Datatypes Allowed values ['GASOLINE', 'DIESEL', 'E85', 'LPG', 'CNG', 'LNG', 'H2', 'OTHER'] VSS: Specifying allowed values Signal Information The vehicle signal Vehicle.Powertrain.FuelSystem.SupportedFuelTypes is an Attribute.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.SupportedFuelTypes is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.SupportedFuelTypes is 80edc3002aa25097aba6455fe459fa6c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/supportedfueltypes/","tags":"","title":"SupportedFuelTypes"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.TankCapacity Description: Capacity of the fuel tank in liters. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eTankCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.TankCapacity [get] OK Vehicle.Powertrain.FuelSystem.TankCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.TankCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.TankCapacity Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.TankCapacity VSS: Addressing nodes Data type float VSS: Datatypes Unit l VSS: Units Label liter Description Volume measured in liters VSS: Sensors \u0026 Actuators Domain volume Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.TankCapacity is an Attribute.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.TankCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.TankCapacity is 362643b866c55d5386fdbdf383464e90\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.TankCapacity …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/tankcapacity/","tags":"","title":"TankCapacity"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.DCDC.Temperature Description: Current temperature of DC/DC converter converting battery high voltage to vehicle low voltage (typically 12 Volts). Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eDCDC DCDC--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.DCDC.Temperature [get] OK Vehicle.Powertrain.TractionBattery.DCDC.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.DCDC.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.DCDC.Temperature Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.DCDC.Temperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.DCDC.Temperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.DCDC.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.DCDC.Temperature is 4e587c3af2aa5fbb9205e42a64fc8d77\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/dcdc/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.Timer.Time Description: Time for next charging-related action, formatted according to ISO 8601 with UTC time zone. Value has no significance if Charging.Timer.Mode is ‘inactive’. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eTimer Timer--\u003eTime Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.Timer.Time [get] OK Vehicle.Powertrain.TractionBattery.Charging.Timer.Time: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.Timer.Time Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.Timer.Time Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.Timer.Time VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Timer.Time is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Timer.Time is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.Timer.Time is c08dcaeda02b5e26aacd7e2542f0fc90\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/timer/time/","tags":"","title":"Time"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.TimeSinceStart Description: Time in seconds elapsed since start of current trip. Deprecation V3.1 replaced by Vehicle.StartTime and Vehicle.TripDuration Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eFuelSystem FuelSystem--\u003eTimeSinceStart Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.FuelSystem.TimeSinceStart [get] OK Vehicle.Powertrain.FuelSystem.TimeSinceStart: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.FuelSystem.TimeSinceStart 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.FuelSystem.TimeSinceStart Data Type \u0026 Unit Path Vehicle.Powertrain.FuelSystem.TimeSinceStart VSS: Addressing nodes Data type uint32 VSS: Datatypes Unit s VSS: Units Label second Description Time measured in seconds VSS: Sensors \u0026 Actuators Domain time Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.FuelSystem.TimeSinceStart is a Sensor.\nThe vehicle signal Vehicle.Powertrain.FuelSystem.TimeSinceStart is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.FuelSystem.TimeSinceStart is 1a8dbc5107b3522fad852e63aa85aef9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.FuelSystem.TimeSinceStart …","ref":"/leda/docs/vss/vehicle/powertrain/fuelsystem/timesincestart/","tags":"","title":"TimeSinceStart"},{"body":" Full qualified VSS Path: Vehicle.Body.Trunk Description: Trunk status. Comment: A trunk is a luggage compartment in a vehicle. Depending on vehicle, it can be either in the front or back of the vehicle. Some vehicles may have trunks both at the front and at the rear of the vehicle. Navigation flowchart LR Vehicle--\u003eBody Body--\u003eTrunk Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Body.Trunk Signal Information The vehicle signal Vehicle.Body.Trunk is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Body.Trunk is a584c6a5aa235cb88ac686f8d72a1dff\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Body.Trunk.Front (Trunk status.) Vehicle.Body.Trunk.Rear (Trunk status.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Body.Trunk Description: Trunk …","ref":"/leda/docs/vss/vehicle/body/trunk/","tags":"","title":"Trunk"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent Description: Current charging current. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeCurrent Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent is 94739cf563735b438878ac0f85601f27\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC (Current DC charging current at inlet. Negative if returning energy to grid.) Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 (Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid.) Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 (Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid.) Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 (Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargecurrent/","tags":"","title":"ChargeCurrent"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit Description: Target charge limit (state of charge) for battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeLimit Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit is 62360a4ed1095275a7052d65112aaef1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargelimit/","tags":"","title":"ChargeLimit"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType Description: Type of charge plug (charging inlet) available on the vehicle. IEC types refer to IEC 62196, GBT refers to GB/T 20234. Comment: A vehicle may have multiple charging inlets. IEC_TYPE_1_AC refers to Type 1 as defined in IEC 62196-2. Also known as Yazaki or J1772 connector. IEC_TYPE_2_AC refers to Type 2 as defined in IEC 62196-2. Also known as Mennekes connector. IEC_TYPE_3_AC refers to Type 3 as defined in IEC 62196-2. Also known as Scame connector. IEC_TYPE_4_DC refers to AA configuration as defined in IEC 62196-3. Also known as Type 4 or CHAdeMO connector. IEC_TYPE_1_CCS_DC refers to EE Configuration as defined in IEC 62196-3. Also known as CCS1 or Combo1 connector. IEC_TYPE_2_CCS_DC refers to FF Configuration as defined in IEC 62196-3. Also known as CCS2 or Combo2 connector. TESLA_ROADSTER, TESLA_HPWC (High Power Wall Connector) and TESLA_SUPERCHARGER refer to non-standardized charging inlets/methods used by Tesla. GBT_AC refers to connector specified in GB/T 20234.2. GBT_DC refers to connector specified in GB/T 20234.3. Also specified as BB Configuration in IEC 62196-3. OTHER shall be used if the vehicle has a charging connector, but not one of the connectors listed above. For additional information see https://en.wikipedia.org/wiki/IEC_62196. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargePlugType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType VSS: Addressing nodes Data type string[] VSS: Datatypes Allowed values ['IEC_TYPE_1_AC', 'IEC_TYPE_2_AC', 'IEC_TYPE_3_AC', 'IEC_TYPE_4_DC', 'IEC_TYPE_1_CCS_DC', 'IEC_TYPE_2_CCS_DC', 'TESLA_ROADSTER', 'TESLA_HPWC', 'TESLA_SUPERCHARGER', 'GBT_AC', 'GBT_DC', 'OTHER'] VSS: Specifying allowed values Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType is an Attribute.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType is 4c56357a6f1d586395215a9beeb26d91\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargeplugtype/","tags":"","title":"ChargePlugType"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap Description: Status of the charge port cover, can potentially be controlled manually. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargePortFlap Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['OPEN', 'CLOSED'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap is 71bdd2145bb55c3393df194bfc2e03e5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargeportflap/","tags":"","title":"ChargePortFlap"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeRate Description: Current charging rate, as in kilometers of range added per hour. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeRate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeRate [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeRate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeRate 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeRate Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeRate VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeRate is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeRate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeRate is a287cea3fdaa533180c8e349343a7851\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargerate/","tags":"","title":"ChargeRate"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage Description: Current charging voltage, as measured at the charging inlet. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeVoltage Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage is 7170151d653b52c6bb5e75cb0a14d1c5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC (Current DC charging voltage at charging inlet.) Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 (Current AC charging voltage (rms) at inlet for Phase 1.) Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 (Current AC charging voltage (rms) at inlet for Phase 2.) Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 (Current AC charging voltage (rms) at inlet for Phase 3.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargevoltage/","tags":"","title":"ChargeVoltage"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging Description: Properties related to battery charging. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging is 49b9ef0c8b145a36afdf17d0cb44131b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.Charging.ChargeCurrent (Current charging current.) Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit (Target charge limit (state of charge) for battery.) Vehicle.Powertrain.TractionBattery.Charging.ChargePlugType (Type of charge plug (charging inlet) available on the vehicle. IEC types refer to IEC 62196, GBT refers to GB/T 20234.) Vehicle.Powertrain.TractionBattery.Charging.ChargePortFlap (Status of the charge port cover, can potentially be controlled manually.) Vehicle.Powertrain.TractionBattery.Charging.ChargeRate (Current charging rate, as in kilometers of range added per hour.) Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage (Current charging voltage, as measured at the charging inlet.) Vehicle.Powertrain.TractionBattery.Charging.IsCharging (True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.) Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected (Indicates if a charging cable is physically connected to the vehicle or not.) Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked (Is charging cable locked to prevent removal.) Vehicle.Powertrain.TractionBattery.Charging.IsDischarging (True if discharging (vehicle to grid) is ongoing. Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid.) Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent (Maximum charging current that can be accepted by the system, as measured at the charging inlet.) Vehicle.Powertrain.TractionBattery.Charging.Mode (Control of the charge process. MANUAL means manually initiated (plug-in event, companion app, etc). TIMER means timer-based. GRID means grid-controlled (eg ISO 15118). PROFILE means controlled by profile download to vehicle.) Vehicle.Powertrain.TractionBattery.Charging.PowerLoss (Electrical energy lost by power dissipation to heat inside the AC/DC converter.) Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging (Start or stop the charging process.) Vehicle.Powertrain.TractionBattery.Charging.Temperature (Current temperature of AC/DC converter converting grid voltage to battery voltage.) Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete (The time needed for the current charging process to reach Charging.ChargeLimit. 0 if charging is complete or no charging process is active or planned.) Vehicle.Powertrain.TractionBattery.Charging.Timer (Properties related to timing of battery charging sessions.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/","tags":"","title":"Charging"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC Description: Current DC charging current at inlet. Negative if returning energy to grid. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeCurrent ChargeCurrent--\u003eDC Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.DC is 44204d7ae6fd5f8e954d0670a739bdf2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargecurrent/dc/","tags":"","title":"DC"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC Description: Current DC charging voltage at charging inlet. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeVoltage ChargeVoltage--\u003eDC Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.DC is 701c21d1a4815b35ba061415789ec911\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargevoltage/dc/","tags":"","title":"DC"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC Description: Maximum DC charging current at inlet that can be accepted by the system. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eMaximumChargingCurrent MaximumChargingCurrent--\u003eDC Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC [get] OK Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC is 5a70acfd3c8959898b43738151ab36e1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/maximumchargingcurrent/dc/","tags":"","title":"DC"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.IsCharging Description: True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eIsCharging Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.IsCharging [get] OK Vehicle.Powertrain.TractionBattery.Charging.IsCharging: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.IsCharging false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.IsCharging Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.IsCharging VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsCharging is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsCharging is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.IsCharging is d28244c9e3365899954bd3e38ef46bb9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/ischarging/","tags":"","title":"IsCharging"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected Description: Indicates if a charging cable is physically connected to the vehicle or not. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eIsChargingCableConnected Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected [get] OK Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableConnected is a1c8e2f662b95a54a9933a1b163fff84\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/ischargingcableconnected/","tags":"","title":"IsChargingCableConnected"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked Description: Is charging cable locked to prevent removal. Comment: Locking of charging cable can be used to prevent unintentional removing during charging. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eIsChargingCableLocked Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked [get] OK Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.IsChargingCableLocked is 7fa81693f3b8587f8d71e7b1619c8e21\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/ischargingcablelocked/","tags":"","title":"IsChargingCableLocked"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.IsDischarging Description: True if discharging (vehicle to grid) is ongoing. Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eIsDischarging Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.IsDischarging [get] OK Vehicle.Powertrain.TractionBattery.Charging.IsDischarging: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.IsDischarging false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.IsDischarging Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.IsDischarging VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsDischarging is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.IsDischarging is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.IsDischarging is 534d884fb36652688535543b52419529\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/isdischarging/","tags":"","title":"IsDischarging"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent Description: Maximum charging current that can be accepted by the system, as measured at the charging inlet. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eMaximumChargingCurrent Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent is e3f2e57e7a395d9ca9931d429e540a34\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.DC (Maximum DC charging current at inlet that can be accepted by the system.) Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 (Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system.) Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 (Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system.) Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 (Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/maximumchargingcurrent/","tags":"","title":"MaximumChargingCurrent"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.Mode Description: Control of the charge process. MANUAL means manually initiated (plug-in event, companion app, etc). TIMER means timer-based. GRID means grid-controlled (eg ISO 15118). PROFILE means controlled by profile download to vehicle. Comment: The mechanism to provide a profile to the vehicle is currently not covered by VSS. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.Mode [get] OK Vehicle.Powertrain.TractionBattery.Charging.Mode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.Mode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.Mode Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.Mode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['MANUAL', 'TIMER', 'GRID', 'PROFILE'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Mode is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Mode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.Mode is 1e4be3280b265873945531f6f6d0ec6b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/mode/","tags":"","title":"Mode"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 Description: Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeCurrent ChargeCurrent--\u003ePhase1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase1 is 400dca50fcde52a6bb605d7e86f49776\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargecurrent/phase1/","tags":"","title":"Phase1"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 Description: Current AC charging voltage (rms) at inlet for Phase 1. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeVoltage ChargeVoltage--\u003ePhase1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase1 is 15991c8316585816815d6f4fb6b06776\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargevoltage/phase1/","tags":"","title":"Phase1"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 Description: Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eMaximumChargingCurrent MaximumChargingCurrent--\u003ePhase1 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 [get] OK Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase1 is e3c1034e89cc55968ff51b990906db43\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/maximumchargingcurrent/phase1/","tags":"","title":"Phase1"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 Description: Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeCurrent ChargeCurrent--\u003ePhase2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase2 is 32cb24d1c495503a9087d6f55997cf57\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargecurrent/phase2/","tags":"","title":"Phase2"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 Description: Current AC charging voltage (rms) at inlet for Phase 2. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeVoltage ChargeVoltage--\u003ePhase2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase2 is 6c0dcf98169d5a5190736a6dd81291a4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargevoltage/phase2/","tags":"","title":"Phase2"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 Description: Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eMaximumChargingCurrent MaximumChargingCurrent--\u003ePhase2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 [get] OK Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase2 is ab3514bc982e54f2b98698fb6c752368\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/maximumchargingcurrent/phase2/","tags":"","title":"Phase2"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 Description: Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeCurrent ChargeCurrent--\u003ePhase3 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeCurrent.Phase3 is 55fb7fb7ff4a5df9b6a3af435eac868e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargecurrent/phase3/","tags":"","title":"Phase3"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 Description: Current AC charging voltage (rms) at inlet for Phase 3. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eChargeVoltage ChargeVoltage--\u003ePhase3 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 [get] OK Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.ChargeVoltage.Phase3 is 1ab06b48231e54e2ac27e543508c84f0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/chargevoltage/phase3/","tags":"","title":"Phase3"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 Description: Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eMaximumChargingCurrent MaximumChargingCurrent--\u003ePhase3 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 [get] OK Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.MaximumChargingCurrent.Phase3 is 47dd5e99c30d562e9e2e1c58007846b6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/maximumchargingcurrent/phase3/","tags":"","title":"Phase3"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.PowerLoss Description: Electrical energy lost by power dissipation to heat inside the AC/DC converter. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003ePowerLoss Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.PowerLoss [get] OK Vehicle.Powertrain.TractionBattery.Charging.PowerLoss: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.PowerLoss 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.PowerLoss Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.PowerLoss VSS: Addressing nodes Data type float VSS: Datatypes Unit W VSS: Units Label watt Description Power measured in watts VSS: Sensors \u0026 Actuators Domain power Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.PowerLoss is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.PowerLoss is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.PowerLoss is 88f40bbeb80b5dfb97ceba13269665c5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/powerloss/","tags":"","title":"PowerLoss"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.PowerLoss Description: Electrical energy lost by power dissipation to heat inside the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003ePowerLoss Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.PowerLoss [get] OK Vehicle.Powertrain.TractionBattery.PowerLoss: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.PowerLoss 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.PowerLoss Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.PowerLoss VSS: Addressing nodes Data type float VSS: Datatypes Unit W VSS: Units Label watt Description Power measured in watts VSS: Sensors \u0026 Actuators Domain power Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.PowerLoss is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.PowerLoss is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.PowerLoss is 880082aafe025cb3a5776b623f9a48b5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.PowerLoss …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/powerloss/","tags":"","title":"PowerLoss"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Range Description: Remaining range in meters using only battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eRange Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Range [get] OK Vehicle.Powertrain.TractionBattery.Range: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Range 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Range Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Range VSS: Addressing nodes Data type uint32 VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Range is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Range is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Range is c0376a425e5d578d9d86ae0dc2ad9778\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Range …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/range/","tags":"","title":"Range"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging Description: Start or stop the charging process. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eStartStopCharging Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging [get] OK Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['START', 'STOP'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging is an Actuator.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.StartStopCharging is 80506d3e9a2557c2b52f74a50d89593f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/startstopcharging/","tags":"","title":"StartStopCharging"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.Temperature Description: Current temperature of AC/DC converter converting grid voltage to battery voltage. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.Temperature [get] OK Vehicle.Powertrain.TractionBattery.Charging.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.Temperature Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.Temperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Temperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.Temperature is c3c0ef3a41db5df1bab659803adbc7ba\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.Timer Description: Properties related to timing of battery charging sessions. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eTimer Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.Timer Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.Timer is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.Timer is cd5b57ada627510e83f90832efed9d5a\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.Charging.Timer.Mode (Defines timer mode for charging: INACTIVE - no timer set, charging may start as soon as battery is connected to a charger. START_TIME - charging shall start at Charging.Timer.Time. END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time. When charging is completed the vehicle shall change mode to ‘inactive’ or set a new Charging.Timer.Time. Charging shall start immediately if mode is ‘starttime’ or ’endtime’ and Charging.Timer.Time is a time in the past.) Vehicle.Powertrain.TractionBattery.Charging.Timer.Time (Time for next charging-related action, formatted according to ISO 8601 with UTC time zone. Value has no significance if Charging.Timer.Mode is ‘inactive’.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/timer/","tags":"","title":"Timer"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete Description: The time needed for the current charging process to reach Charging.ChargeLimit. 0 if charging is complete or no charging process is active or planned. Comment: Shall consider time set by Charging.Timer.Time. E.g. if charging shall start in 3 hours and 2 hours of charging is needed, then Charging.TimeToComplete shall report 5 hours. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCharging Charging--\u003eTimeToComplete Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete [get] OK Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete VSS: Addressing nodes Data type uint32 VSS: Datatypes Unit s VSS: Units Label second Description Time measured in seconds VSS: Sensors \u0026 Actuators Domain time Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Charging.TimeToComplete is c6439c2e068652b08383b9654e2e784a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/charging/timetocomplete/","tags":"","title":"TimeToComplete"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy Description: The accumulated energy delivered to the battery during charging over lifetime of the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eAccumulatedChargedEnergy Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy [get] OK Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy VSS: Addressing nodes Data type float VSS: Datatypes Unit kWh VSS: Units Label kilowatt hours Description Energy consumption measured in kilowatt hours VSS: Sensors \u0026 Actuators Domain energy consumption Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy is 739d06021d795da0877bc0ef3c107de1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/accumulatedchargedenergy/","tags":"","title":"AccumulatedChargedEnergy"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput Description: The accumulated charge throughput delivered to the battery during charging over lifetime of the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eAccumulatedChargedThroughput Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput [get] OK Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput VSS: Addressing nodes Data type float VSS: Datatypes Unit Ah VSS: Units Label ampere hours Description Electric charge measured in ampere hours VSS: Sensors \u0026 Actuators Domain electric charge Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput is 6d038ccc313351fba3a9104c1158a207\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/accumulatedchargedthroughput/","tags":"","title":"AccumulatedChargedThroughput"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy Description: The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eAccumulatedConsumedEnergy Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy [get] OK Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy VSS: Addressing nodes Data type float VSS: Datatypes Unit kWh VSS: Units Label kilowatt hours Description Energy consumption measured in kilowatt hours VSS: Sensors \u0026 Actuators Domain energy consumption Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy is b844cb96765f574d8d31edb09ccaef81\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/accumulatedconsumedenergy/","tags":"","title":"AccumulatedConsumedEnergy"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput Description: The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eAccumulatedConsumedThroughput Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput [get] OK Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput VSS: Addressing nodes Data type float VSS: Datatypes Unit Ah VSS: Units Label ampere hours Description Electric charge measured in ampere hours VSS: Sensors \u0026 Actuators Domain electric charge Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput is f3e2ca21f3b550288d494827c9a172dd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/accumulatedconsumedthroughput/","tags":"","title":"AccumulatedConsumedThroughput"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Temperature.Average Description: Current average temperature of the battery cells. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eTemperature Temperature--\u003eAverage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Temperature.Average [get] OK Vehicle.Powertrain.TractionBattery.Temperature.Average: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Temperature.Average 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Temperature.Average Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Temperature.Average VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Temperature.Average is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Temperature.Average is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Temperature.Average is ae28e502137f56b9a037ed9b32bc04e1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/temperature/average/","tags":"","title":"Average"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.CoolantTemperature Description: Motor coolant temperature (if applicable). Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eCoolantTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.CoolantTemperature [get] OK Vehicle.Powertrain.ElectricMotor.CoolantTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.CoolantTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.CoolantTemperature Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.CoolantTemperature VSS: Addressing nodes Data type int16 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.CoolantTemperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.CoolantTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.CoolantTemperature is 3c5ea8c7700956518f2ae7a2a0f34f1c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/coolanttemperature/","tags":"","title":"CoolantTemperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.StateOfCharge.Current Description: Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eStateOfCharge StateOfCharge--\u003eCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.StateOfCharge.Current [get] OK Vehicle.Powertrain.TractionBattery.StateOfCharge.Current: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.StateOfCharge.Current 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.StateOfCharge.Current Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.StateOfCharge.Current VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100.0 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.StateOfCharge.Current is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.StateOfCharge.Current is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.StateOfCharge.Current is 2e647ca3a1ff5e52af137aab240642da\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/stateofcharge/current/","tags":"","title":"Current"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.CurrentCurrent Description: Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging. Negative = Current flowing out of battery, e.g. during driving. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCurrentCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.CurrentCurrent [get] OK Vehicle.Powertrain.TractionBattery.CurrentCurrent: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.CurrentCurrent 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.CurrentCurrent Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.CurrentCurrent VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.CurrentCurrent is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.CurrentCurrent is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.CurrentCurrent is 7a1488e0c83f50a6b69d8ea85c5bb592\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/currentcurrent/","tags":"","title":"CurrentCurrent"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.CurrentPower Description: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCurrentPower Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.CurrentPower [get] OK Vehicle.Powertrain.TractionBattery.CurrentPower: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.CurrentPower 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.CurrentPower Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.CurrentPower VSS: Addressing nodes Data type float VSS: Datatypes Unit W VSS: Units Label watt Description Power measured in watts VSS: Sensors \u0026 Actuators Domain power Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.CurrentPower is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.CurrentPower is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.CurrentPower is 8859e1b0386a5eda880a9c30cd0dfa8e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/currentpower/","tags":"","title":"CurrentPower"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.CurrentVoltage Description: Current Voltage of the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eCurrentVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.CurrentVoltage [get] OK Vehicle.Powertrain.TractionBattery.CurrentVoltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.CurrentVoltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.CurrentVoltage Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.CurrentVoltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.CurrentVoltage is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.CurrentVoltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.CurrentVoltage is 7b54ea22ee7d5f559da552aefcc07222\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/currentvoltage/","tags":"","title":"CurrentVoltage"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed Description: State of charge displayed to the customer. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eStateOfCharge StateOfCharge--\u003eDisplayed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed [get] OK Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100.0 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed is 1bfcc228293b5512aafe2508ab0500d2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/stateofcharge/displayed/","tags":"","title":"Displayed"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.GrossCapacity Description: Gross capacity of the battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eGrossCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.GrossCapacity [get] OK Vehicle.Powertrain.TractionBattery.GrossCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.GrossCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.GrossCapacity Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.GrossCapacity VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kWh VSS: Units Label kilowatt hours Description Energy consumption measured in kilowatt hours VSS: Sensors \u0026 Actuators Domain energy consumption Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.GrossCapacity is an Attribute.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.GrossCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.GrossCapacity is 5460530488435dc8bfa1298bf47a993d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/grosscapacity/","tags":"","title":"GrossCapacity"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Id Description: Battery Identification Number as assigned by OEM. Comment: This could be serial number, part number plus serial number, UUID, or any other identifier that the OEM want to use to uniquely identify the battery individual. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eId Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Id [get] OK Vehicle.Powertrain.TractionBattery.Id: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Id Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Id Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Id VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Id is an Attribute.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Id is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Id is c8279874660c55b38c7ac64a8503a519\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Id …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/id/","tags":"","title":"Id"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.IsGroundConnected Description: Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain. Comment: It might be possible to disconnect the traction battery used by an electric powertrain. This is achieved by connectors, typically one for plus and one for minus. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eIsGroundConnected Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.IsGroundConnected [get] OK Vehicle.Powertrain.TractionBattery.IsGroundConnected: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.IsGroundConnected false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.IsGroundConnected Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.IsGroundConnected VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.IsGroundConnected is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.IsGroundConnected is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.IsGroundConnected is dd38d1c7ee12530aac03f49ad01d5c04\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/isgroundconnected/","tags":"","title":"IsGroundConnected"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.IsPowerConnected Description: Indicating if the power (positive terminator) of the traction battery is connected to the powertrain. Comment: It might be possible to disconnect the traction battery used by an electric powertrain. This is achieved by connectors, typically one for plus and one for minus. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eIsPowerConnected Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.IsPowerConnected [get] OK Vehicle.Powertrain.TractionBattery.IsPowerConnected: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.IsPowerConnected false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.IsPowerConnected Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.IsPowerConnected VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.IsPowerConnected is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.IsPowerConnected is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.IsPowerConnected is e30ef59fc2a25f6b8990248e19a5cdf9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/ispowerconnected/","tags":"","title":"IsPowerConnected"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Temperature.Max Description: Current maximum temperature of the battery cells, i.e. temperature of the hottest cell. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eTemperature Temperature--\u003eMax Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Temperature.Max [get] OK Vehicle.Powertrain.TractionBattery.Temperature.Max: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Temperature.Max 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Temperature.Max Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Temperature.Max VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Temperature.Max is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Temperature.Max is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Temperature.Max is 07aa7c8ba1d355398d7469c2b337152a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/temperature/max/","tags":"","title":"Max"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.MaxRegenTorque Description: Peak regen/brake torque, in newton meter, that the motor(s) can generate. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eMaxRegenTorque Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.MaxRegenTorque [get] OK Vehicle.Powertrain.ElectricMotor.MaxRegenTorque: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.MaxRegenTorque 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.MaxRegenTorque Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.MaxRegenTorque VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit Nm VSS: Units Label newton meter Description Torque measured in newton meters VSS: Sensors \u0026 Actuators Domain torque Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.MaxRegenTorque is an Attribute.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.MaxRegenTorque is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.MaxRegenTorque is 0e5190c2517b55aa80fcb9bf698e02d6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/maxregentorque/","tags":"","title":"MaxRegenTorque"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.MaxVoltage Description: Max allowed voltage of the battery, e.g. during charging. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eMaxVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.MaxVoltage [get] OK Vehicle.Powertrain.TractionBattery.MaxVoltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.MaxVoltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.MaxVoltage Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.MaxVoltage VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.MaxVoltage is an Attribute.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.MaxVoltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.MaxVoltage is a81264a0ef0c55d288671cfc62c4add5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/maxvoltage/","tags":"","title":"MaxVoltage"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Temperature.Min Description: Current minimum temperature of the battery cells, i.e. temperature of the coldest cell. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eTemperature Temperature--\u003eMin Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.Temperature.Min [get] OK Vehicle.Powertrain.TractionBattery.Temperature.Min: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.Temperature.Min 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Temperature.Min Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.Temperature.Min VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Temperature.Min is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.Temperature.Min is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Temperature.Min is 4e3f630fefa7558fa302b175bc7eb5c7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/temperature/min/","tags":"","title":"Min"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.NetCapacity Description: Total net capacity of the battery considering aging. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eNetCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.NetCapacity [get] OK Vehicle.Powertrain.TractionBattery.NetCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.NetCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.NetCapacity Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.NetCapacity VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kWh VSS: Units Label kilowatt hours Description Energy consumption measured in kilowatt hours VSS: Sensors \u0026 Actuators Domain energy consumption Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.NetCapacity is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.NetCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.NetCapacity is 9c68fe42cb81501eb6349f8c9b0b6899\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/netcapacity/","tags":"","title":"NetCapacity"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.NominalVoltage Description: Nominal Voltage of the battery. Comment: Nominal voltage typically refers to voltage of fully charged battery when delivering rated capacity. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eNominalVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.NominalVoltage [get] OK Vehicle.Powertrain.TractionBattery.NominalVoltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.NominalVoltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.NominalVoltage Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.NominalVoltage VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.NominalVoltage is an Attribute.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.NominalVoltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.NominalVoltage is 3eccae5633185b998d5bdb6ea33cd926\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/nominalvoltage/","tags":"","title":"NominalVoltage"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Power Description: Current motor power output. Negative values indicate regen mode. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003ePower Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.Power [get] OK Vehicle.Powertrain.ElectricMotor.Power: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.Power 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.Power Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.Power VSS: Addressing nodes Data type int16 VSS: Datatypes Unit kW VSS: Units Label kilowatt Description Power measured in kilowatts VSS: Sensors \u0026 Actuators Domain power Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.Power is a Sensor.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.Power is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.Power is 46b86286fba059349a733fed9a0e3232\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Power …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/power/","tags":"","title":"Power"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.ProductionDate Description: Production date of battery in ISO8601 format, e.g. YYYY-MM-DD. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eProductionDate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.ProductionDate [get] OK Vehicle.Powertrain.TractionBattery.ProductionDate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.ProductionDate Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.ProductionDate Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.ProductionDate VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.ProductionDate is an Attribute.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.ProductionDate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.ProductionDate is c9509ba4d76c56d9a8c1d6e2280ae02f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/productiondate/","tags":"","title":"ProductionDate"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Speed Description: Motor rotational speed measured as rotations per minute. Negative values indicate reverse driving mode. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.Speed [get] OK Vehicle.Powertrain.ElectricMotor.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.Speed Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.Speed VSS: Addressing nodes Data type int32 VSS: Datatypes Unit rpm VSS: Units Label revolutions per minute Description Rotational speed measured in revolutions per minute VSS: Sensors \u0026 Actuators Domain rotational speed Note: The int32 datatype is a signed 32-bit integer which technically allows values between -2147483648 and 2147483647 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.Speed is a Sensor.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.Speed is ca961aa6ca435095a89f9d404a5d849d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Speed …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.StateOfCharge Description: Information on the state of charge of the vehicle’s high voltage battery. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eStateOfCharge Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.StateOfCharge Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.StateOfCharge is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.StateOfCharge is 26bae2ce7c4d5e2a951915ef2f5d8b7d\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.StateOfCharge.Current (Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.) Vehicle.Powertrain.TractionBattery.StateOfCharge.Displayed (State of charge displayed to the customer.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/stateofcharge/","tags":"","title":"StateOfCharge"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.StateOfHealth Description: Calculated battery state of health at standard conditions. Comment: Exact formula is implementation dependent. Could be e.g. current capacity at 20 degrees Celsius divided with original capacity at the same temperature. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eStateOfHealth Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.TractionBattery.StateOfHealth [get] OK Vehicle.Powertrain.TractionBattery.StateOfHealth: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.TractionBattery.StateOfHealth 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.StateOfHealth Data Type \u0026 Unit Path Vehicle.Powertrain.TractionBattery.StateOfHealth VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.TractionBattery.StateOfHealth is a Sensor.\nThe vehicle signal Vehicle.Powertrain.TractionBattery.StateOfHealth is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.StateOfHealth is 4d982c47f3245048bcfec1190973a3ed\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/stateofhealth/","tags":"","title":"StateOfHealth"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Temperature Description: Motor temperature. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.Temperature [get] OK Vehicle.Powertrain.ElectricMotor.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.Temperature Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.Temperature VSS: Addressing nodes Data type int16 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.Temperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.Temperature is 1b7c15e5341052139995bfacea2c05b2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Temperature …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery.Temperature Description: Temperature Information for the battery pack. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery TractionBattery--\u003eTemperature Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery.Temperature Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery.Temperature is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery.Temperature is 1cfbcf8c152959dcb3eb2c54fc42e623\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.Temperature.Average (Current average temperature of the battery cells.) Vehicle.Powertrain.TractionBattery.Temperature.Max (Current maximum temperature of the battery cells, i.e. temperature of the hottest cell.) Vehicle.Powertrain.TractionBattery.Temperature.Min (Current minimum temperature of the battery cells, i.e. temperature of the coldest cell.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Torque Description: Current motor torque. Negative values indicate regen mode. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eTorque Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.Torque [get] OK Vehicle.Powertrain.ElectricMotor.Torque: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.Torque 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.Torque Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.Torque VSS: Addressing nodes Data type int16 VSS: Datatypes Unit Nm VSS: Units Label newton meter Description Torque measured in newton meters VSS: Sensors \u0026 Actuators Domain torque Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.Torque is a Sensor.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.Torque is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.Torque is aceffe768ddf5b828fff0975349d2433\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.Torque …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/torque/","tags":"","title":"Torque"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery Description: Battery Management data. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTractionBattery Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.TractionBattery Signal Information The vehicle signal Vehicle.Powertrain.TractionBattery is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.TractionBattery is 1a2515d1a8875d86873431194ade2b50\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.TractionBattery.AccumulatedChargedEnergy (The accumulated energy delivered to the battery during charging over lifetime of the battery.) Vehicle.Powertrain.TractionBattery.AccumulatedChargedThroughput (The accumulated charge throughput delivered to the battery during charging over lifetime of the battery.) Vehicle.Powertrain.TractionBattery.AccumulatedConsumedEnergy (The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.) Vehicle.Powertrain.TractionBattery.AccumulatedConsumedThroughput (The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.) Vehicle.Powertrain.TractionBattery.Charging (Properties related to battery charging.) Vehicle.Powertrain.TractionBattery.CurrentCurrent (Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging. Negative = Current flowing out of battery, e.g. during driving.) Vehicle.Powertrain.TractionBattery.CurrentPower (Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.) Vehicle.Powertrain.TractionBattery.CurrentVoltage (Current Voltage of the battery.) Vehicle.Powertrain.TractionBattery.DCDC (Properties related to DC/DC converter converting high voltage (from high voltage battery) to vehicle low voltage (supply voltage, typically 12 Volts).) Vehicle.Powertrain.TractionBattery.GrossCapacity (Gross capacity of the battery.) Vehicle.Powertrain.TractionBattery.Id (Battery Identification Number as assigned by OEM.) Vehicle.Powertrain.TractionBattery.IsGroundConnected (Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain.) Vehicle.Powertrain.TractionBattery.IsPowerConnected (Indicating if the power (positive terminator) of the traction battery is connected to the powertrain.) Vehicle.Powertrain.TractionBattery.MaxVoltage (Max allowed voltage of the battery, e.g. during charging.) Vehicle.Powertrain.TractionBattery.NetCapacity (Total net capacity of the battery considering aging.) Vehicle.Powertrain.TractionBattery.NominalVoltage (Nominal Voltage of the battery.) Vehicle.Powertrain.TractionBattery.PowerLoss (Electrical energy lost by power dissipation to heat inside the battery.) Vehicle.Powertrain.TractionBattery.ProductionDate (Production date of battery in ISO8601 format, e.g. YYYY-MM-DD.) Vehicle.Powertrain.TractionBattery.Range (Remaining range in meters using only battery.) Vehicle.Powertrain.TractionBattery.StateOfCharge (Information on the state of charge of the vehicle’s high voltage battery.) Vehicle.Powertrain.TractionBattery.StateOfHealth (Calculated battery state of health at standard conditions.) Vehicle.Powertrain.TractionBattery.Temperature (Temperature Information for the battery pack.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.TractionBattery …","ref":"/leda/docs/vss/vehicle/powertrain/tractionbattery/","tags":"","title":"TractionBattery"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.ClutchEngagement Description: Clutch engagement. 0% = Clutch fully disengaged. 100% = Clutch fully engaged. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eClutchEngagement Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.ClutchEngagement [get] OK Vehicle.Powertrain.Transmission.ClutchEngagement: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.ClutchEngagement 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.ClutchEngagement Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.ClutchEngagement VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.ClutchEngagement is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.ClutchEngagement is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.ClutchEngagement is 2890bd4a2b6a56c19b62d7bd95151fc6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/clutchengagement/","tags":"","title":"ClutchEngagement"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.ClutchWear Description: Clutch wear as a percent. 0 = no wear. 100 = worn. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eClutchWear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.ClutchWear [get] OK Vehicle.Powertrain.Transmission.ClutchWear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.ClutchWear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.ClutchWear Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.ClutchWear VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.ClutchWear is a Sensor.\nThe vehicle signal Vehicle.Powertrain.Transmission.ClutchWear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.ClutchWear is c113405ad165571a9d53ae4cf55dc929\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.ClutchWear …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/clutchwear/","tags":"","title":"ClutchWear"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.CurrentGear Description: The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eCurrentGear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.CurrentGear [get] OK Vehicle.Powertrain.Transmission.CurrentGear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.CurrentGear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.CurrentGear Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.CurrentGear VSS: Addressing nodes Data type int8 VSS: Datatypes Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.CurrentGear is a Sensor.\nThe vehicle signal Vehicle.Powertrain.Transmission.CurrentGear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.CurrentGear is cd0ba1d772565e16bff46cbd5c9361da\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.CurrentGear …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/currentgear/","tags":"","title":"CurrentGear"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure Description: Delta Pressure of Diesel Particulate Filter. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselParticulateFilter DieselParticulateFilter--\u003eDeltaPressure Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure [get] OK Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure VSS: Addressing nodes Data type float VSS: Datatypes Unit Pa VSS: Units Label pascal Description Pressure measured in pascal VSS: Sensors \u0026 Actuators Domain pressure Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure is a6f476775c60531b93acb835e0bc6ab6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselparticulatefilter/deltapressure/","tags":"","title":"DeltaPressure"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.DiffLockFrontEngagement Description: Front Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eDiffLockFrontEngagement Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.DiffLockFrontEngagement [get] OK Vehicle.Powertrain.Transmission.DiffLockFrontEngagement: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.DiffLockFrontEngagement 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.DiffLockFrontEngagement Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.DiffLockFrontEngagement VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.DiffLockFrontEngagement is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.DiffLockFrontEngagement is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.DiffLockFrontEngagement is 5149afe37fbd5c24847b5820821abc02\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/difflockfrontengagement/","tags":"","title":"DiffLockFrontEngagement"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.DiffLockRearEngagement Description: Rear Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eDiffLockRearEngagement Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.DiffLockRearEngagement [get] OK Vehicle.Powertrain.Transmission.DiffLockRearEngagement: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.DiffLockRearEngagement 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.DiffLockRearEngagement Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.DiffLockRearEngagement VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.DiffLockRearEngagement is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.DiffLockRearEngagement is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.DiffLockRearEngagement is 197c939bd1405613b80179becec6db83\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/difflockrearengagement/","tags":"","title":"DiffLockRearEngagement"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.DriveType Description: Drive type. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eDriveType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.DriveType [get] OK Vehicle.Powertrain.Transmission.DriveType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.DriveType UNKNOWN [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.DriveType Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.DriveType VSS: Addressing nodes Data type string VSS: Datatypes Default value UNKNOWN VSS: Sensors \u0026 Actuators Allowed values ['UNKNOWN', 'FORWARD_WHEEL_DRIVE', 'REAR_WHEEL_DRIVE', 'ALL_WHEEL_DRIVE'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.DriveType is an Attribute.\nThe vehicle signal Vehicle.Powertrain.Transmission.DriveType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.DriveType is 0e480b76fb2d5f8bb08fb586f90ee6ae\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.DriveType …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/drivetype/","tags":"","title":"DriveType"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor Description: Electric Motor specific data. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor Signal Information The vehicle signal Vehicle.Powertrain.ElectricMotor is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor is 1ade64f6b0d05f6c9340e7a667555ae2\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.ElectricMotor.CoolantTemperature (Motor coolant temperature (if applicable).) Vehicle.Powertrain.ElectricMotor.EngineCode (Engine code designation, as specified by vehicle manufacturer.) Vehicle.Powertrain.ElectricMotor.MaxPower (Peak power, in kilowatts, that motor(s) can generate.) Vehicle.Powertrain.ElectricMotor.MaxRegenPower (Peak regen/brake power, in kilowatts, that motor(s) can generate.) Vehicle.Powertrain.ElectricMotor.MaxRegenTorque (Peak regen/brake torque, in newton meter, that the motor(s) can generate.) Vehicle.Powertrain.ElectricMotor.MaxTorque (Peak power, in newton meter, that the motor(s) can generate.) Vehicle.Powertrain.ElectricMotor.Power (Current motor power output. Negative values indicate regen mode.) Vehicle.Powertrain.ElectricMotor.Speed (Motor rotational speed measured as rotations per minute. Negative values indicate reverse driving mode.) Vehicle.Powertrain.ElectricMotor.Temperature (Motor temperature.) Vehicle.Powertrain.ElectricMotor.Torque (Current motor torque. Negative values indicate regen mode.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/","tags":"","title":"ElectricMotor"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.EngineCode Description: Engine code designation, as specified by vehicle manufacturer. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eEngineCode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.EngineCode [get] OK Vehicle.Powertrain.ElectricMotor.EngineCode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.EngineCode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.EngineCode Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.EngineCode VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.EngineCode is an Attribute.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.EngineCode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.EngineCode is e4102a5142ed501495e5edafd3d36dfb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.EngineCode …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/enginecode/","tags":"","title":"EngineCode"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.GearChangeMode Description: Is the gearbox in automatic or manual (paddle) mode. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eGearChangeMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.GearChangeMode [get] OK Vehicle.Powertrain.Transmission.GearChangeMode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.GearChangeMode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.GearChangeMode Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.GearChangeMode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['MANUAL', 'AUTOMATIC'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.GearChangeMode is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.GearChangeMode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.GearChangeMode is ff3c69378c2f598286e51f7dac13adaa\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/gearchangemode/","tags":"","title":"GearChangeMode"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.GearCount Description: Number of forward gears in the transmission. -1 = CVT. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eGearCount Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.GearCount [get] OK Vehicle.Powertrain.Transmission.GearCount: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.GearCount 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.GearCount Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.GearCount VSS: Addressing nodes Data type int8 VSS: Datatypes Default value 0 VSS: Sensors \u0026 Actuators Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.GearCount is an Attribute.\nThe vehicle signal Vehicle.Powertrain.Transmission.GearCount is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.GearCount is 84293f40d3ed57f1a08992d97b1a9ccd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.GearCount …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/gearcount/","tags":"","title":"GearCount"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature Description: Inlet temperature of Diesel Particulate Filter. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselParticulateFilter DieselParticulateFilter--\u003eInletTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature [get] OK Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature is 70e90d202d3054bd967e67dce95c8ef2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselparticulatefilter/inlettemperature/","tags":"","title":"InletTemperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged Description: Is electrical powertrain mechanically connected/engaged to the drivetrain or not. False = Disconnected/Disengaged. True = Connected/Engaged. Comment: In some hybrid solutions it is possible to disconnect/disengage the electrical powertrain mechanically to avoid induced voltage reaching a too high level when driving at high speed. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eIsElectricalPowertrainEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged [get] OK Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged is 6660cf1d88d15430b1e7c8908a7b769b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/iselectricalpowertrainengaged/","tags":"","title":"IsElectricalPowertrainEngaged"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.IsLowRangeEngaged Description: Is gearbox in low range mode or not. False = Normal/High range engaged. True = Low range engaged. Comment: The possibility to switch between low and high gear range is typically only available in heavy vehicles and off-road vehicles. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eIsLowRangeEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.IsLowRangeEngaged [get] OK Vehicle.Powertrain.Transmission.IsLowRangeEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.IsLowRangeEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.IsLowRangeEngaged Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.IsLowRangeEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.IsLowRangeEngaged is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.IsLowRangeEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.IsLowRangeEngaged is 63ba7593926b574ebbe4f90b28557e78\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/islowrangeengaged/","tags":"","title":"IsLowRangeEngaged"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.IsParkLockEngaged Description: Is the transmission park lock engaged or not. False = Disengaged. True = Engaged. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eIsParkLockEngaged Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.IsParkLockEngaged [get] OK Vehicle.Powertrain.Transmission.IsParkLockEngaged: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.IsParkLockEngaged false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.IsParkLockEngaged Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.IsParkLockEngaged VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.IsParkLockEngaged is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.IsParkLockEngaged is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.IsParkLockEngaged is 1578da3f925e54ac9df978abd0195408\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/isparklockengaged/","tags":"","title":"IsParkLockEngaged"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.MaxPower Description: Peak power, in kilowatts, that motor(s) can generate. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eMaxPower Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.MaxPower [get] OK Vehicle.Powertrain.ElectricMotor.MaxPower: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.MaxPower 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.MaxPower Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.MaxPower VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kW VSS: Units Label kilowatt Description Power measured in kilowatts VSS: Sensors \u0026 Actuators Domain power Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.MaxPower is an Attribute.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.MaxPower is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.MaxPower is 825ec7911ee958abb199b9f7903df3a6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.MaxPower …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/maxpower/","tags":"","title":"MaxPower"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.MaxRegenPower Description: Peak regen/brake power, in kilowatts, that motor(s) can generate. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eMaxRegenPower Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.MaxRegenPower [get] OK Vehicle.Powertrain.ElectricMotor.MaxRegenPower: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.MaxRegenPower 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.MaxRegenPower Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.MaxRegenPower VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kW VSS: Units Label kilowatt Description Power measured in kilowatts VSS: Sensors \u0026 Actuators Domain power Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.MaxRegenPower is an Attribute.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.MaxRegenPower is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.MaxRegenPower is 7f2cb2650ba95485b7156ffe76e27366\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/maxregenpower/","tags":"","title":"MaxRegenPower"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.MaxTorque Description: Peak power, in newton meter, that the motor(s) can generate. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eElectricMotor ElectricMotor--\u003eMaxTorque Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.ElectricMotor.MaxTorque [get] OK Vehicle.Powertrain.ElectricMotor.MaxTorque: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.ElectricMotor.MaxTorque 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.ElectricMotor.MaxTorque Data Type \u0026 Unit Path Vehicle.Powertrain.ElectricMotor.MaxTorque VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit Nm VSS: Units Label newton meter Description Torque measured in newton meters VSS: Sensors \u0026 Actuators Domain torque Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.ElectricMotor.MaxTorque is an Attribute.\nThe vehicle signal Vehicle.Powertrain.ElectricMotor.MaxTorque is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.ElectricMotor.MaxTorque is cf31eabcde5151f589e9b0f7a6090512\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.ElectricMotor.MaxTorque …","ref":"/leda/docs/vss/vehicle/powertrain/electricmotor/maxtorque/","tags":"","title":"MaxTorque"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature Description: Outlet temperature of Diesel Particulate Filter. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselParticulateFilter DieselParticulateFilter--\u003eOutletTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature [get] OK Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature VSS: Addressing nodes Data type float VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature is e2b7f9d97bec5c0d94ade71a5e2f6518\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselparticulatefilter/outlettemperature/","tags":"","title":"OutletTemperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.PerformanceMode Description: Current gearbox performance mode. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003ePerformanceMode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.PerformanceMode [get] OK Vehicle.Powertrain.Transmission.PerformanceMode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.PerformanceMode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.PerformanceMode Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.PerformanceMode VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['NORMAL', 'SPORT', 'ECONOMY', 'SNOW', 'RAIN'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.PerformanceMode is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.PerformanceMode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.PerformanceMode is 6b5cfd85cb595e559503ccf993be04dd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/performancemode/","tags":"","title":"PerformanceMode"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.SelectedGear Description: The selected gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse, 126=Park, 127=Drive. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eSelectedGear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.SelectedGear [get] OK Vehicle.Powertrain.Transmission.SelectedGear: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.SelectedGear 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.SelectedGear Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.SelectedGear VSS: Addressing nodes Data type int8 VSS: Datatypes Note: The int8 datatype is a signed 8-bit integer which technically allows values between -128 and 127 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.SelectedGear is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.SelectedGear is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.SelectedGear is 490fd99b9d5f562eb180c19e8cef5e12\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.SelectedGear …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/selectedgear/","tags":"","title":"SelectedGear"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.Temperature Description: The current gearbox temperature. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eTemperature Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.Temperature [get] OK Vehicle.Powertrain.Transmission.Temperature: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.Temperature 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.Temperature Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.Temperature VSS: Addressing nodes Data type int16 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.Temperature is a Sensor.\nThe vehicle signal Vehicle.Powertrain.Transmission.Temperature is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.Temperature is 4f5e48c3511b5e1abff11aa7ec62dd18\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.Temperature …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/temperature/","tags":"","title":"Temperature"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.TorqueDistribution Description: Torque distribution between front and rear axle in percent. -100% = Full torque to front axle, 0% = 50:50 Front/Rear, 100% = Full torque to rear axle. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eTorqueDistribution Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.TorqueDistribution [get] OK Vehicle.Powertrain.Transmission.TorqueDistribution: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.TorqueDistribution 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.TorqueDistribution Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.TorqueDistribution VSS: Addressing nodes Data type float VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value -100 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.TorqueDistribution is an Actuator.\nThe vehicle signal Vehicle.Powertrain.Transmission.TorqueDistribution is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.TorqueDistribution is d3bcaaf973d3512287817049db9bd677\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/torquedistribution/","tags":"","title":"TorqueDistribution"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission Description: Transmission-specific data, stopping at the drive shafts. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission Signal Information The vehicle signal Vehicle.Powertrain.Transmission is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission is 6b71e284b63a527caa6296a66e9fdd0c\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.Transmission.ClutchEngagement (Clutch engagement. 0% = Clutch fully disengaged. 100% = Clutch fully engaged.) Vehicle.Powertrain.Transmission.ClutchWear (Clutch wear as a percent. 0 = no wear. 100 = worn.) Vehicle.Powertrain.Transmission.CurrentGear (The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.) Vehicle.Powertrain.Transmission.DiffLockFrontEngagement (Front Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.) Vehicle.Powertrain.Transmission.DiffLockRearEngagement (Rear Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.) Vehicle.Powertrain.Transmission.DriveType (Drive type.) Vehicle.Powertrain.Transmission.GearChangeMode (Is the gearbox in automatic or manual (paddle) mode.) Vehicle.Powertrain.Transmission.GearCount (Number of forward gears in the transmission. -1 = CVT.) Vehicle.Powertrain.Transmission.IsElectricalPowertrainEngaged (Is electrical powertrain mechanically connected/engaged to the drivetrain or not. False = Disconnected/Disengaged. True = Connected/Engaged.) Vehicle.Powertrain.Transmission.IsLowRangeEngaged (Is gearbox in low range mode or not. False = Normal/High range engaged. True = Low range engaged.) Vehicle.Powertrain.Transmission.IsParkLockEngaged (Is the transmission park lock engaged or not. False = Disengaged. True = Engaged.) Vehicle.Powertrain.Transmission.PerformanceMode (Current gearbox performance mode.) Vehicle.Powertrain.Transmission.SelectedGear (The selected gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse, 126=Park, 127=Drive.) Vehicle.Powertrain.Transmission.Temperature (The current gearbox temperature.) Vehicle.Powertrain.Transmission.TorqueDistribution (Torque distribution between front and rear axle in percent. -100% = Full torque to front axle, 0% = 50:50 Front/Rear, 100% = Full torque to rear axle.) Vehicle.Powertrain.Transmission.TravelledDistance (Odometer reading, total distance travelled during the lifetime of the transmission.) Vehicle.Powertrain.Transmission.Type (Transmission type.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission Description: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/","tags":"","title":"Transmission"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.TravelledDistance Description: Odometer reading, total distance travelled during the lifetime of the transmission. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eTravelledDistance Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.TravelledDistance [get] OK Vehicle.Powertrain.Transmission.TravelledDistance: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.TravelledDistance 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.TravelledDistance Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.TravelledDistance VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.TravelledDistance is a Sensor.\nThe vehicle signal Vehicle.Powertrain.Transmission.TravelledDistance is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.TravelledDistance is b9dd66f20c7f5b12a046766b94dc20c1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/travelleddistance/","tags":"","title":"TravelledDistance"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.Type Description: Transmission type. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eTransmission Transmission--\u003eType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Transmission.Type [get] OK Vehicle.Powertrain.Transmission.Type: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Transmission.Type UNKNOWN [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Transmission.Type Data Type \u0026 Unit Path Vehicle.Powertrain.Transmission.Type VSS: Addressing nodes Data type string VSS: Datatypes Default value UNKNOWN VSS: Sensors \u0026 Actuators Allowed values ['UNKNOWN', 'SEQUENTIAL', 'H', 'AUTOMATIC', 'DSG', 'CVT'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.Transmission.Type is an Attribute.\nThe vehicle signal Vehicle.Powertrain.Transmission.Type is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Transmission.Type is f83b9e5464d85a0288fcb32c164d3c63\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Transmission.Type …","ref":"/leda/docs/vss/vehicle/powertrain/transmission/type/","tags":"","title":"Type"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.AspirationType Description: Type of aspiration (natural, turbocharger, supercharger etc). Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eAspirationType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.AspirationType [get] OK Vehicle.Powertrain.CombustionEngine.AspirationType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.AspirationType UNKNOWN [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.AspirationType Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.AspirationType VSS: Addressing nodes Data type string VSS: Datatypes Default value UNKNOWN VSS: Sensors \u0026 Actuators Allowed values ['UNKNOWN', 'NATURAL', 'SUPERCHARGER', 'TURBOCHARGER'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.AspirationType is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.AspirationType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.AspirationType is 3ca6a8ff30275c20a9d8d6d6829574eb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/aspirationtype/","tags":"","title":"AspirationType"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity Description: Capacity in liters of the Diesel Exhaust Fluid Tank. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselExhaustFluid DieselExhaustFluid--\u003eCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity [get] OK Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity VSS: Addressing nodes Data type float VSS: Datatypes Unit l VSS: Units Label liter Description Volume measured in liters VSS: Sensors \u0026 Actuators Domain volume Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity is 863c16ad452b5cf5b7a37f58bdda14c3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselexhaustfluid/capacity/","tags":"","title":"Capacity"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.CompressionRatio Description: Engine compression ratio, specified in the format ‘X:1’, e.g. ‘9.2:1’. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eCompressionRatio Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.CompressionRatio [get] OK Vehicle.Powertrain.CombustionEngine.CompressionRatio: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.CompressionRatio Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.CompressionRatio Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.CompressionRatio VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.CompressionRatio is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.CompressionRatio is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.CompressionRatio is ead42922511051a0a0a1b634781f3c09\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/compressionratio/","tags":"","title":"CompressionRatio"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid Description: Signals related to Diesel Exhaust Fluid (DEF). DEF is called AUS32 in ISO 22241. Comment: In retail and marketing other names are typically used for the fluid. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselExhaustFluid Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid Signal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid is 81d8eec46d9357a3b1064bfb5d070fa2\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity (Capacity in liters of the Diesel Exhaust Fluid Tank.) Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow (Indicates if the Diesel Exhaust Fluid level is low. True if level is low. Definition of low is vehicle dependent.) Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level (Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.) Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range (Remaining range in meters of the Diesel Exhaust Fluid present in the vehicle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselexhaustfluid/","tags":"","title":"DieselExhaustFluid"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter Description: Diesel Particulate Filter signals. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselParticulateFilter Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter Signal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter is eeddd99ad6475b1a92b9ec7bd7cefdbd\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.CombustionEngine.DieselParticulateFilter.DeltaPressure (Delta Pressure of Diesel Particulate Filter.) Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.InletTemperature (Inlet temperature of Diesel Particulate Filter.) Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter.OutletTemperature (Outlet temperature of Diesel Particulate Filter.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselparticulatefilter/","tags":"","title":"DieselParticulateFilter"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.ECT Description: Engine coolant temperature. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eECT Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.ECT [get] OK Vehicle.Powertrain.CombustionEngine.ECT: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.ECT 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.ECT Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.ECT VSS: Addressing nodes Data type int16 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.ECT is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.ECT is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.ECT is fff3cad23cac5b189a1a075c3ab562cd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.ECT …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/ect/","tags":"","title":"ECT"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity Description: Engine coolant capacity in liters. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEngineCoolantCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity [get] OK Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity VSS: Addressing nodes Data type float VSS: Datatypes Unit l VSS: Units Label liter Description Volume measured in liters VSS: Sensors \u0026 Actuators Domain volume Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity is 90b5b64808ea5f4fa2798d96143b0d60\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/enginecoolantcapacity/","tags":"","title":"EngineCoolantCapacity"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EngineHours Description: Accumulated time during engine lifetime with ’engine speed (rpm) \u003e 0'. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEngineHours Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EngineHours [get] OK Vehicle.Powertrain.CombustionEngine.EngineHours: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EngineHours 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EngineHours Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EngineHours VSS: Addressing nodes Data type float VSS: Datatypes Unit h VSS: Units Label hour Description Time measured in hours VSS: Sensors \u0026 Actuators Domain time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EngineHours is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EngineHours is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EngineHours is a23a62e24f58514d961890f53262e4e0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/enginehours/","tags":"","title":"EngineHours"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EngineOilCapacity Description: Engine oil capacity in liters. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEngineOilCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EngineOilCapacity [get] OK Vehicle.Powertrain.CombustionEngine.EngineOilCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EngineOilCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EngineOilCapacity Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EngineOilCapacity VSS: Addressing nodes Data type float VSS: Datatypes Unit l VSS: Units Label liter Description Volume measured in liters VSS: Sensors \u0026 Actuators Domain volume Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EngineOilCapacity is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EngineOilCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EngineOilCapacity is 2ca7af6facb55a13885989faa9bc6ca7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/engineoilcapacity/","tags":"","title":"EngineOilCapacity"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EngineOilLevel Description: Engine oil level. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEngineOilLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EngineOilLevel [get] OK Vehicle.Powertrain.CombustionEngine.EngineOilLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EngineOilLevel Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EngineOilLevel Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EngineOilLevel VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['CRITICALLY_LOW', 'LOW', 'NORMAL', 'HIGH', 'CRITICALLY_HIGH'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EngineOilLevel is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EngineOilLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EngineOilLevel is e3813f59e94b509eb865fd97255a8a4f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/engineoillevel/","tags":"","title":"EngineOilLevel"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EOP Description: Engine oil pressure. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEOP Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EOP [get] OK Vehicle.Powertrain.CombustionEngine.EOP: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EOP 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EOP Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EOP VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EOP is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EOP is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EOP is 76c7039dc7975ec3a003f0f4a04895ec\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EOP …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/eop/","tags":"","title":"EOP"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EOT Description: Engine oil temperature. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEOT Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EOT [get] OK Vehicle.Powertrain.CombustionEngine.EOT: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EOT 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EOT Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EOT VSS: Addressing nodes Data type int16 VSS: Datatypes Unit celsius VSS: Units Label degree celsius Description Temperature measured in degree celsius VSS: Sensors \u0026 Actuators Domain temperature Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EOT is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EOT is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EOT is eae6f5eae04f530e80f6b024f95b767d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EOT …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/eot/","tags":"","title":"EOT"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.IdleHours Description: Accumulated idling time during engine lifetime. Definition of idling is not standardized. Comment: Vehicles may calculate accumulated idle time for an engine. It might be based on engine speed (rpm) below a certain limit or any other mechanism. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eIdleHours Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.IdleHours [get] OK Vehicle.Powertrain.CombustionEngine.IdleHours: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.IdleHours 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.IdleHours Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.IdleHours VSS: Addressing nodes Data type float VSS: Datatypes Unit h VSS: Units Label hour Description Time measured in hours VSS: Sensors \u0026 Actuators Domain time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.IdleHours is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.IdleHours is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.IdleHours is 6caa3d7e669c5cc6aecd4a6be9a302d4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/idlehours/","tags":"","title":"IdleHours"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow Description: Indicates if the Diesel Exhaust Fluid level is low. True if level is low. Definition of low is vehicle dependent. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselExhaustFluid DieselExhaustFluid--\u003eIsLevelLow Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow [get] OK Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.IsLevelLow is 811af3fe4f7f5270b4119bb66cff8759\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselexhaustfluid/islevellow/","tags":"","title":"IsLevelLow"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.IsRunning Description: Engine Running. True if engine is rotating (Speed \u003e 0). Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eIsRunning Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.IsRunning [get] OK Vehicle.Powertrain.CombustionEngine.IsRunning: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.IsRunning false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.IsRunning Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.IsRunning VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.IsRunning is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.IsRunning is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.IsRunning is 57652c27679757398c44d56af7a044d3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/isrunning/","tags":"","title":"IsRunning"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level Description: Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselExhaustFluid DieselExhaustFluid--\u003eLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level [get] OK Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level is f5b0269b58ff5a8e8399f6d96963a3b6\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselexhaustfluid/level/","tags":"","title":"Level"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MAF Description: Grams of air drawn into engine per second. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eMAF Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.MAF [get] OK Vehicle.Powertrain.CombustionEngine.MAF: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.MAF 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.MAF Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.MAF VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit g/s VSS: Units Label grams per second Description Mass per time measured in grams per second VSS: Sensors \u0026 Actuators Domain mass per time Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.MAF is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.MAF is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.MAF is 1e222ed8c48b5dcea60e43ac8af7d6df\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MAF …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/maf/","tags":"","title":"MAF"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MAP Description: Manifold absolute pressure possibly boosted using forced induction. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eMAP Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.MAP [get] OK Vehicle.Powertrain.CombustionEngine.MAP: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.MAP 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.MAP Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.MAP VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kPa VSS: Units Label kilopascal Description Pressure measured in kilopascal VSS: Sensors \u0026 Actuators Domain pressure Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.MAP is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.MAP is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.MAP is 28d4354fa34056369acb857aa7cc76ac\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MAP …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/map/","tags":"","title":"MAP"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MaxPower Description: Peak power, in kilowatts, that engine can generate. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eMaxPower Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.MaxPower [get] OK Vehicle.Powertrain.CombustionEngine.MaxPower: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.MaxPower 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.MaxPower Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.MaxPower VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kW VSS: Units Label kilowatt Description Power measured in kilowatts VSS: Sensors \u0026 Actuators Domain power Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.MaxPower is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.MaxPower is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.MaxPower is 81fbdd5e90f557a38b96578a38dc137d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MaxPower …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/maxpower/","tags":"","title":"MaxPower"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.MaxTorque Description: Peak torque, in newton meter, that the engine can generate. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eMaxTorque Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.MaxTorque [get] OK Vehicle.Powertrain.CombustionEngine.MaxTorque: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.MaxTorque 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.MaxTorque Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.MaxTorque VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit Nm VSS: Units Label newton meter Description Torque measured in newton meters VSS: Sensors \u0026 Actuators Domain torque Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.MaxTorque is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.MaxTorque is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.MaxTorque is 471cd478c1e8597f8e97c85b4e4ebe26\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/maxtorque/","tags":"","title":"MaxTorque"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.NumberOfCylinders Description: Number of cylinders. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eNumberOfCylinders Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.NumberOfCylinders [get] OK Vehicle.Powertrain.CombustionEngine.NumberOfCylinders: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.NumberOfCylinders 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.NumberOfCylinders Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.NumberOfCylinders VSS: Addressing nodes Data type uint16 VSS: Datatypes Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.NumberOfCylinders is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.NumberOfCylinders is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.NumberOfCylinders is b2cd342c218257e88d214cdb511df82b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/numberofcylinders/","tags":"","title":"NumberOfCylinders"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder Description: Number of valves per cylinder. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eNumberOfValvesPerCylinder Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder [get] OK Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder VSS: Addressing nodes Data type uint16 VSS: Datatypes Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder is 44633204726e561ca21beff31f3fef80\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/numberofvalvespercylinder/","tags":"","title":"NumberOfValvesPerCylinder"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.OilLifeRemaining Description: Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded. Comment: In addition to this a signal a vehicle can report remaining time to service (including e.g. oil change) by Vehicle.Service.TimeToService. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eOilLifeRemaining Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.OilLifeRemaining [get] OK Vehicle.Powertrain.CombustionEngine.OilLifeRemaining: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.OilLifeRemaining 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.OilLifeRemaining Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.OilLifeRemaining VSS: Addressing nodes Data type int32 VSS: Datatypes Unit s VSS: Units Label second Description Time measured in seconds VSS: Sensors \u0026 Actuators Domain time Note: The int32 datatype is a signed 32-bit integer which technically allows values between -2147483648 and 2147483647 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.OilLifeRemaining is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.OilLifeRemaining is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.OilLifeRemaining is 94303734c68c5353a02625f652103918\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/oilliferemaining/","tags":"","title":"OilLifeRemaining"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Power Description: Current engine power output. Shall be reported as 0 during engine breaking. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003ePower Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.Power [get] OK Vehicle.Powertrain.CombustionEngine.Power: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.Power 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.Power Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.Power VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kW VSS: Units Label kilowatt Description Power measured in kilowatts VSS: Sensors \u0026 Actuators Domain power Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.Power is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.Power is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.Power is 20e8b5d2187758c2848ed421248c180d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Power …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/power/","tags":"","title":"Power"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range Description: Remaining range in meters of the Diesel Exhaust Fluid present in the vehicle. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDieselExhaustFluid DieselExhaustFluid--\u003eRange Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range [get] OK Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range VSS: Addressing nodes Data type uint32 VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Range is 124afbee975c5a67b316413f7b805eac\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/dieselexhaustfluid/range/","tags":"","title":"Range"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Speed Description: Engine speed measured as rotations per minute. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.Speed [get] OK Vehicle.Powertrain.CombustionEngine.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.Speed Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.Speed VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit rpm VSS: Units Label revolutions per minute Description Rotational speed measured in revolutions per minute VSS: Sensors \u0026 Actuators Domain rotational speed Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.Speed is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.Speed is 557ce24c5a4d51cc825059c948ac9e29\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Speed …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Torque Description: Current engine torque. Shall be reported as 0 during engine breaking. Comment: During engine breaking the engine delivers a negative torque to the transmission. This negative torque shall be ignored, instead 0 shall be reported. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eTorque Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.Torque [get] OK Vehicle.Powertrain.CombustionEngine.Torque: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.Torque 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.Torque Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.Torque VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit Nm VSS: Units Label newton meter Description Torque measured in newton meters VSS: Sensors \u0026 Actuators Domain torque Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.Torque is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.Torque is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.Torque is b81f504bdb57513299ae6e9402ec7bcd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Torque …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/torque/","tags":"","title":"Torque"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.TPS Description: Current throttle position. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eTPS Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.TPS [get] OK Vehicle.Powertrain.CombustionEngine.TPS: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.TPS 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.TPS Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.TPS VSS: Addressing nodes Data type uint8 VSS: Datatypes Unit percent VSS: Units Label percent Description Relation measured in percent VSS: Sensors \u0026 Actuators Domain relation Maximum value 100 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.TPS is a Sensor.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.TPS is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.TPS is 1ddb77860de558b4876ffb399a442bda\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.TPS …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/tps/","tags":"","title":"TPS"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.AccumulatedBrakingEnergy Description: The accumulated energy from regenerative braking over lifetime. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eAccumulatedBrakingEnergy Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.AccumulatedBrakingEnergy [get] OK Vehicle.Powertrain.AccumulatedBrakingEnergy: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.AccumulatedBrakingEnergy 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.AccumulatedBrakingEnergy Data Type \u0026 Unit Path Vehicle.Powertrain.AccumulatedBrakingEnergy VSS: Addressing nodes Data type float VSS: Datatypes Unit kWh VSS: Units Label kilowatt hours Description Energy consumption measured in kilowatt hours VSS: Sensors \u0026 Actuators Domain energy consumption Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.AccumulatedBrakingEnergy is a Sensor.\nThe vehicle signal Vehicle.Powertrain.AccumulatedBrakingEnergy is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.AccumulatedBrakingEnergy is 0dd466d28d3d5ad094f2015adafb91a5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.AccumulatedBrakingEnergy …","ref":"/leda/docs/vss/vehicle/powertrain/accumulatedbrakingenergy/","tags":"","title":"AccumulatedBrakingEnergy"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.Altitude Description: Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eAltitude Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.Altitude [get] OK Vehicle.CurrentLocation.Altitude: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.Altitude 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.Altitude Data Type \u0026 Unit Path Vehicle.CurrentLocation.Altitude VSS: Addressing nodes Data type double VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.CurrentLocation.Altitude is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.Altitude is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.Altitude is d3ead98ab0b751c1a5b5dd5bc0e5e216\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.Altitude …","ref":"/leda/docs/vss/vehicle/currentlocation/altitude/","tags":"","title":"Altitude"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Bore Description: Bore in millimetres. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eBore Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.Bore [get] OK Vehicle.Powertrain.CombustionEngine.Bore: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.Bore 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.Bore Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.Bore VSS: Addressing nodes Data type float VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.Bore is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.Bore is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.Bore is 1618fb16035b5464961570cc1afd934e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Bore …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/bore/","tags":"","title":"Bore"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine Description: Engine-specific data, stopping at the bell housing. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine Signal Information The vehicle signal Vehicle.Powertrain.CombustionEngine is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine is 159e2e3e75f0590f95b4d2f6cfae54b5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.CombustionEngine.AspirationType (Type of aspiration (natural, turbocharger, supercharger etc).) Vehicle.Powertrain.CombustionEngine.Bore (Bore in millimetres.) Vehicle.Powertrain.CombustionEngine.CompressionRatio (Engine compression ratio, specified in the format ‘X:1’, e.g. ‘9.2:1’.) Vehicle.Powertrain.CombustionEngine.Configuration (Engine configuration.) Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid (Signals related to Diesel Exhaust Fluid (DEF). DEF is called AUS32 in ISO 22241.) Vehicle.Powertrain.CombustionEngine.DieselParticulateFilter (Diesel Particulate Filter signals.) Vehicle.Powertrain.CombustionEngine.Displacement (Displacement in cubic centimetres.) Vehicle.Powertrain.CombustionEngine.ECT (Engine coolant temperature.) Vehicle.Powertrain.CombustionEngine.EOP (Engine oil pressure.) Vehicle.Powertrain.CombustionEngine.EOT (Engine oil temperature.) Vehicle.Powertrain.CombustionEngine.EngineCode (Engine code designation, as specified by vehicle manufacturer.) Vehicle.Powertrain.CombustionEngine.EngineCoolantCapacity (Engine coolant capacity in liters.) Vehicle.Powertrain.CombustionEngine.EngineHours (Accumulated time during engine lifetime with ’engine speed (rpm) \u003e 0’.) Vehicle.Powertrain.CombustionEngine.EngineOilCapacity (Engine oil capacity in liters.) Vehicle.Powertrain.CombustionEngine.EngineOilLevel (Engine oil level.) Vehicle.Powertrain.CombustionEngine.IdleHours (Accumulated idling time during engine lifetime. Definition of idling is not standardized.) Vehicle.Powertrain.CombustionEngine.IsRunning (Engine Running. True if engine is rotating (Speed \u003e 0).) Vehicle.Powertrain.CombustionEngine.MAF (Grams of air drawn into engine per second.) Vehicle.Powertrain.CombustionEngine.MAP (Manifold absolute pressure possibly boosted using forced induction.) Vehicle.Powertrain.CombustionEngine.MaxPower (Peak power, in kilowatts, that engine can generate.) Vehicle.Powertrain.CombustionEngine.MaxTorque (Peak torque, in newton meter, that the engine can generate.) Vehicle.Powertrain.CombustionEngine.NumberOfCylinders (Number of cylinders.) Vehicle.Powertrain.CombustionEngine.NumberOfValvesPerCylinder (Number of valves per cylinder.) Vehicle.Powertrain.CombustionEngine.OilLifeRemaining (Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.) Vehicle.Powertrain.CombustionEngine.Power (Current engine power output. Shall be reported as 0 during engine breaking.) Vehicle.Powertrain.CombustionEngine.Speed (Engine speed measured as rotations per minute.) Vehicle.Powertrain.CombustionEngine.StrokeLength (Stroke length in millimetres.) Vehicle.Powertrain.CombustionEngine.TPS (Current throttle position.) Vehicle.Powertrain.CombustionEngine.Torque (Current engine torque. Shall be reported as 0 during engine breaking.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/","tags":"","title":"CombustionEngine"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Configuration Description: Engine configuration. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eConfiguration Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.Configuration [get] OK Vehicle.Powertrain.CombustionEngine.Configuration: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.Configuration UNKNOWN [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.Configuration Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.Configuration VSS: Addressing nodes Data type string VSS: Datatypes Default value UNKNOWN VSS: Sensors \u0026 Actuators Allowed values ['UNKNOWN', 'STRAIGHT', 'V', 'BOXER', 'W', 'ROTARY', 'RADIAL', 'SQUARE', 'H', 'U', 'OPPOSED', 'X'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.Configuration is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.Configuration is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.Configuration is 586be4567fe059ee9e6cf42901c2e773\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/configuration/","tags":"","title":"Configuration"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation Description: The current latitude and longitude of the vehicle. Navigation flowchart LR Vehicle--\u003eCurrentLocation Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation Signal Information The vehicle signal Vehicle.CurrentLocation is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation is 24777bd485f15fb69550ae0520c40ad5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.CurrentLocation.Altitude (Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.) Vehicle.CurrentLocation.GNSSReceiver (Information on the GNSS receiver used for determining current location.) Vehicle.CurrentLocation.Heading (Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.) Vehicle.CurrentLocation.HorizontalAccuracy (Accuracy of the latitude and longitude coordinates.) Vehicle.CurrentLocation.Latitude (Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.) Vehicle.CurrentLocation.Longitude (Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.) Vehicle.CurrentLocation.Timestamp (Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.) Vehicle.CurrentLocation.VerticalAccuracy (Accuracy of altitude.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation Description: The …","ref":"/leda/docs/vss/vehicle/currentlocation/","tags":"","title":"CurrentLocation"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.Displacement Description: Displacement in cubic centimetres. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eDisplacement Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.Displacement [get] OK Vehicle.Powertrain.CombustionEngine.Displacement: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.Displacement 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.Displacement Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.Displacement VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit cm^3 VSS: Units Label cubic centimeters Description Volume measured in cubic centimeters VSS: Sensors \u0026 Actuators Domain volume Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.Displacement is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.Displacement is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.Displacement is 94dbd928847150ab842c00fa5caaf272\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/displacement/","tags":"","title":"Displacement"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.EngineCode Description: Engine code designation, as specified by vehicle manufacturer. Comment: For hybrid vehicles the engine code may refer to the combination of combustion and electric engine. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eEngineCode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.EngineCode [get] OK Vehicle.Powertrain.CombustionEngine.EngineCode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.EngineCode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.EngineCode Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.EngineCode VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.EngineCode is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.EngineCode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.EngineCode is 4ec845911b8e5b64b2cb1d34063184de\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/enginecode/","tags":"","title":"EngineCode"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver.FixType Description: Fix status of GNSS receiver. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eGNSSReceiver GNSSReceiver--\u003eFixType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.GNSSReceiver.FixType [get] OK Vehicle.CurrentLocation.GNSSReceiver.FixType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.GNSSReceiver.FixType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.GNSSReceiver.FixType Data Type \u0026 Unit Path Vehicle.CurrentLocation.GNSSReceiver.FixType VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['NONE', 'TWO_D', 'TWO_D_SATELLITE_BASED_AUGMENTATION', 'TWO_D_GROUND_BASED_AUGMENTATION', 'TWO_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION', 'THREE_D', 'THREE_D_SATELLITE_BASED_AUGMENTATION', 'THREE_D_GROUND_BASED_AUGMENTATION', 'THREE_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.CurrentLocation.GNSSReceiver.FixType is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.GNSSReceiver.FixType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.GNSSReceiver.FixType is 52853b33d4605608bd0ae50595c69309\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver.FixType …","ref":"/leda/docs/vss/vehicle/currentlocation/gnssreceiver/fixtype/","tags":"","title":"FixType"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver Description: Information on the GNSS receiver used for determining current location. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eGNSSReceiver Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.GNSSReceiver Signal Information The vehicle signal Vehicle.CurrentLocation.GNSSReceiver is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.GNSSReceiver is b1bea5d88662539a8cff6f8fe4974740\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.CurrentLocation.GNSSReceiver.FixType (Fix status of GNSS receiver.) Vehicle.CurrentLocation.GNSSReceiver.MountingPosition (Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver …","ref":"/leda/docs/vss/vehicle/currentlocation/gnssreceiver/","tags":"","title":"GNSSReceiver"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.Heading Description: Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eHeading Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.Heading [get] OK Vehicle.CurrentLocation.Heading: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.Heading 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.Heading Data Type \u0026 Unit Path Vehicle.CurrentLocation.Heading VSS: Addressing nodes Data type double VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 360 VSS: Sensors \u0026 Actuators Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.CurrentLocation.Heading is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.Heading is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.Heading is 2a8f0afa2b315943aa001278875ce012\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.Heading Description: …","ref":"/leda/docs/vss/vehicle/currentlocation/heading/","tags":"","title":"Heading"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.HorizontalAccuracy Description: Accuracy of the latitude and longitude coordinates. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eHorizontalAccuracy Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.HorizontalAccuracy [get] OK Vehicle.CurrentLocation.HorizontalAccuracy: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.HorizontalAccuracy 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.HorizontalAccuracy Data Type \u0026 Unit Path Vehicle.CurrentLocation.HorizontalAccuracy VSS: Addressing nodes Data type double VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.CurrentLocation.HorizontalAccuracy is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.HorizontalAccuracy is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.HorizontalAccuracy is bf25ef243f0c5f839f7ef874f9c57fda\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.HorizontalAccuracy …","ref":"/leda/docs/vss/vehicle/currentlocation/horizontalaccuracy/","tags":"","title":"HorizontalAccuracy"},{"body":" Full qualified VSS Path: Vehicle.Trailer.IsConnected Description: Signal indicating if trailer is connected or not. Navigation flowchart LR Vehicle--\u003eTrailer Trailer--\u003eIsConnected Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Trailer.IsConnected [get] OK Vehicle.Trailer.IsConnected: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Trailer.IsConnected false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Trailer.IsConnected Data Type \u0026 Unit Path Vehicle.Trailer.IsConnected VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.Trailer.IsConnected is a Sensor.\nThe vehicle signal Vehicle.Trailer.IsConnected is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Trailer.IsConnected is 77f28ed03c125ac9a19d22e9436b0ec4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Trailer.IsConnected Description: …","ref":"/leda/docs/vss/vehicle/trailer/isconnected/","tags":"","title":"IsConnected"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.Latitude Description: Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eLatitude Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.Latitude [get] OK Vehicle.CurrentLocation.Latitude: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.Latitude 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.Latitude Data Type \u0026 Unit Path Vehicle.CurrentLocation.Latitude VSS: Addressing nodes Data type double VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Minimum value -90 VSS: Sensors \u0026 Actuators Maximum value 90 VSS: Sensors \u0026 Actuators Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.CurrentLocation.Latitude is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.Latitude is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.Latitude is 08933c5a445055df80bea15fbfa07f1c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.Latitude …","ref":"/leda/docs/vss/vehicle/currentlocation/latitude/","tags":"","title":"Latitude"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.Longitude Description: Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eLongitude Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.Longitude [get] OK Vehicle.CurrentLocation.Longitude: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.Longitude 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.Longitude Data Type \u0026 Unit Path Vehicle.CurrentLocation.Longitude VSS: Addressing nodes Data type double VSS: Datatypes Unit degrees VSS: Units Label degree Description Angle measured in degrees VSS: Sensors \u0026 Actuators Domain angle Minimum value -180 VSS: Sensors \u0026 Actuators Maximum value 180 VSS: Sensors \u0026 Actuators Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.CurrentLocation.Longitude is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.Longitude is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.Longitude is 5246f2ec5fea550cb1b36f110854cfbb\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.Longitude …","ref":"/leda/docs/vss/vehicle/currentlocation/longitude/","tags":"","title":"Longitude"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver.MountingPosition Description: Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eGNSSReceiver GNSSReceiver--\u003eMountingPosition Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.GNSSReceiver.MountingPosition Signal Information The vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.GNSSReceiver.MountingPosition is 5c0887bce6fb5eb79402baaccb203e61\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.CurrentLocation.GNSSReceiver.MountingPosition.X (Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = forward of rear axle. Negative values = backward of rear axle.) Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y (Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = left of origin. Negative values = right of origin. Left/Right is as seen from driver perspective, i.e. by a person looking forward.) Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z (Mounting position of GNSS receiver on Z-axis. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = above center of rear axle. Negative values = below center of rear axle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/currentlocation/gnssreceiver/mountingposition/","tags":"","title":"MountingPosition"},{"body":" Full qualified VSS Path: Vehicle.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.PowerOptimizeLevel [get] OK Vehicle.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.PowerOptimizeLevel is add77f60f7885e39a84baae200569077\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.PowerOptimizeLevel Description: …","ref":"/leda/docs/vss/vehicle/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.PowerOptimizeLevel Description: Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003ePowerOptimizeLevel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.PowerOptimizeLevel [get] OK Vehicle.Powertrain.PowerOptimizeLevel: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.PowerOptimizeLevel 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.PowerOptimizeLevel Data Type \u0026 Unit Path Vehicle.Powertrain.PowerOptimizeLevel VSS: Addressing nodes Data type uint8 VSS: Datatypes Minimum value 0 VSS: Sensors \u0026 Actuators Maximum value 10 VSS: Sensors \u0026 Actuators Note: The uint8 datatype is an unsigned 8-bit integer which technically allows values between 0 and 255 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.PowerOptimizeLevel is an Actuator.\nThe vehicle signal Vehicle.Powertrain.PowerOptimizeLevel is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.PowerOptimizeLevel is d740b02e2fb35c07bf88a6e5ebe2f6e4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.PowerOptimizeLevel …","ref":"/leda/docs/vss/vehicle/powertrain/poweroptimizelevel/","tags":"","title":"PowerOptimizeLevel"},{"body":" Full qualified VSS Path: Vehicle.Powertrain Description: Powertrain data for battery management, etc. Navigation flowchart LR Vehicle--\u003ePowertrain Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain Signal Information The vehicle signal Vehicle.Powertrain is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain is 12f35ec7bd1c58d1a329565ce3d053d5\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Powertrain.AccumulatedBrakingEnergy (The accumulated energy from regenerative braking over lifetime.) Vehicle.Powertrain.CombustionEngine (Engine-specific data, stopping at the bell housing.) Vehicle.Powertrain.ElectricMotor (Electric Motor specific data.) Vehicle.Powertrain.FuelSystem (Fuel system data.) Vehicle.Powertrain.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.Powertrain.Range (Remaining range in meters using all energy sources available in the vehicle.) Vehicle.Powertrain.TractionBattery (Battery Management data.) Vehicle.Powertrain.Transmission (Transmission-specific data, stopping at the drive shafts.) Vehicle.Powertrain.Type (Defines the powertrain type of the vehicle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain Description: Powertrain …","ref":"/leda/docs/vss/vehicle/powertrain/","tags":"","title":"Powertrain"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Range Description: Remaining range in meters using all energy sources available in the vehicle. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eRange Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Range [get] OK Vehicle.Powertrain.Range: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Range 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Range Data Type \u0026 Unit Path Vehicle.Powertrain.Range VSS: Addressing nodes Data type uint32 VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.Powertrain.Range is a Sensor.\nThe vehicle signal Vehicle.Powertrain.Range is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Range is ea4b6de772d65d20b1fa611f997aa7b8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Range Description: …","ref":"/leda/docs/vss/vehicle/powertrain/range/","tags":"","title":"Range"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.CombustionEngine.StrokeLength Description: Stroke length in millimetres. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eCombustionEngine CombustionEngine--\u003eStrokeLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.CombustionEngine.StrokeLength [get] OK Vehicle.Powertrain.CombustionEngine.StrokeLength: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.CombustionEngine.StrokeLength 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.CombustionEngine.StrokeLength Data Type \u0026 Unit Path Vehicle.Powertrain.CombustionEngine.StrokeLength VSS: Addressing nodes Data type float VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Powertrain.CombustionEngine.StrokeLength is an Attribute.\nThe vehicle signal Vehicle.Powertrain.CombustionEngine.StrokeLength is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.CombustionEngine.StrokeLength is 1bdfdab7904d51ed93e101b84ea54ddf\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/powertrain/combustionengine/strokelength/","tags":"","title":"StrokeLength"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.Timestamp Description: Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eTimestamp Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.Timestamp [get] OK Vehicle.CurrentLocation.Timestamp: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.Timestamp Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.Timestamp Data Type \u0026 Unit Path Vehicle.CurrentLocation.Timestamp VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.CurrentLocation.Timestamp is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.Timestamp is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.Timestamp is 094aeff73be05c08905690be0e82a438\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.Timestamp …","ref":"/leda/docs/vss/vehicle/currentlocation/timestamp/","tags":"","title":"Timestamp"},{"body":" Full qualified VSS Path: Vehicle.Trailer Description: Trailer signals. Navigation flowchart LR Vehicle--\u003eTrailer Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Trailer Signal Information The vehicle signal Vehicle.Trailer is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Trailer is 66206ee5c25a5817bef214c0c8ae8013\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Trailer.IsConnected (Signal indicating if trailer is connected or not.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Trailer Description: Trailer …","ref":"/leda/docs/vss/vehicle/trailer/","tags":"","title":"Trailer"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y Description: Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = left of origin. Negative values = right of origin. Left/Right is as seen from driver perspective, i.e. by a person looking forward. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eGNSSReceiver GNSSReceiver--\u003eMountingPosition MountingPosition--\u003eY Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y [get] OK Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y Data Type \u0026 Unit Path Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y VSS: Addressing nodes Data type int16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y is an Attribute.\nThe vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Y is 16745ae827c0527ea2c48c20f0c146f1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/currentlocation/gnssreceiver/mountingposition/y/","tags":"","title":"true"},{"body":" Full qualified VSS Path: Vehicle.Powertrain.Type Description: Defines the powertrain type of the vehicle. Comment: For vehicles with a combustion engine (including hybrids) more detailed information on fuels supported can be found in FuelSystem.SupportedFuelTypes and FuelSystem.SupportedFuels. Navigation flowchart LR Vehicle--\u003ePowertrain Powertrain--\u003eType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Powertrain.Type [get] OK Vehicle.Powertrain.Type: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Powertrain.Type Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Powertrain.Type Data Type \u0026 Unit Path Vehicle.Powertrain.Type VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['COMBUSTION', 'HYBRID', 'ELECTRIC'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.Powertrain.Type is an Attribute.\nThe vehicle signal Vehicle.Powertrain.Type is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Powertrain.Type is 2a000da4204658a4a6e3ecd5176bdfba\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Powertrain.Type Description: Defines …","ref":"/leda/docs/vss/vehicle/powertrain/type/","tags":"","title":"Type"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.VerticalAccuracy Description: Accuracy of altitude. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eVerticalAccuracy Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.VerticalAccuracy [get] OK Vehicle.CurrentLocation.VerticalAccuracy: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.VerticalAccuracy 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.VerticalAccuracy Data Type \u0026 Unit Path Vehicle.CurrentLocation.VerticalAccuracy VSS: Addressing nodes Data type double VSS: Datatypes Unit m VSS: Units Label meter Description Distance measured in meters VSS: Sensors \u0026 Actuators Domain distance Note: The double datatype is a double precision floating point number which technically allows values between -1.7e ^ -300 and 1.7e ^ 300\nSignal Information The vehicle signal Vehicle.CurrentLocation.VerticalAccuracy is a Sensor.\nThe vehicle signal Vehicle.CurrentLocation.VerticalAccuracy is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.VerticalAccuracy is 8f54055bce9e5e8e97fb6051582707ab\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentLocation.VerticalAccuracy …","ref":"/leda/docs/vss/vehicle/currentlocation/verticalaccuracy/","tags":"","title":"VerticalAccuracy"},{"body":" Full qualified VSS Path: Vehicle.Width Description: Overall vehicle width. Navigation flowchart LR Vehicle--\u003eWidth Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Width [get] OK Vehicle.Width: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Width 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Width Data Type \u0026 Unit Path Vehicle.Width VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Width is an Attribute.\nThe vehicle signal Vehicle.Width is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Width is b4aabe144e3259adb1459a2e25fec9bd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Width Description: Overall vehicle …","ref":"/leda/docs/vss/vehicle/width/","tags":"","title":"Width"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X Description: Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = forward of rear axle. Negative values = backward of rear axle. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eGNSSReceiver GNSSReceiver--\u003eMountingPosition MountingPosition--\u003eX Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X [get] OK Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X Data Type \u0026 Unit Path Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X VSS: Addressing nodes Data type int16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X is an Attribute.\nThe vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.X is f23d40f3556b5676a0d1e3def037197f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/currentlocation/gnssreceiver/mountingposition/x/","tags":"","title":"X"},{"body":" Full qualified VSS Path: Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z Description: Mounting position of GNSS receiver on Z-axis. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = above center of rear axle. Negative values = below center of rear axle. Navigation flowchart LR Vehicle--\u003eCurrentLocation CurrentLocation--\u003eGNSSReceiver GNSSReceiver--\u003eMountingPosition MountingPosition--\u003eZ Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z [get] OK Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z Data Type \u0026 Unit Path Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z VSS: Addressing nodes Data type int16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z is an Attribute.\nThe vehicle signal Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentLocation.GNSSReceiver.MountingPosition.Z is a4d04e86518e5c5ab60e5e4face35756\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/currentlocation/gnssreceiver/mountingposition/z/","tags":"","title":"Z"},{"body":" Full qualified VSS Path: Vehicle.Acceleration Description: Spatial acceleration. Axis definitions according to ISO 8855. Navigation flowchart LR Vehicle--\u003eAcceleration Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Acceleration Signal Information The vehicle signal Vehicle.Acceleration is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Acceleration is 6c490e6a798c5abc8f0178ed6deae0a8\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.Acceleration.Lateral (Vehicle acceleration in Y (lateral acceleration).) Vehicle.Acceleration.Longitudinal (Vehicle acceleration in X (longitudinal acceleration).) Vehicle.Acceleration.Vertical (Vehicle acceleration in Z (vertical acceleration).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Acceleration Description: Spatial …","ref":"/leda/docs/vss/vehicle/acceleration/","tags":"","title":"Acceleration"},{"body":" Full qualified VSS Path: Vehicle.AngularVelocity Description: Spatial rotation. Axis definitions according to ISO 8855. Navigation flowchart LR Vehicle--\u003eAngularVelocity Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.AngularVelocity Signal Information The vehicle signal Vehicle.AngularVelocity is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.AngularVelocity is 1eef530a43de56aab665d2766483cde2\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.AngularVelocity.Pitch (Vehicle rotation rate along Y (lateral).) Vehicle.AngularVelocity.Roll (Vehicle rotation rate along X (longitudinal).) Vehicle.AngularVelocity.Yaw (Vehicle rotation rate along Z (vertical).) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.AngularVelocity Description: Spatial …","ref":"/leda/docs/vss/vehicle/angularvelocity/","tags":"","title":"AngularVelocity"},{"body":" Full qualified VSS Path: Vehicle.AverageSpeed Description: Average speed for the current trip. Comment: A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The signal may however keep the value of the last trip until a new trip is started. Calculation of average speed may exclude periods when the vehicle for example is not moving or transmission is in neutral. Navigation flowchart LR Vehicle--\u003eAverageSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.AverageSpeed [get] OK Vehicle.AverageSpeed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.AverageSpeed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.AverageSpeed Data Type \u0026 Unit Path Vehicle.AverageSpeed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.AverageSpeed is a Sensor.\nThe vehicle signal Vehicle.AverageSpeed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.AverageSpeed is 43a489636a665c3abb99b63174eb552b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.AverageSpeed Description: Average …","ref":"/leda/docs/vss/vehicle/averagespeed/","tags":"","title":"AverageSpeed"},{"body":" Full qualified VSS Path: Vehicle.CargoVolume Description: The available volume for cargo or luggage. For automobiles, this is usually the trunk volume. Navigation flowchart LR Vehicle--\u003eCargoVolume Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CargoVolume [get] OK Vehicle.CargoVolume: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CargoVolume 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CargoVolume Data Type \u0026 Unit Path Vehicle.CargoVolume VSS: Addressing nodes Data type float VSS: Datatypes Unit l VSS: Units Label liter Description Volume measured in liters VSS: Sensors \u0026 Actuators Domain volume Minimum value 0 VSS: Sensors \u0026 Actuators Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.CargoVolume is an Attribute.\nThe vehicle signal Vehicle.CargoVolume is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CargoVolume is 789feabca2e8560ea3c1852371b4096e\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CargoVolume Description: The …","ref":"/leda/docs/vss/vehicle/cargovolume/","tags":"","title":"CargoVolume"},{"body":" Full qualified VSS Path: Vehicle.CurbWeight Description: Vehicle curb weight, including all liquids and full tank of fuel, but no cargo or passengers. Navigation flowchart LR Vehicle--\u003eCurbWeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurbWeight [get] OK Vehicle.CurbWeight: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurbWeight 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurbWeight Data Type \u0026 Unit Path Vehicle.CurbWeight VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kg VSS: Units Label kilogram Description Mass measured in kilograms VSS: Sensors \u0026 Actuators Domain mass Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.CurbWeight is an Attribute.\nThe vehicle signal Vehicle.CurbWeight is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurbWeight is 69ac6ca079de59d19737f75e4c5c4342\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurbWeight Description: Vehicle curb …","ref":"/leda/docs/vss/vehicle/curbweight/","tags":"","title":"CurbWeight"},{"body":" Full qualified VSS Path: Vehicle.LowVoltageBattery.CurrentCurrent Description: Current current flowing in/out of the low voltage battery. Positive = Current flowing in to battery, e.g. during charging or driving. Negative = Current flowing out of battery, e.g. when using the battery to start a combustion engine. Navigation flowchart LR Vehicle--\u003eLowVoltageBattery LowVoltageBattery--\u003eCurrentCurrent Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.LowVoltageBattery.CurrentCurrent [get] OK Vehicle.LowVoltageBattery.CurrentCurrent: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.LowVoltageBattery.CurrentCurrent 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.LowVoltageBattery.CurrentCurrent Data Type \u0026 Unit Path Vehicle.LowVoltageBattery.CurrentCurrent VSS: Addressing nodes Data type float VSS: Datatypes Unit A VSS: Units Label ampere Description Electric current measured in amperes VSS: Sensors \u0026 Actuators Domain electric current Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.LowVoltageBattery.CurrentCurrent is a Sensor.\nThe vehicle signal Vehicle.LowVoltageBattery.CurrentCurrent is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.LowVoltageBattery.CurrentCurrent is e1d76e489d505b03ace30771ba4291b1\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.LowVoltageBattery.CurrentCurrent …","ref":"/leda/docs/vss/vehicle/lowvoltagebattery/currentcurrent/","tags":"","title":"CurrentCurrent"},{"body":" Full qualified VSS Path: Vehicle.CurrentOverallWeight Description: Current overall Vehicle weight. Including passengers, cargo and other load inside the car. Navigation flowchart LR Vehicle--\u003eCurrentOverallWeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.CurrentOverallWeight [get] OK Vehicle.CurrentOverallWeight: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.CurrentOverallWeight 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.CurrentOverallWeight Data Type \u0026 Unit Path Vehicle.CurrentOverallWeight VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kg VSS: Units Label kilogram Description Mass measured in kilograms VSS: Sensors \u0026 Actuators Domain mass Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.CurrentOverallWeight is a Sensor.\nThe vehicle signal Vehicle.CurrentOverallWeight is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.CurrentOverallWeight is 75599d7628bb5f35839055269d3ad205\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.CurrentOverallWeight Description: …","ref":"/leda/docs/vss/vehicle/currentoverallweight/","tags":"","title":"CurrentOverallWeight"},{"body":" Full qualified VSS Path: Vehicle.LowVoltageBattery.CurrentVoltage Description: Current Voltage of the low voltage battery. Navigation flowchart LR Vehicle--\u003eLowVoltageBattery LowVoltageBattery--\u003eCurrentVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.LowVoltageBattery.CurrentVoltage [get] OK Vehicle.LowVoltageBattery.CurrentVoltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.LowVoltageBattery.CurrentVoltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.LowVoltageBattery.CurrentVoltage Data Type \u0026 Unit Path Vehicle.LowVoltageBattery.CurrentVoltage VSS: Addressing nodes Data type float VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.LowVoltageBattery.CurrentVoltage is a Sensor.\nThe vehicle signal Vehicle.LowVoltageBattery.CurrentVoltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.LowVoltageBattery.CurrentVoltage is 1394234e8b975a279959ae82e03df786\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.LowVoltageBattery.CurrentVoltage …","ref":"/leda/docs/vss/vehicle/lowvoltagebattery/currentvoltage/","tags":"","title":"CurrentVoltage"},{"body":" Full qualified VSS Path: Vehicle.EmissionsCO2 Description: The CO2 emissions. Navigation flowchart LR Vehicle--\u003eEmissionsCO2 Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.EmissionsCO2 [get] OK Vehicle.EmissionsCO2: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.EmissionsCO2 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.EmissionsCO2 Data Type \u0026 Unit Path Vehicle.EmissionsCO2 VSS: Addressing nodes Data type int16 VSS: Datatypes Unit g/km VSS: Units Label grams per kilometer Description Mass per distance measured in grams per kilometers VSS: Sensors \u0026 Actuators Domain mass per distance Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.EmissionsCO2 is an Attribute.\nThe vehicle signal Vehicle.EmissionsCO2 is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.EmissionsCO2 is b73e8f1ed17d584fad3f088c666dc2a5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.EmissionsCO2 Description: The CO2 …","ref":"/leda/docs/vss/vehicle/emissionsco2/","tags":"","title":"EmissionsCO2"},{"body":" Full qualified VSS Path: Vehicle.GrossWeight Description: Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers. Navigation flowchart LR Vehicle--\u003eGrossWeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.GrossWeight [get] OK Vehicle.GrossWeight: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.GrossWeight 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.GrossWeight Data Type \u0026 Unit Path Vehicle.GrossWeight VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kg VSS: Units Label kilogram Description Mass measured in kilograms VSS: Sensors \u0026 Actuators Domain mass Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.GrossWeight is an Attribute.\nThe vehicle signal Vehicle.GrossWeight is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.GrossWeight is 9671cb551dd8570fbe5d7cd797265e6a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.GrossWeight Description: Curb weight …","ref":"/leda/docs/vss/vehicle/grossweight/","tags":"","title":"GrossWeight"},{"body":" Full qualified VSS Path: Vehicle.Height Description: Overall vehicle height. Navigation flowchart LR Vehicle--\u003eHeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Height [get] OK Vehicle.Height: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Height 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Height Data Type \u0026 Unit Path Vehicle.Height VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Height is an Attribute.\nThe vehicle signal Vehicle.Height is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Height is 9784d39f68b8541f90c355178ded7d7c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Height Description: Overall vehicle …","ref":"/leda/docs/vss/vehicle/height/","tags":"","title":"Height"},{"body":" Full qualified VSS Path: Vehicle.IsBrokenDown Description: Vehicle breakdown or any similar event causing vehicle to stop on the road, that might pose a risk to other road users. True = Vehicle broken down on the road, due to e.g. engine problems, flat tire, out of gas, brake problems. False = Vehicle not broken down. Comment: Actual criteria and method used to decide if a vehicle is broken down is implementation specific. Navigation flowchart LR Vehicle--\u003eIsBrokenDown Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.IsBrokenDown [get] OK Vehicle.IsBrokenDown: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.IsBrokenDown false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.IsBrokenDown Data Type \u0026 Unit Path Vehicle.IsBrokenDown VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.IsBrokenDown is a Sensor.\nThe vehicle signal Vehicle.IsBrokenDown is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.IsBrokenDown is 469ebd2a76b45e5b97b799262a085330\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.IsBrokenDown Description: Vehicle …","ref":"/leda/docs/vss/vehicle/isbrokendown/","tags":"","title":"IsBrokenDown"},{"body":" Full qualified VSS Path: Vehicle.IsMoving Description: Indicates whether the vehicle is stationary or moving. Navigation flowchart LR Vehicle--\u003eIsMoving Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.IsMoving [get] OK Vehicle.IsMoving: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.IsMoving false [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.IsMoving Data Type \u0026 Unit Path Vehicle.IsMoving VSS: Addressing nodes Data type boolean VSS: Datatypes Note: The boolean datatype is a boolean value which technically allows values of either 0 and false; or 1 and true.\nSignal Information The vehicle signal Vehicle.IsMoving is a Sensor.\nThe vehicle signal Vehicle.IsMoving is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.IsMoving is db69549cc7375e919c2a2883b41cd19c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.IsMoving Description: Indicates …","ref":"/leda/docs/vss/vehicle/ismoving/","tags":"","title":"IsMoving"},{"body":" Full qualified VSS Path: Vehicle.Acceleration.Lateral Description: Vehicle acceleration in Y (lateral acceleration). Navigation flowchart LR Vehicle--\u003eAcceleration Acceleration--\u003eLateral Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Acceleration.Lateral [get] OK Vehicle.Acceleration.Lateral: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Acceleration.Lateral 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Acceleration.Lateral Data Type \u0026 Unit Path Vehicle.Acceleration.Lateral VSS: Addressing nodes Data type float VSS: Datatypes Unit m/s^2 VSS: Units Label meters per second squared Description Acceleration measured in meters per second squared VSS: Sensors \u0026 Actuators Domain acceleration Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Acceleration.Lateral is a Sensor.\nThe vehicle signal Vehicle.Acceleration.Lateral is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Acceleration.Lateral is 7522c5d6b7665b16a099643b2700e93c\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Acceleration.Lateral Description: …","ref":"/leda/docs/vss/vehicle/acceleration/lateral/","tags":"","title":"Lateral"},{"body":" Full qualified VSS Path: Vehicle.Length Description: Overall vehicle length. Navigation flowchart LR Vehicle--\u003eLength Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Length [get] OK Vehicle.Length: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Length 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Length Data Type \u0026 Unit Path Vehicle.Length VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit mm VSS: Units Label millimeter Description Distance measured in millimeters VSS: Sensors \u0026 Actuators Domain distance Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.Length is an Attribute.\nThe vehicle signal Vehicle.Length is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Length is 885f1be6842a513582e52a42edb3176f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Length Description: Overall vehicle …","ref":"/leda/docs/vss/vehicle/length/","tags":"","title":"Length"},{"body":" Full qualified VSS Path: Vehicle.Acceleration.Longitudinal Description: Vehicle acceleration in X (longitudinal acceleration). Navigation flowchart LR Vehicle--\u003eAcceleration Acceleration--\u003eLongitudinal Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Acceleration.Longitudinal [get] OK Vehicle.Acceleration.Longitudinal: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Acceleration.Longitudinal 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Acceleration.Longitudinal Data Type \u0026 Unit Path Vehicle.Acceleration.Longitudinal VSS: Addressing nodes Data type float VSS: Datatypes Unit m/s^2 VSS: Units Label meters per second squared Description Acceleration measured in meters per second squared VSS: Sensors \u0026 Actuators Domain acceleration Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Acceleration.Longitudinal is a Sensor.\nThe vehicle signal Vehicle.Acceleration.Longitudinal is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Acceleration.Longitudinal is 3d511fe7232b5841be311b37f322de5a\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Acceleration.Longitudinal …","ref":"/leda/docs/vss/vehicle/acceleration/longitudinal/","tags":"","title":"Longitudinal"},{"body":" Full qualified VSS Path: Vehicle.LowVoltageBattery Description: Signals related to low voltage battery. Navigation flowchart LR Vehicle--\u003eLowVoltageBattery Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.LowVoltageBattery Signal Information The vehicle signal Vehicle.LowVoltageBattery is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.LowVoltageBattery is ab8c5816d44f55b68f6e1d6d9e5acb0b\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.LowVoltageBattery.CurrentCurrent (Current current flowing in/out of the low voltage battery. Positive = Current flowing in to battery, e.g. during charging or driving. Negative = Current flowing out of battery, e.g. when using the battery to start a combustion engine.) Vehicle.LowVoltageBattery.CurrentVoltage (Current Voltage of the low voltage battery.) Vehicle.LowVoltageBattery.NominalCapacity (Nominal capacity of the low voltage battery.) Vehicle.LowVoltageBattery.NominalVoltage (Nominal Voltage of the battery.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.LowVoltageBattery Description: …","ref":"/leda/docs/vss/vehicle/lowvoltagebattery/","tags":"","title":"LowVoltageBattery"},{"body":" Full qualified VSS Path: Vehicle.MaxTowBallWeight Description: Maximum vertical weight on the tow ball of a trailer. Navigation flowchart LR Vehicle--\u003eMaxTowBallWeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.MaxTowBallWeight [get] OK Vehicle.MaxTowBallWeight: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.MaxTowBallWeight 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.MaxTowBallWeight Data Type \u0026 Unit Path Vehicle.MaxTowBallWeight VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kg VSS: Units Label kilogram Description Mass measured in kilograms VSS: Sensors \u0026 Actuators Domain mass Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.MaxTowBallWeight is an Attribute.\nThe vehicle signal Vehicle.MaxTowBallWeight is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.MaxTowBallWeight is fec550f2064750e8b65b54fbf1368d68\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.MaxTowBallWeight Description: …","ref":"/leda/docs/vss/vehicle/maxtowballweight/","tags":"","title":"MaxTowBallWeight"},{"body":" Full qualified VSS Path: Vehicle.MaxTowWeight Description: Maximum weight of trailer. Navigation flowchart LR Vehicle--\u003eMaxTowWeight Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.MaxTowWeight [get] OK Vehicle.MaxTowWeight: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.MaxTowWeight 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.MaxTowWeight Data Type \u0026 Unit Path Vehicle.MaxTowWeight VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit kg VSS: Units Label kilogram Description Mass measured in kilograms VSS: Sensors \u0026 Actuators Domain mass Default value 0 VSS: Sensors \u0026 Actuators Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.MaxTowWeight is an Attribute.\nThe vehicle signal Vehicle.MaxTowWeight is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.MaxTowWeight is a1b8fd65897654aa8a418bccf443f1f3\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.MaxTowWeight Description: Maximum …","ref":"/leda/docs/vss/vehicle/maxtowweight/","tags":"","title":"MaxTowWeight"},{"body":" Full qualified VSS Path: Vehicle.LowVoltageBattery.NominalCapacity Description: Nominal capacity of the low voltage battery. Navigation flowchart LR Vehicle--\u003eLowVoltageBattery LowVoltageBattery--\u003eNominalCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.LowVoltageBattery.NominalCapacity [get] OK Vehicle.LowVoltageBattery.NominalCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.LowVoltageBattery.NominalCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.LowVoltageBattery.NominalCapacity Data Type \u0026 Unit Path Vehicle.LowVoltageBattery.NominalCapacity VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit Ah VSS: Units Label ampere hours Description Electric charge measured in ampere hours VSS: Sensors \u0026 Actuators Domain electric charge Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.LowVoltageBattery.NominalCapacity is an Attribute.\nThe vehicle signal Vehicle.LowVoltageBattery.NominalCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.LowVoltageBattery.NominalCapacity is d9f32612cb2f58d3b863a0dae21ff7af\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.LowVoltageBattery.NominalCapacity …","ref":"/leda/docs/vss/vehicle/lowvoltagebattery/nominalcapacity/","tags":"","title":"NominalCapacity"},{"body":" Full qualified VSS Path: Vehicle.LowVoltageBattery.NominalVoltage Description: Nominal Voltage of the battery. Comment: Nominal voltage typically refers to voltage of fully charged battery when delivering rated capacity. Navigation flowchart LR Vehicle--\u003eLowVoltageBattery LowVoltageBattery--\u003eNominalVoltage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.LowVoltageBattery.NominalVoltage [get] OK Vehicle.LowVoltageBattery.NominalVoltage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.LowVoltageBattery.NominalVoltage 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.LowVoltageBattery.NominalVoltage Data Type \u0026 Unit Path Vehicle.LowVoltageBattery.NominalVoltage VSS: Addressing nodes Data type uint16 VSS: Datatypes Unit V VSS: Units Label volt Description Electric potential measured in volts VSS: Sensors \u0026 Actuators Domain electric potential Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.LowVoltageBattery.NominalVoltage is an Attribute.\nThe vehicle signal Vehicle.LowVoltageBattery.NominalVoltage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.LowVoltageBattery.NominalVoltage is bd5d4b6ee33f507fb49782505c3040e0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.LowVoltageBattery.NominalVoltage …","ref":"/leda/docs/vss/vehicle/lowvoltagebattery/nominalvoltage/","tags":"","title":"NominalVoltage"},{"body":" Full qualified VSS Path: Vehicle.AngularVelocity.Pitch Description: Vehicle rotation rate along Y (lateral). Navigation flowchart LR Vehicle--\u003eAngularVelocity AngularVelocity--\u003ePitch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.AngularVelocity.Pitch [get] OK Vehicle.AngularVelocity.Pitch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.AngularVelocity.Pitch 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.AngularVelocity.Pitch Data Type \u0026 Unit Path Vehicle.AngularVelocity.Pitch VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees/s VSS: Units Label degree per second Description Angular speed measured in degrees per second VSS: Sensors \u0026 Actuators Domain angular speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.AngularVelocity.Pitch is a Sensor.\nThe vehicle signal Vehicle.AngularVelocity.Pitch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.AngularVelocity.Pitch is 42236f4a01f45313a97fdd9b6848ce4f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.AngularVelocity.Pitch Description: …","ref":"/leda/docs/vss/vehicle/angularvelocity/pitch/","tags":"","title":"Pitch"},{"body":" Full qualified VSS Path: Vehicle.AngularVelocity.Roll Description: Vehicle rotation rate along X (longitudinal). Navigation flowchart LR Vehicle--\u003eAngularVelocity AngularVelocity--\u003eRoll Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.AngularVelocity.Roll [get] OK Vehicle.AngularVelocity.Roll: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.AngularVelocity.Roll 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.AngularVelocity.Roll Data Type \u0026 Unit Path Vehicle.AngularVelocity.Roll VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees/s VSS: Units Label degree per second Description Angular speed measured in degrees per second VSS: Sensors \u0026 Actuators Domain angular speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.AngularVelocity.Roll is a Sensor.\nThe vehicle signal Vehicle.AngularVelocity.Roll is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.AngularVelocity.Roll is 221e6b93881e5771bcbd03e0849e0075\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.AngularVelocity.Roll Description: …","ref":"/leda/docs/vss/vehicle/angularvelocity/roll/","tags":"","title":"Roll"},{"body":" Full qualified VSS Path: Vehicle.RoofLoad Description: The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle. Navigation flowchart LR Vehicle--\u003eRoofLoad Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.RoofLoad [get] OK Vehicle.RoofLoad: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.RoofLoad 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.RoofLoad Data Type \u0026 Unit Path Vehicle.RoofLoad VSS: Addressing nodes Data type int16 VSS: Datatypes Unit kg VSS: Units Label kilogram Description Mass measured in kilograms VSS: Sensors \u0026 Actuators Domain mass Note: The int16 datatype is a signed 16-bit integer which technically allows values between -32768 and 32767 (inclusive).\nSignal Information The vehicle signal Vehicle.RoofLoad is an Attribute.\nThe vehicle signal Vehicle.RoofLoad is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.RoofLoad is 97dc98269a19591d9efa455a8d943c16\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.RoofLoad Description: The permitted …","ref":"/leda/docs/vss/vehicle/roofload/","tags":"","title":"RoofLoad"},{"body":" Full qualified VSS Path: Vehicle.Speed Description: Vehicle speed. Navigation flowchart LR Vehicle--\u003eSpeed Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Speed [get] OK Vehicle.Speed: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Speed 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Speed Data Type \u0026 Unit Path Vehicle.Speed VSS: Addressing nodes Data type float VSS: Datatypes Unit km/h VSS: Units Label kilometer per hour Description Speed measured in kilometers per hours VSS: Sensors \u0026 Actuators Domain speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Speed is a Sensor.\nThe vehicle signal Vehicle.Speed is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Speed is efe50798638d55fab18ab7d43cc490e9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Speed Description: Vehicle speed. …","ref":"/leda/docs/vss/vehicle/speed/","tags":"","title":"Speed"},{"body":" Full qualified VSS Path: Vehicle.StartTime Description: Start time of current or latest trip, formatted according to ISO 8601 with UTC time zone. Comment: This signal is supposed to be set whenever a new trip starts. A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The default value indicates that the vehicle never has been started, or that latest start time is unknown. Navigation flowchart LR Vehicle--\u003eStartTime Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.StartTime [get] OK Vehicle.StartTime: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.StartTime 0000-01-01T00:00Z [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.StartTime Data Type \u0026 Unit Path Vehicle.StartTime VSS: Addressing nodes Data type string VSS: Datatypes Default value 0000-01-01T00:00Z VSS: Sensors \u0026 Actuators Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.StartTime is an Attribute.\nThe vehicle signal Vehicle.StartTime is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.StartTime is 3790b5f4513c5a3d90a0503a965bbbe0\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.StartTime Description: Start time of …","ref":"/leda/docs/vss/vehicle/starttime/","tags":"","title":"StartTime"},{"body":" Full qualified VSS Path: Vehicle.TraveledDistance Description: Odometer reading, total distance traveled during the lifetime of the vehicle. Navigation flowchart LR Vehicle--\u003eTraveledDistance Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.TraveledDistance [get] OK Vehicle.TraveledDistance: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.TraveledDistance 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.TraveledDistance Data Type \u0026 Unit Path Vehicle.TraveledDistance VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.TraveledDistance is a Sensor.\nThe vehicle signal Vehicle.TraveledDistance is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.TraveledDistance is 32c3c3585f105d8aa5566ef5a038a741\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.TraveledDistance Description: …","ref":"/leda/docs/vss/vehicle/traveleddistance/","tags":"","title":"TraveledDistance"},{"body":" Full qualified VSS Path: Vehicle.TraveledDistanceSinceStart Description: Distance traveled since start of current trip. Comment: A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. The signal may however keep the value of the last trip until a new trip is started. Navigation flowchart LR Vehicle--\u003eTraveledDistanceSinceStart Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.TraveledDistanceSinceStart [get] OK Vehicle.TraveledDistanceSinceStart: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.TraveledDistanceSinceStart 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.TraveledDistanceSinceStart Data Type \u0026 Unit Path Vehicle.TraveledDistanceSinceStart VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.TraveledDistanceSinceStart is a Sensor.\nThe vehicle signal Vehicle.TraveledDistanceSinceStart is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.TraveledDistanceSinceStart is cfc6efd2793152e487f9fe3f4e03fd5d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.TraveledDistanceSinceStart …","ref":"/leda/docs/vss/vehicle/traveleddistancesincestart/","tags":"","title":"TraveledDistanceSinceStart"},{"body":" Full qualified VSS Path: Vehicle.TravelledDistance Description: Odometer reading, total distance traveled during the lifetime of the vehicle. Deprecation V3.1 moved to Vehicle.TraveledDistance Navigation flowchart LR Vehicle--\u003eTravelledDistance Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.TravelledDistance [get] OK Vehicle.TravelledDistance: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.TravelledDistance 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.TravelledDistance Data Type \u0026 Unit Path Vehicle.TravelledDistance VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.TravelledDistance is a Sensor.\nThe vehicle signal Vehicle.TravelledDistance is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.TravelledDistance is 90be9d7b0ac15b75a83027ea3b73b65b\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.TravelledDistance Description: …","ref":"/leda/docs/vss/vehicle/travelleddistance/","tags":"","title":"TravelledDistance"},{"body":" Full qualified VSS Path: Vehicle.TripDuration Description: Duration of latest trip. Comment: This signal is not assumed to be continuously updated, but instead set to 0 when a trip starts and set to the the actual duration of the trip when a trip ends. A new trip is considered to start when engine gets enabled (e.g. LowVoltageSystemState in ON or START mode). A trip is considered to end when engine is no longer enabled. Navigation flowchart LR Vehicle--\u003eTripDuration Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.TripDuration [get] OK Vehicle.TripDuration: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.TripDuration 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.TripDuration Data Type \u0026 Unit Path Vehicle.TripDuration VSS: Addressing nodes Data type float VSS: Datatypes Unit s VSS: Units Label second Description Time measured in seconds VSS: Sensors \u0026 Actuators Domain time Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.TripDuration is a Sensor.\nThe vehicle signal Vehicle.TripDuration is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.TripDuration is 84b9558ad33555389791b57d505f27a8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.TripDuration Description: Duration …","ref":"/leda/docs/vss/vehicle/tripduration/","tags":"","title":"TripDuration"},{"body":" Full qualified VSS Path: Vehicle.TripMeterReading Description: Trip meter reading. Comment: The trip meter is an odometer that can be manually reset by the driver Navigation flowchart LR Vehicle--\u003eTripMeterReading Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.TripMeterReading [get] OK Vehicle.TripMeterReading: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.TripMeterReading 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.TripMeterReading Data Type \u0026 Unit Path Vehicle.TripMeterReading VSS: Addressing nodes Data type float VSS: Datatypes Unit km VSS: Units Label kilometer Description Distance measured in kilometers VSS: Sensors \u0026 Actuators Domain distance Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.TripMeterReading is an Actuator.\nThe vehicle signal Vehicle.TripMeterReading is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.TripMeterReading is 81f51ebfe29c591190171d7b96e1c948\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.TripMeterReading Description: Trip …","ref":"/leda/docs/vss/vehicle/tripmeterreading/","tags":"","title":"TripMeterReading"},{"body":" Full qualified VSS Path: Vehicle.Acceleration.Vertical Description: Vehicle acceleration in Z (vertical acceleration). Navigation flowchart LR Vehicle--\u003eAcceleration Acceleration--\u003eVertical Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.Acceleration.Vertical [get] OK Vehicle.Acceleration.Vertical: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.Acceleration.Vertical 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.Acceleration.Vertical Data Type \u0026 Unit Path Vehicle.Acceleration.Vertical VSS: Addressing nodes Data type float VSS: Datatypes Unit m/s^2 VSS: Units Label meters per second squared Description Acceleration measured in meters per second squared VSS: Sensors \u0026 Actuators Domain acceleration Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.Acceleration.Vertical is a Sensor.\nThe vehicle signal Vehicle.Acceleration.Vertical is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.Acceleration.Vertical is a4a8a7c4ac5b52deb0b3ee4ed8787c59\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.Acceleration.Vertical Description: …","ref":"/leda/docs/vss/vehicle/acceleration/vertical/","tags":"","title":"Vertical"},{"body":" Full qualified VSS Path: Vehicle.AngularVelocity.Yaw Description: Vehicle rotation rate along Z (vertical). Navigation flowchart LR Vehicle--\u003eAngularVelocity AngularVelocity--\u003eYaw Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.AngularVelocity.Yaw [get] OK Vehicle.AngularVelocity.Yaw: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.AngularVelocity.Yaw 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.AngularVelocity.Yaw Data Type \u0026 Unit Path Vehicle.AngularVelocity.Yaw VSS: Addressing nodes Data type float VSS: Datatypes Unit degrees/s VSS: Units Label degree per second Description Angular speed measured in degrees per second VSS: Sensors \u0026 Actuators Domain angular speed Note: The float datatype is a floating point number which technically allows values between -3.4e ^ -38 and 3.4e ^ 38\nSignal Information The vehicle signal Vehicle.AngularVelocity.Yaw is a Sensor.\nThe vehicle signal Vehicle.AngularVelocity.Yaw is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.AngularVelocity.Yaw is 4114c41552565c1f9035670cabe2a611\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.AngularVelocity.Yaw Description: …","ref":"/leda/docs/vss/vehicle/angularvelocity/yaw/","tags":"","title":"Yaw"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.AcrissCode Description: The ACRISS Car Classification Code is a code used by many car rental companies. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eAcrissCode Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.AcrissCode [get] OK Vehicle.VehicleIdentification.AcrissCode: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.AcrissCode Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.AcrissCode Data Type \u0026 Unit Path Vehicle.VehicleIdentification.AcrissCode VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.AcrissCode is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.AcrissCode is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.AcrissCode is 115a821e8e0b57f08e4b9e61e85d7156\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.AcrissCode …","ref":"/leda/docs/vss/vehicle/vehicleidentification/acrisscode/","tags":"","title":"AcrissCode"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.BodyType Description: Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.). Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eBodyType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.BodyType [get] OK Vehicle.VehicleIdentification.BodyType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.BodyType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.BodyType Data Type \u0026 Unit Path Vehicle.VehicleIdentification.BodyType VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.BodyType is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.BodyType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.BodyType is e6d5c71ecec95d68b0b59bb7e93af759\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.BodyType …","ref":"/leda/docs/vss/vehicle/vehicleidentification/bodytype/","tags":"","title":"BodyType"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.Brand Description: Vehicle brand or manufacturer. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eBrand Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.Brand [get] OK Vehicle.VehicleIdentification.Brand: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.Brand Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.Brand Data Type \u0026 Unit Path Vehicle.VehicleIdentification.Brand VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.Brand is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.Brand is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.Brand is 19fd645ff5385767bcdbf5dd4313483f\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.Brand …","ref":"/leda/docs/vss/vehicle/vehicleidentification/brand/","tags":"","title":"Brand"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.DateVehicleFirstRegistered Description: The date in ISO 8601 format of the first registration of the vehicle with the respective public authorities. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eDateVehicleFirstRegistered Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.DateVehicleFirstRegistered [get] OK Vehicle.VehicleIdentification.DateVehicleFirstRegistered: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.DateVehicleFirstRegistered Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.DateVehicleFirstRegistered Data Type \u0026 Unit Path Vehicle.VehicleIdentification.DateVehicleFirstRegistered VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.DateVehicleFirstRegistered is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.DateVehicleFirstRegistered is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.DateVehicleFirstRegistered is 046f47acf62e50bd863d6568d73743d7\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/datevehiclefirstregistered/","tags":"","title":"DateVehicleFirstRegistered"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.KnownVehicleDamages Description: A textual description of known damages, both repaired and unrepaired. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eKnownVehicleDamages Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.KnownVehicleDamages [get] OK Vehicle.VehicleIdentification.KnownVehicleDamages: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.KnownVehicleDamages Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.KnownVehicleDamages Data Type \u0026 Unit Path Vehicle.VehicleIdentification.KnownVehicleDamages VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.KnownVehicleDamages is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.KnownVehicleDamages is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.KnownVehicleDamages is e87f352cddb15e94b340506b17207586\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/knownvehicledamages/","tags":"","title":"KnownVehicleDamages"},{"body":" Full qualified VSS Path: Vehicle.VersionVSS.Label Description: Label to further describe the version. Navigation flowchart LR Vehicle--\u003eVersionVSS VersionVSS--\u003eLabel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VersionVSS.Label [get] OK Vehicle.VersionVSS.Label: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VersionVSS.Label Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VersionVSS.Label Data Type \u0026 Unit Path Vehicle.VersionVSS.Label VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VersionVSS.Label is an Attribute.\nThe vehicle signal Vehicle.VersionVSS.Label is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VersionVSS.Label is 7c92cd50d24b5662922b27cb9a327e53\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VersionVSS.Label Description: Label …","ref":"/leda/docs/vss/vehicle/versionvss/label/","tags":"","title":"Label"},{"body":" Full qualified VSS Path: Vehicle.LowVoltageSystemState Description: State of the supply voltage of the control units (usually 12V). Navigation flowchart LR Vehicle--\u003eLowVoltageSystemState Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.LowVoltageSystemState [get] OK Vehicle.LowVoltageSystemState: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.LowVoltageSystemState Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.LowVoltageSystemState Data Type \u0026 Unit Path Vehicle.LowVoltageSystemState VSS: Addressing nodes Data type string VSS: Datatypes Allowed values ['UNDEFINED', 'LOCK', 'OFF', 'ACC', 'ON', 'START'] VSS: Specifying allowed values Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.LowVoltageSystemState is a Sensor.\nThe vehicle signal Vehicle.LowVoltageSystemState is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.LowVoltageSystemState is d7391ceb132e5519b02d4c13d5513d99\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.LowVoltageSystemState Description: …","ref":"/leda/docs/vss/vehicle/lowvoltagesystemstate/","tags":"","title":"LowVoltageSystemState"},{"body":" Full qualified VSS Path: Vehicle.VersionVSS.Major Description: Supported Version of VSS - Major version. Navigation flowchart LR Vehicle--\u003eVersionVSS VersionVSS--\u003eMajor Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VersionVSS.Major [get] OK Vehicle.VersionVSS.Major: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VersionVSS.Major 3 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VersionVSS.Major Data Type \u0026 Unit Path Vehicle.VersionVSS.Major VSS: Addressing nodes Data type uint32 VSS: Datatypes Default value 3 VSS: Sensors \u0026 Actuators Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.VersionVSS.Major is an Attribute.\nThe vehicle signal Vehicle.VersionVSS.Major is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VersionVSS.Major is 5edf1a338c975cbb84d4ce3cfe1aa4b4\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VersionVSS.Major Description: …","ref":"/leda/docs/vss/vehicle/versionvss/major/","tags":"","title":"Major"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.MeetsEmissionStandard Description: Indicates that the vehicle meets the respective emission standard. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eMeetsEmissionStandard Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.MeetsEmissionStandard [get] OK Vehicle.VehicleIdentification.MeetsEmissionStandard: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.MeetsEmissionStandard Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.MeetsEmissionStandard Data Type \u0026 Unit Path Vehicle.VehicleIdentification.MeetsEmissionStandard VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.MeetsEmissionStandard is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.MeetsEmissionStandard is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.MeetsEmissionStandard is d75dedbfadca54d8b6c7261c37ad5d83\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/meetsemissionstandard/","tags":"","title":"MeetsEmissionStandard"},{"body":" Full qualified VSS Path: Vehicle.VersionVSS.Minor Description: Supported Version of VSS - Minor version. Navigation flowchart LR Vehicle--\u003eVersionVSS VersionVSS--\u003eMinor Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VersionVSS.Minor [get] OK Vehicle.VersionVSS.Minor: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VersionVSS.Minor 1 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VersionVSS.Minor Data Type \u0026 Unit Path Vehicle.VersionVSS.Minor VSS: Addressing nodes Data type uint32 VSS: Datatypes Default value 1 VSS: Sensors \u0026 Actuators Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.VersionVSS.Minor is an Attribute.\nThe vehicle signal Vehicle.VersionVSS.Minor is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VersionVSS.Minor is 6e70a598dbc7534c96c58c18e9888cfd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VersionVSS.Minor Description: …","ref":"/leda/docs/vss/vehicle/versionvss/minor/","tags":"","title":"Minor"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.Model Description: Vehicle model. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eModel Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.Model [get] OK Vehicle.VehicleIdentification.Model: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.Model Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.Model Data Type \u0026 Unit Path Vehicle.VehicleIdentification.Model VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.Model is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.Model is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.Model is dd3d3b72e6a85b3695ba25f829255403\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.Model …","ref":"/leda/docs/vss/vehicle/vehicleidentification/model/","tags":"","title":"Model"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.OptionalExtras Description: Optional extras refers to all car equipment options that are not installed as standard by the manufacturer. Comment: Allowed values are not standardized, each OEM can specify detail descriptions of array elements. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eOptionalExtras Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.OptionalExtras [get] OK Vehicle.VehicleIdentification.OptionalExtras: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.OptionalExtras 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.OptionalExtras Data Type \u0026 Unit Path Vehicle.VehicleIdentification.OptionalExtras VSS: Addressing nodes Data type string[] VSS: Datatypes Signal Information The vehicle signal Vehicle.VehicleIdentification.OptionalExtras is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.OptionalExtras is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.OptionalExtras is d9ecc64b0c995595967e05009d6fc1b9\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.OptionalExtras …","ref":"/leda/docs/vss/vehicle/vehicleidentification/optionalextras/","tags":"","title":"OptionalExtras"},{"body":" Full qualified VSS Path: Vehicle.VersionVSS.Patch Description: Supported Version of VSS - Patch version. Navigation flowchart LR Vehicle--\u003eVersionVSS VersionVSS--\u003ePatch Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VersionVSS.Patch [get] OK Vehicle.VersionVSS.Patch: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VersionVSS.Patch 1 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VersionVSS.Patch Data Type \u0026 Unit Path Vehicle.VersionVSS.Patch VSS: Addressing nodes Data type uint32 VSS: Datatypes Default value 1 VSS: Sensors \u0026 Actuators Note: The uint32 datatype is an unsigned 32-bit integer which technically allows values between 0 and 4294967295 (inclusive).\nSignal Information The vehicle signal Vehicle.VersionVSS.Patch is an Attribute.\nThe vehicle signal Vehicle.VersionVSS.Patch is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VersionVSS.Patch is 69858f224af459338b9bfbff436dda45\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VersionVSS.Patch Description: …","ref":"/leda/docs/vss/vehicle/versionvss/patch/","tags":"","title":"Patch"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.ProductionDate Description: The date in ISO 8601 format of production of the item, e.g. vehicle. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eProductionDate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.ProductionDate [get] OK Vehicle.VehicleIdentification.ProductionDate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.ProductionDate Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.ProductionDate Data Type \u0026 Unit Path Vehicle.VehicleIdentification.ProductionDate VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.ProductionDate is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.ProductionDate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.ProductionDate is 5683877c4bac504d915b268c9476c190\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.ProductionDate …","ref":"/leda/docs/vss/vehicle/vehicleidentification/productiondate/","tags":"","title":"ProductionDate"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.PurchaseDate Description: The date in ISO 8601 format of the item e.g. vehicle was purchased by the current owner. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003ePurchaseDate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.PurchaseDate [get] OK Vehicle.VehicleIdentification.PurchaseDate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.PurchaseDate Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.PurchaseDate Data Type \u0026 Unit Path Vehicle.VehicleIdentification.PurchaseDate VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.PurchaseDate is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.PurchaseDate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.PurchaseDate is 31302f8b57e85c4197afda3e3201fce8\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.PurchaseDate …","ref":"/leda/docs/vss/vehicle/vehicleidentification/purchasedate/","tags":"","title":"PurchaseDate"},{"body":" Full qualified VSS Path: Vehicle Description: High-level vehicle data. Navigation flowchart LR Vehicle Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle Signal Information The vehicle signal Vehicle is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle is ccc825f94139544dbb5f4bfd033bece6\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.ADAS (All Advanced Driver Assist Systems data.) Vehicle.Acceleration (Spatial acceleration. Axis definitions according to ISO 8855.) Vehicle.AngularVelocity (Spatial rotation. Axis definitions according to ISO 8855.) Vehicle.AverageSpeed (Average speed for the current trip.) Vehicle.Body (All body components.) Vehicle.Cabin (All in-cabin components, including doors.) Vehicle.CargoVolume (The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.) Vehicle.Chassis (All data concerning steering, suspension, wheels, and brakes.) Vehicle.Connectivity (Connectivity data.) Vehicle.CurbWeight (Vehicle curb weight, including all liquids and full tank of fuel, but no cargo or passengers.) Vehicle.CurrentLocation (The current latitude and longitude of the vehicle.) Vehicle.CurrentOverallWeight (Current overall Vehicle weight. Including passengers, cargo and other load inside the car.) Vehicle.Driver (Driver data.) Vehicle.EmissionsCO2 (The CO2 emissions.) Vehicle.Exterior (Information about exterior measured by vehicle.) Vehicle.GrossWeight (Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.) Vehicle.Height (Overall vehicle height.) Vehicle.IsBrokenDown (Vehicle breakdown or any similar event causing vehicle to stop on the road, that might pose a risk to other road users. True = Vehicle broken down on the road, due to e.g. engine problems, flat tire, out of gas, brake problems. False = Vehicle not broken down.) Vehicle.IsMoving (Indicates whether the vehicle is stationary or moving.) Vehicle.Length (Overall vehicle length.) Vehicle.LowVoltageBattery (Signals related to low voltage battery.) Vehicle.LowVoltageSystemState (State of the supply voltage of the control units (usually 12V).) Vehicle.MaxTowBallWeight (Maximum vertical weight on the tow ball of a trailer.) Vehicle.MaxTowWeight (Maximum weight of trailer.) Vehicle.OBD (OBD data.) Vehicle.PowerOptimizeLevel (Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.) Vehicle.Powertrain (Powertrain data for battery management, etc.) Vehicle.RoofLoad (The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.) Vehicle.Service (Service data.) Vehicle.Speed (Vehicle speed.) Vehicle.StartTime (Start time of current or latest trip, formatted according to ISO 8601 with UTC time zone.) Vehicle.Trailer (Trailer signals.) Vehicle.TraveledDistance (Odometer reading, total distance traveled during the lifetime of the vehicle.) Vehicle.TraveledDistanceSinceStart (Distance traveled since start of current trip.) Vehicle.TravelledDistance (Odometer reading, total distance traveled during the lifetime of the vehicle.) Vehicle.TripDuration (Duration of latest trip.) Vehicle.TripMeterReading (Trip meter reading.) Vehicle.VehicleIdentification (Attributes that identify a vehicle.) Vehicle.VersionVSS (Supported Version of VSS.) Vehicle.Width (Overall vehicle width.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle Description: High-level vehicle …","ref":"/leda/docs/vss/vehicle/","tags":"","title":"Vehicle"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VehicleConfiguration Description: A short text indicating the configuration of the vehicle, e.g. ‘5dr hatchback ST 2.5 MT 225 hp’ or ’limited edition’. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVehicleConfiguration Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VehicleConfiguration [get] OK Vehicle.VehicleIdentification.VehicleConfiguration: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VehicleConfiguration Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VehicleConfiguration Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VehicleConfiguration VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VehicleConfiguration is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VehicleConfiguration is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VehicleConfiguration is 2526c7ba4c8458c78000a9e5f2fe89d5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vehicleconfiguration/","tags":"","title":"VehicleConfiguration"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification Description: Attributes that identify a vehicle. Navigation flowchart LR Vehicle--\u003eVehicleIdentification Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification Signal Information The vehicle signal Vehicle.VehicleIdentification is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification is c33861c3e9125208b05f23fe922bf08e\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.VehicleIdentification.AcrissCode (The ACRISS Car Classification Code is a code used by many car rental companies.) Vehicle.VehicleIdentification.BodyType (Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).) Vehicle.VehicleIdentification.Brand (Vehicle brand or manufacturer.) Vehicle.VehicleIdentification.DateVehicleFirstRegistered (The date in ISO 8601 format of the first registration of the vehicle with the respective public authorities.) Vehicle.VehicleIdentification.KnownVehicleDamages (A textual description of known damages, both repaired and unrepaired.) Vehicle.VehicleIdentification.MeetsEmissionStandard (Indicates that the vehicle meets the respective emission standard.) Vehicle.VehicleIdentification.Model (Vehicle model.) Vehicle.VehicleIdentification.OptionalExtras (Optional extras refers to all car equipment options that are not installed as standard by the manufacturer.) Vehicle.VehicleIdentification.ProductionDate (The date in ISO 8601 format of production of the item, e.g. vehicle.) Vehicle.VehicleIdentification.PurchaseDate (The date in ISO 8601 format of the item e.g. vehicle was purchased by the current owner.) Vehicle.VehicleIdentification.VIN (17-character Vehicle Identification Number (VIN) as defined by ISO 3779.) Vehicle.VehicleIdentification.VehicleConfiguration (A short text indicating the configuration of the vehicle, e.g. ‘5dr hatchback ST 2.5 MT 225 hp’ or ’limited edition’.) Vehicle.VehicleIdentification.VehicleInteriorColor (The color or color combination of the interior of the vehicle.) Vehicle.VehicleIdentification.VehicleInteriorType (The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.).) Vehicle.VehicleIdentification.VehicleModelDate (The release date in ISO 8601 format of a vehicle model (often used to differentiate versions of the same make and model).) Vehicle.VehicleIdentification.VehicleSeatingCapacity (The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.) Vehicle.VehicleIdentification.VehicleSpecialUsage (Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school.) Vehicle.VehicleIdentification.WMI (3-character World Manufacturer Identification (WMI) as defined by ISO 3780.) Vehicle.VehicleIdentification.Year (Model year of the vehicle.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification Description: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/","tags":"","title":"VehicleIdentification"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VehicleInteriorColor Description: The color or color combination of the interior of the vehicle. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVehicleInteriorColor Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VehicleInteriorColor [get] OK Vehicle.VehicleIdentification.VehicleInteriorColor: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VehicleInteriorColor Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VehicleInteriorColor Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VehicleInteriorColor VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VehicleInteriorColor is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VehicleInteriorColor is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VehicleInteriorColor is 67a8b069b8bf573993d51959c24f04e2\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vehicleinteriorcolor/","tags":"","title":"VehicleInteriorColor"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VehicleInteriorType Description: The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVehicleInteriorType Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VehicleInteriorType [get] OK Vehicle.VehicleIdentification.VehicleInteriorType: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VehicleInteriorType Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VehicleInteriorType Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VehicleInteriorType VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VehicleInteriorType is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VehicleInteriorType is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VehicleInteriorType is 4c4eed302b2e51daa9b6f5f398987a77\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vehicleinteriortype/","tags":"","title":"VehicleInteriorType"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VehicleModelDate Description: The release date in ISO 8601 format of a vehicle model (often used to differentiate versions of the same make and model). Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVehicleModelDate Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VehicleModelDate [get] OK Vehicle.VehicleIdentification.VehicleModelDate: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VehicleModelDate Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VehicleModelDate Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VehicleModelDate VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VehicleModelDate is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VehicleModelDate is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VehicleModelDate is c71b63f83dea536bac58e62bbe537f11\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vehiclemodeldate/","tags":"","title":"VehicleModelDate"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VehicleSeatingCapacity Description: The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVehicleSeatingCapacity Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VehicleSeatingCapacity [get] OK Vehicle.VehicleIdentification.VehicleSeatingCapacity: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VehicleSeatingCapacity 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VehicleSeatingCapacity Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VehicleSeatingCapacity VSS: Addressing nodes Data type uint16 VSS: Datatypes Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VehicleSeatingCapacity is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VehicleSeatingCapacity is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VehicleSeatingCapacity is 7ae5db0e0482555686b9be71dd8a0c38\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vehicleseatingcapacity/","tags":"","title":"VehicleSeatingCapacity"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VehicleSpecialUsage Description: Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVehicleSpecialUsage Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VehicleSpecialUsage [get] OK Vehicle.VehicleIdentification.VehicleSpecialUsage: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VehicleSpecialUsage Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VehicleSpecialUsage Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VehicleSpecialUsage VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VehicleSpecialUsage is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VehicleSpecialUsage is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VehicleSpecialUsage is 7e6e8a48f54a5549a8f6af8f1dc5eb8d\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vehiclespecialusage/","tags":"","title":"VehicleSpecialUsage"},{"body":" Full qualified VSS Path: Vehicle.VersionVSS Description: Supported Version of VSS. Navigation flowchart LR Vehicle--\u003eVersionVSS Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VersionVSS Signal Information The vehicle signal Vehicle.VersionVSS is a Branch.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VersionVSS is 9a687e56f1305eedb20f6a021ea58f48\nChildren This vehicle signal is a branch or structure and thus has sub-pages:\nVehicle.VersionVSS.Label (Label to further describe the version.) Vehicle.VersionVSS.Major (Supported Version of VSS - Major version.) Vehicle.VersionVSS.Minor (Supported Version of VSS - Minor version.) Vehicle.VersionVSS.Patch (Supported Version of VSS - Patch version.) Feedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VersionVSS Description: Supported …","ref":"/leda/docs/vss/vehicle/versionvss/","tags":"","title":"VersionVSS"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.VIN Description: 17-character Vehicle Identification Number (VIN) as defined by ISO 3779. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eVIN Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.VIN [get] OK Vehicle.VehicleIdentification.VIN: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.VIN Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.VIN Data Type \u0026 Unit Path Vehicle.VehicleIdentification.VIN VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.VIN is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.VIN is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.VIN is 6f0b6fa8c34f589baa92e565bc9df5bd\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.VIN …","ref":"/leda/docs/vss/vehicle/vehicleidentification/vin/","tags":"","title":"VIN"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.WMI Description: 3-character World Manufacturer Identification (WMI) as defined by ISO 3780. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eWMI Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.WMI [get] OK Vehicle.VehicleIdentification.WMI: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.WMI Foo [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.WMI Data Type \u0026 Unit Path Vehicle.VehicleIdentification.WMI VSS: Addressing nodes Data type string VSS: Datatypes Note: The string datatype is a character string.\nSignal Information The vehicle signal Vehicle.VehicleIdentification.WMI is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.WMI is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.WMI is e7c86defbcd554a79f90ba85de58e133\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.WMI …","ref":"/leda/docs/vss/vehicle/vehicleidentification/wmi/","tags":"","title":"WMI"},{"body":" Full qualified VSS Path: Vehicle.VehicleIdentification.Year Description: Model year of the vehicle. Navigation flowchart LR Vehicle--\u003eVehicleIdentification VehicleIdentification--\u003eYear Eclipse Leda: Usage Example In Eclipse Kuksa.VAL Databroker CLI:\n$ databroker-cli sdv.databroker.v1 \u003e connect [connect] OK sdv.databroker.v1 \u003e get Vehicle.VehicleIdentification.Year [get] OK Vehicle.VehicleIdentification.Year: ( NotAvailable ) sdv.databroker.v1 \u003e set Vehicle.VehicleIdentification.Year 0 [set] OK Digital Auto: Playground playground.digital.auto provides an in-browser, rapid prototyping environment utilizing the COVESA APIs for connected vehicles.\nVehicle Model Direct link to Vehicle Signal ACME Car (EV) v0.1 Vehicle.VehicleIdentification.Year Data Type \u0026 Unit Path Vehicle.VehicleIdentification.Year VSS: Addressing nodes Data type uint16 VSS: Datatypes Note: The uint16 datatype is an unsigned 16-bit integer which technically allows values between 0 and 65535 (inclusive).\nSignal Information The vehicle signal Vehicle.VehicleIdentification.Year is an Attribute.\nThe vehicle signal Vehicle.VehicleIdentification.Year is a Signal.\nUUID Each vehicle signal is identified by a Universally Unique Identifier (UUID)\nThe UUID for Vehicle.VehicleIdentification.Year is 9a76b0aca8e45f6fb33dbaf5b976b8b5\nFeedback Do you think this Vehicle Signal specification needs enhancement? Do you want to discuss with experts? Try the following ressources to get in touch with the VSS community:\nEnhancement request Create COVESA GitHub Issue Join COVESA www.covesa.global Discuss VSS on Slack w3cauto.slack.com VSS Data Experts on Google Groups covesa.global data-expert-group About VSS The Vehicle Signal Specification (VSS) is an initiative by COVESA to define a syntax and a catalog for vehicle signals. The source code and releases can be found in the VSS github repository.\nSupported datatypes The following is a list of VSS supported built-in datatypes:\nName Type Min Max uint8 unsigned 8-bit integer 0 255 int8 signed 8-bit integer -128 127 uint16 unsigned 16-bit integer 0 65535 int16 signed 16-bit integer -32768 32767 uint32 unsigned 32-bit integer 0 4294967295 int32 signed 32-bit integer -2147483648 2147483647 uint64 unsigned 64-bit integer 0 2^64 - 1 int64 signed 64-bit integer -2^63 2^63 - 1 boolean boolean value 0/false 1/true float floating point number -3.4e -38 3.4e 38 double double precision floating point number -1.7e -300 1.7e 300 string character string n/a n/a Min, max and default values defined in a Vehicle Signal Specification must be in the supported range of the data type.\n","categories":"","description":"","excerpt":" Full qualified VSS Path: Vehicle.VehicleIdentification.Year …","ref":"/leda/docs/vss/vehicle/vehicleidentification/year/","tags":"","title":"Year"},{"body":"Here we will describe the basic steps on how to identify and connect to a WiFi network in interactive or headless mode.\nInitial steps (identifying wlan interfaces) Start by running:\n$ ip a ... 3: wlan0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc fq_codel state DOWN group default qlen 1000 link/ether \u003cMAC\u003e brd ff:ff:ff:ff:ff:ff ... Note: Usually the name of the interface would be wlan0. It might however follow the newer “predictable interface names” standart. Then the interface name would start with wl* with the remaining characters identifying a physical bus/chip/number/etc corresponding to the interface. For simplicity we will wlan0 in all examples below.\nMost likely your wlan interface would be in the state DOWN. To bring it up:\n$ ip link set wlan0 up Scanning for wireless networks You can scan for wireless networks using either iw or wpa_cli.\n$ iw wlan0 scan Note: The output of this command can be quite verbose. You can grep for SSID to find the SSIDs of the networks around you.\n$ wpa_cli scan \u0026\u0026 wpa_cli scan_results The output of wpa_cli is cleaner and more readable so it is recommended to use that.\nConnecting to a network Once you have identified the SSID of your network you can connect to it by ussing the following commands:\n$ wpa_passphrase \u003cSSID\u003e \u003cPassphrase\u003e \u003e\u003e /etc/wpa_supplicant.conf $ systemctl restart wpa You should now be connected to the wireless network. To confirm that, you can once again use ip a to check that wlan0 has been configured with an IP.\nThis configuration shall be remembered from now on and your interface will try to connect automaticatically to that network whenever it is available.\nHeadless Wi-Fi configuration Similarly to the Raspbian, meta-leda provides a mechanism for headless configuration of Wi-Fi credentials for your device (Headless Raspberry Pi Setup).\nTo use this feature you have to prepapre your wpa_supplicant.conf ahead of time (check the reference above):\nctrl_interface=/var/run/wpa_supplicant ctrl_interface_group=0 update_config=1 network={ key_mgmt=NONE } network={ ssid=\"\u003cYOUR NETWORK NAME\u003e\" psk=\"\u003cYOUR NETWORK PASSWORD\u003e\" key_mgmt=WPA-PSK } IMPORTANT: It is recommended that if you are creating this configuration file on Windows to use an editor such as Notepad++ that can save files using the “Unix Line endings” (DOS vs. Unix Line Endings), or run it through a tool such as dos2unix that can convert between the two file formats. Otherwise wpa_supplicant.conf might not be read properly in the Linux image.\nOnce you have your wpa_supplicant.conf put your SD-card in your Desktop machine and place the configuration file in the root of the BOOT partion.\nWhen you boot your device it should now automatically connect to your Wi-Fi network.\n","categories":"","description":"","excerpt":"Here we will describe the basic steps on how to identify and connect …","ref":"/leda/docs/general-usage/wifi-configuration/connecting-to-wifi/","tags":"","title":"Connecting to Wi-Fi networks"},{"body":"\nThe Eclipse Leda project provides system image “recipes” to deliver a functional and always-available Linux-based image/distribution in the context of SDV (Software Defined Vehicle), by pulling together individual contributor pieces from Eclipse SDV and the larger OSS community.\nThe quickstart images help to learn how the SDV development, test and deployment lifecycle works from an E2E perspective, including the deployment of applications into the container runtimes on constrained embedded devices.\nThe ready images are also useful for quickly setting up showcases with virtual or real hardware devices.\nEclipse Leda provides a Poky-based reference build pipeline and an OpenEmbedded Metalayer meta-leda for integration into existing Yocto-based projects.\nUsage Download latest Eclipse Leda release Run Eclipse Leda on emulated Qemu devices or on Raspberry Pi 4 Configure device, e.g. provision the device Explore the device tools Develop your first Vehicle App using Eclipse Velocitas template Deploy a Vehicle App to the device Supported Machines / Build Configurations\nEmulated Qemu: x86-64, ARM64, ARM Raspberry Pi 4 Introduction Video Components Overview Features Publish/Subscribe infrastructure for local messaging and cloud connectivity Lightweight container runtime Vehicle Update Manager to orchestrate deployments of Vehicle Applications over the air (SOTA) Self Update Agent for firmware-over-the-air (FOTA) updates Example Vehicle Seat Service implementation Metrics and logs collector for Vehicle Apps See About - Features for more details about current implementation and About - Roadmap for our future work.\nLicense and Copyright This program and the accompanying materials are made available under the terms of the Apache License 2.0 which is available at https://www.apache.org/licenses/LICENSE-2.0\nFor details, please see our license NOTICE\n","categories":"","description":"","excerpt":"\nThe Eclipse Leda project provides system image “recipes” to deliver a …","ref":"/leda/docs/","tags":"","title":"Documentation"},{"body":" Download latest Eclipse Leda release Run Eclipse Leda on emulated Qemu devices or on Raspberry Pi 4 Configure device, e.g. provision the device Explore the device tools Develop your first Vehicle App using Eclipse Velocitas template Deploy a Vehicle App to the device ","categories":"","description":"","excerpt":" Download latest Eclipse Leda release Run Eclipse Leda on emulated …","ref":"/leda/docs/__shared/usage-overview/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/leda/categories/","tags":"","title":"Categories"},{"body":" Eclipse Leda - Quickstart images for software-defined vehicle development Get started with Eclipse Leda ","categories":"","description":"","excerpt":" Eclipse Leda - Quickstart images for software-defined vehicle …","ref":"/leda/","tags":"","title":"Leda"},{"body":"","categories":"","description":"","excerpt":"","ref":"/leda/tags/","tags":"","title":"Tags"}]