<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Leda Documentation â€“ About Leda</title>
    <link>https://eclipse-leda.github.io/leda/docs/about/</link>
    <description>Recent content in About Leda on Eclipse Leda Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 14:24:56 +0530</lastBuildDate>
    
	  <atom:link href="https://eclipse-leda.github.io/leda/docs/about/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Architecture</title>
      <link>https://eclipse-leda.github.io/leda/docs/about/architecture/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/about/architecture/</guid>
      <description>
        
        
        &lt;h2 id=&#34;runtime-overview&#34;&gt;Runtime Overview&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;./leda-arch-reference-implementation.svg&#34;&gt;&lt;img src=&#34;./leda-arch-reference-implementation.png&#34; alt=&#34;Eclipse Leda SDV Reference Implementation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The runtime overview shows the general layer architecture for the runtime of the SDV edge stack as implemented by the Leda quickstart image.
Dotted lines indicate out-of-scope components. They may be non-Edge components (such as cloud services, or SDKs and additional development tooling for vehicle applications). Dotted lines for in-vehicle edge components indicate that they may be used, but are not pre-installed or pre-configured on the Leda quickstart image.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;deployment-overview&#34;&gt;Deployment Overview&lt;/h2&gt;
&lt;p&gt;Eclipse Leda can be used in different deployment scenarios: on physical hardware, on virtual machines or installed on existing Linux distributions.
Depending on the specific deployment, some features may not be applicable. Each deployment option is meant for different uses. The applicabability
depend to your specific requirements.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;./leda-deploy-highlevel.svg&#34;&gt;&lt;img src=&#34;./leda-deploy-highlevel.png&#34; alt=&#34;Eclipse Leda Quickstart Deployment View&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Option 1: Hardware&lt;/strong&gt; - Suitable for proof-of-concepts, system integration tasks, access to actual physical actuators and sensors.
However, an automated setup is much harder to realize, as additional hardware for remote controlling of power supply is needed.
The constrained environment of a physical device is good to verify accidental assumptions made by application developers,
such as resource consumptions (CPU, memory) or the existence of Linux tools, Kernel modules or device drivers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Option 2: Docker Containers&lt;/strong&gt; - Good for quick startup and throw-away (ephemeral) uses, such as automated system testing or one-off troubleshooting.
The access to physical hardware is limited and more complicated to set up. QEMU provides emulation of devices, such as CAN-Bus.
Due to multiple nesting of abstraction technology (Docker + QEMU + OS), additional configuration of networking and device pass-thrus are necessary.
It&amp;rsquo;s easy and cheap to spin-off many separate instances to simulate a whole vehicle system with multiple vehicle computers and
simulated ECUs in the same vehicle network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Option 3: Package Installation&lt;/strong&gt; - Good for existing devices with feature-rich functionality where the original OS should be used.
Leda does not support self-update for this deployment option, as it relies on the master OS distribution channels.
The constraints of an embedded device are not replicable easily on a PC-style host machine without additional effort.
Package installation is good when the focus is on exploring the Vehicle Applications, SDKs, Vehicle Signal Abstractions etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Option 1: Hardware&lt;/th&gt;
&lt;th&gt;Option 2: Docker Containers&lt;/th&gt;
&lt;th&gt;Option 3: Package Installation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Target use case&lt;/td&gt;
&lt;td&gt;PoC&lt;/td&gt;
&lt;td&gt;Automation&lt;/td&gt;
&lt;td&gt;Existing devices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cloud communication&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Automation&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Device provisioning&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Access to hardware&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Container isolation&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network flexibility&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Self update&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Realistic constrains&lt;/td&gt;
&lt;td&gt;+++&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;build-environment-overview&#34;&gt;Build Environment Overview&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;./leda-build-highlevel.svg&#34;&gt;&lt;img src=&#34;./leda-build-highlevel.png&#34; alt=&#34;Eclipse Leda Build Infrastructure View&#34;&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Features</title>
      <link>https://eclipse-leda.github.io/leda/docs/about/features/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/about/features/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Publish/Subscribe messaging infrastructure for cloud connectivity&lt;/strong&gt; by &lt;a href=&#34;https://github.com/eclipse-kanto/&#34;&gt;Eclipse Kanto&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;local messaging for applications and SDV system components via an MQTT message broker&lt;/li&gt;
&lt;li&gt;connection to a backend messaging hub, such as Azure IoT Hub or the IoT Suite&lt;/li&gt;
&lt;li&gt;device identification and authentication for cloud connectivity by using TLS device certificates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container runtime&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;An OCI-compliant container orchestration for vehicle applications and services by &lt;a href=&#34;https://github.com/eclipse-kanto/&#34;&gt;Eclipse Kanto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://containerd.io/&#34;&gt;containerd.io&lt;/a&gt; as the default container runtime. Both layers of container runtimes can be exchanged with other implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Vehicle Update Manager&lt;/strong&gt; to orchestrate deployments of Vehicle Applications, configurations and base operating system updates&lt;/li&gt;
&lt;li&gt;An example Vehicle Seat Service implementation to showcase
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&#34;https://projects.eclipse.org/projects/automotive.velocitas&#34;&gt;Eclipse Velocitas&lt;/a&gt; programming model,&lt;/li&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/eclipse/kuksa.val&#34;&gt;Eclipse Kuksa.VAL&lt;/a&gt; vehicle databroker and&lt;/li&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/COVESA/vehicle_signal_specification&#34;&gt;Covesa Vehicle Signal Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the communication with basic vehicle communication networks such as CAN-Bus (CAN Feeder)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Self Update Agent&lt;/strong&gt; for firmware-over-the-air (FOTA) updates, using an A/B deployment strategy
&lt;ul&gt;
&lt;li&gt;Integration with &lt;a href=&#34;https://www.rauc.io/&#34;&gt;RAUC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An &lt;a href=&#34;https://github.com/open-telemetry/&#34;&gt;OpenTelemetry collector&lt;/a&gt; and example configurations to collect and publish logs and metrics of containerized Vehicle Applications to the cloud backend for further processing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The features of the reusable build recipes implemented as an &lt;a href=&#34;https://www.openembedded.org&#34;&gt;OpenEmbedded&lt;/a&gt; metalayer &lt;code&gt;meta-leda&lt;/code&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build recipes for a &lt;a href=&#34;https://www.yoctoproject.org/&#34;&gt;Yocto&lt;/a&gt;-based distribution to build SDV-related software components&lt;/li&gt;
&lt;li&gt;Build recipes for customizations of the target device&amp;rsquo;s storage structure to enable A/B system updates&lt;/li&gt;
&lt;li&gt;Build recipes for pre-packaging container images into the device during the manufacturing process to minimize initial online provisioning time&lt;/li&gt;
&lt;li&gt;A customized minimal setup for use on constrained devices and a full setup with convenient developer tools&lt;/li&gt;
&lt;li&gt;Ready images for virtual devices, for automated testing and evaluation purposes, eg QEMU ARM-64&lt;/li&gt;
&lt;li&gt;Ready images for physical devices, for evaluation and demo purposes, eg Raspberry Pi 4&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Goals</title>
      <link>https://eclipse-leda.github.io/leda/docs/about/goals/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/about/goals/</guid>
      <description>
        
        
        &lt;p&gt;The project aims to provide &lt;strong&gt;an integration point for Open Source components for the Software Defined Vehicle ecosystem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In a complex architecture, there are many different ways of implementations and alternative solutions possible.&lt;/p&gt;
&lt;p&gt;For embedded vehicle computer systems and their software stack, there are a lot of requirements to consider, depending on the actual use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integration and High-Level Testing (System Integrators, Suppliers)&lt;/li&gt;
&lt;li&gt;Proof-of-Concept projects (Integrators, OEMs, ISVs)&lt;/li&gt;
&lt;li&gt;Experiments and Hackathons (Developers, Research)&lt;/li&gt;
&lt;li&gt;Development phase (Developers, OEMs)&lt;/li&gt;
&lt;li&gt;Open Source Collaboration (Developers, OEMs, ISVs, Open Source Organizations, Standardization Organizations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the requirements derived from the above are taken into account for Leda&amp;rsquo;s quickstart setups.
Thereas some other requirements can only be met once the project is in a nearer production environment and by customizing the target device image.
The following document will list some of these requirements and give an explanation on why they are set as goals in the Leda quickstart distribution.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Provide an example operating system build and configuration for constrained in-vehicle devices:&lt;/strong&gt;
Suppliers and system integrators want a way to cusomize and optimize the base operating system as much as possible.
This is to achieve a high efficiency, high level of reuse and cost benefits of the planned hardware.
The build system for the operating system, and the selection of the underlying distribution is key to the convenience for new users,
but also commercially a business decision with an impact on the future maintainability of the platform.
The Yocto Project has been chosen as an established de-facto standard for customized Linux distributions for embedded systems.
Leda provides an OpenEmbedded Meta-Layer, which can be used with many existing SDKs of SoC manufacturers.
Additionally, Leda will strive for being easy to install on low-cost &amp;ldquo;evaluation boards&amp;rdquo; such as the Raspberry Pi,
or development environments such as a virtual machine in the cloud.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate software-defined-vehicle Open Source components to showcase the available features and their state of maturity:&lt;/strong&gt;
The SDV ecosystem will grow and a lot of new software projects will be needed to solve the current problems and challenges.
The Eclipse SDV ecosystem already contains many software packages, which independently make sense for their set goals.
With Leda, we want to increase the integrational aspect, helping project leads, developers, contributors, users and architects
to evaluate the SDV portfolio, how it can be integrated with each other and how a possible reference architecture implementation might be loooking like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demonstrate the use and interaction of open protocols and specifications:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Vehicle Signal Specifications from the &lt;a href=&#34;https://www.covesa.global/&#34;&gt;The Connected Vehicle Systems Alliance (COVESA)&lt;/a&gt;
to establish a semantically useful  abstraction model for vehicle signals.&lt;/li&gt;
&lt;li&gt;OpenTelemetry specs and components, to show the possibilities of applying DevOps methodologies and technologies
to operate, monitor and maintain fleets of vehicles and their distributed software applications&lt;/li&gt;
&lt;li&gt;Eclipse IoT related specifications for software rollouts and digital twin representations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Roadmap</title>
      <link>https://eclipse-leda.github.io/leda/docs/about/roadmap/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/about/roadmap/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;Initial Open Source contribution expected by Q2 2022 (Done)&lt;/li&gt;
&lt;li&gt;A first milestone build is expected end of 2022 (Done)&lt;/li&gt;
&lt;li&gt;Plan for the first release cycle to be created in Q1/2023 (In Progress - Q2/2023)&lt;/li&gt;
&lt;li&gt;Release cycles are planned every 3-6 months&lt;/li&gt;
&lt;li&gt;Release planning will be conducted together with corresponding Eclipse projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;backlog&#34;&gt;Backlog&lt;/h2&gt;
&lt;p&gt;The Leda team maintains a backlog roadmap using GitHub projects at &lt;a href=&#34;https://github.com/orgs/eclipse-leda/projects/1/views/1&#34;&gt;https://github.com/orgs/eclipse-leda/projects/1/views/1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;future-work&#34;&gt;Future Work&lt;/h2&gt;
&lt;p&gt;The project intends to be the integration and collaboration platform for Software defined Vehicle functionality.&lt;/p&gt;
&lt;p&gt;Exemplary future work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Migrate to official Eclipse Kanto releases for Cloud Connector, Container Management and Vehicle Update Manager&lt;/li&gt;
&lt;li&gt;Include reference implementations from the &lt;a href=&#34;https://projects.eclipse.org/working-group/eclipse-software-defined-vehicle&#34;&gt;Eclipse Software Defined Vehicle working group&lt;/a&gt; projects:
&lt;ul&gt;
&lt;li&gt;Eclipse Velocitas&lt;/li&gt;
&lt;li&gt;Eclipse Kuksa&lt;/li&gt;
&lt;li&gt;Eclipse SommR&lt;/li&gt;
&lt;li&gt;Eclipse Chariott&lt;/li&gt;
&lt;li&gt;Eclipse Muto&lt;/li&gt;
&lt;li&gt;Eclipse Backend function Bindings (BfB)&lt;/li&gt;
&lt;li&gt;Eclipse SDV Blueprints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Include and showcase more features regarding development, operation and monitoring of Vehicle Services and Vehicle Applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have feedback, please use &lt;a href=&#34;https://github.com/eclipse-leda/&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Releases</title>
      <link>https://eclipse-leda.github.io/leda/docs/about/releases/</link>
      <pubDate>Wed, 12 Apr 2023 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/about/releases/</guid>
      <description>
        
        
        &lt;p&gt;The Eclipse Leda project follows the Eclipse Release process.
Please see &lt;a href=&#34;https://www.eclipse.org/projects/handbook/#release&#34;&gt;Eclipse Project handbook&lt;/a&gt; for details about the process.&lt;/p&gt;
&lt;p&gt;The release plans overview for Eclipse Leda is available at &lt;a href=&#34;https://projects.eclipse.org/projects/automotive.leda/governance&#34;&gt;https://projects.eclipse.org/projects/automotive.leda/governance&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
