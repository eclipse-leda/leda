<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Leda Documentation â€“ Setup development environment</title>
    <link>https://eclipse-leda.github.io/leda/docs/build/devenv/</link>
    <description>Recent content in Setup development environment on Eclipse Leda Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 14:24:56 +0530</lastBuildDate>
    
	  <atom:link href="https://eclipse-leda.github.io/leda/docs/build/devenv/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Codespaces</title>
      <link>https://eclipse-leda.github.io/leda/docs/build/devenv/github-codespaces/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/build/devenv/github-codespaces/</guid>
      <description>
        
        
        &lt;h1 id=&#34;setting-up-development-environment-in-github-codespaces&#34;&gt;Setting up Development Environment in GitHub Codespaces&lt;/h1&gt;
&lt;h2 id=&#34;install-the-github-codespaces-extension&#34;&gt;Install the GitHub Codespaces Extension&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; When using our DevContainer, the &lt;em&gt;GitHub Codespaces&lt;/em&gt; extension is pre-installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start VSCode&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;Extensions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Search for &amp;ldquo;GitHub Codespaces&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Install&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, create a new codespace via the GitHub web interface:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github-code-new-codespace.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select a big enough machine type for Yocto/BitBake, e.g. 16 CPU. You need at leasst 50GB disk space.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github-codespaces-remote-explorer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;building-leda-in-a-github-codespace&#34;&gt;Building Leda in a Github Codespace&lt;/h2&gt;
&lt;p&gt;After successfully obtaining and connecting to a codespace you can build Leda either with kas or manually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To build with kas follow the instructions at: &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/build-kas-manually/#building-with-kas&#34;&gt;Building with kas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To build manually: &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/build-kas-manually/#building-manually&#34;&gt;Building manually&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;private-repositories&#34;&gt;Private Repositories&lt;/h2&gt;
&lt;p&gt;When using GitHub Codespaces with submodules and private repositories,
a separate tool for git authentication is required (see &lt;a href=&#34;https://github.com/microsoft/vscode/issues/109050&#34;&gt;VSCode issue #109050&lt;/a&gt;), as the authentication token provided to the GitHub Codespaces virtual machine only allows access to the main repository.&lt;/p&gt;
&lt;p&gt;Git Credential Manager:
&lt;a href=&#34;https://aka.ms/gcm&#34;&gt;https://aka.ms/gcm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Installation:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -LO https://raw.githubusercontent.com/GitCredentialManager/git-credential-manager/main/src/linux/Packaging.Linux/install-from-source.sh &amp;amp;&amp;amp;
sh ./install-from-source.sh &amp;amp;&amp;amp;
git-credential-manager-core configure
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: GitHub Runner</title>
      <link>https://eclipse-leda.github.io/leda/docs/build/devenv/github-runner/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/build/devenv/github-runner/</guid>
      <description>
        
        
        &lt;h1 id=&#34;create-a-new-github-runner-for-this-repo&#34;&gt;Create a new GitHub Runner for this repo&lt;/h1&gt;
&lt;p&gt;Start with creating a new azure VM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu Server Latest, currently 20.04&lt;/li&gt;
&lt;li&gt;Size Standard D16ds v5&lt;/li&gt;
&lt;li&gt;The admin user should be called &amp;ldquo;runner&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the VM is ready:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stop the VM&lt;/li&gt;
&lt;li&gt;Go to &amp;ldquo;Disk&amp;rdquo; and resize the OS disk to 512 GB&lt;/li&gt;
&lt;li&gt;Start the VM again&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;run-the-script-to-setup-the-runner&#34;&gt;Run the script to setup the runner&lt;/h1&gt;
&lt;p&gt;Log on to the VM as runner. Either copy the &lt;code&gt;scripts/PrepVMasGHRunner.sh&lt;/code&gt; onto the VM or create a new script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano prep.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the content of the PrepVMasGHRunner.sh from this repo into the new file, save it and make it executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;755&lt;/span&gt; prep.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Call it with the token and the next available nummer, see below how to get this items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./prep.sh &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ASYVOMU........DTCFCMBA&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the Azure portal go the VM, go to the &amp;ldquo;network&amp;rdquo; section and delete the rule opening port 22.
Congratulation, you are done!&lt;/p&gt;
&lt;h1 id=&#34;how-to-get-the-token-and-the-number-to-call-the-script&#34;&gt;How to get the token and the number to call the script&lt;/h1&gt;
&lt;p&gt;In the repo, go to &amp;ldquo;Settings&amp;rdquo; -&amp;gt; &amp;ldquo;Actions&amp;rdquo;. You see the currently provisioned runners:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nextnumber.png&#34; alt=&#34;Alt text&#34; title=&#34;Find next number&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pick the next number and pass it to the script.&lt;/p&gt;
&lt;p&gt;To get the token press the green button in the above screenshot. The token is in the command:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;token.png&#34; alt=&#34;Alt text&#34; title=&#34;Get the token&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: VSCode DevContainer</title>
      <link>https://eclipse-leda.github.io/leda/docs/build/devenv/vscode-devcontainer/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/build/devenv/vscode-devcontainer/</guid>
      <description>
        
        
        &lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Obtain the &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker Engine&lt;/a&gt; for your distribution and add your non-privileged user to the docker group (&lt;code&gt;sudo usermod -aG docker $USER&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visual-studio-code-development-containers&#34;&gt;Visual Studio Code: Development Containers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open Visual Studio Code&lt;/li&gt;
&lt;li&gt;Open Command Palette (&lt;code&gt;F1&lt;/code&gt;) and select &lt;code&gt;Clone repository in Container Volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;eclipse-leda/meta-leda&lt;/code&gt; and the main branch.&lt;/li&gt;
&lt;li&gt;Adapt proxy configurations if necessary (&lt;code&gt;.devcontainer/proxy.sh&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;For a clean remote build machine, you may want to &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/github-codespaces/&#34;&gt;set up a development environment on GitHub CodeSpaces&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;building-leda-in-a-vscode-devcontainer&#34;&gt;Building Leda in a VSCode DevContainer:&lt;/h2&gt;
&lt;p&gt;After successfully setting up your DevContainer you can build Leda either with kas or manually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To build with kas follow the instructions at: &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/build-kas-manually/#building-with-kas&#34;&gt;Building with kas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To build manually: &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/build-kas-manually/#building-manually&#34;&gt;Building manually&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;The build process requires online connection and you must be authenticated to access private repositories.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a GitHub Personal Access Token (PAT) at &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt; and grant &lt;code&gt;read:packages&lt;/code&gt; permission&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Configure SSO&lt;/code&gt; and authorize your PAT for the organization&lt;/li&gt;
&lt;li&gt;On the build host, authenticate to ghcr.io: &lt;code&gt;skopeo login ghcr.io --authfile ~/auth.json --username &amp;lt;username&amp;gt;&lt;/code&gt; and enter the PAT as password
&lt;ul&gt;
&lt;li&gt;You may need to create the folder where skopeo is storing authentication information beforehand:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir -p /run/containers/1000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod a+w /run/containers/1000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Start the bitbake build process&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Building with kas/manually</title>
      <link>https://eclipse-leda.github.io/leda/docs/build/devenv/build-kas-manually/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/build/devenv/build-kas-manually/</guid>
      <description>
        
        
        &lt;p&gt;After setting up your &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/vscode-devcontainer/&#34;&gt;VSCode DevContainer&lt;/a&gt; or &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/build/devenv/github-codespaces/&#34;&gt;GitHub Codespace&lt;/a&gt; you can proceed with the actual build process. Here you have two choices - either using the kas-build system or setting up the build manually.&lt;/p&gt;
&lt;h2 id=&#34;building-with-kas&#34;&gt;Building with kas&lt;/h2&gt;
&lt;p&gt;This is the easiest way to build leda semi-automatically&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd /workspaces/meta-leda-fork/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the VSCode terminal and run &lt;code&gt;kas build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note: you can alter the build options by modifying the .config.yaml file in the trunk of the repository&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;building-manually&#34;&gt;Building manually&lt;/h2&gt;
&lt;p&gt;You can also build Leda manually if more customization of the build process is required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;export LEDA_WORKDIR=/workspaces/meta-leda-fork/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd ${LEDA_WORKDIR}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the Poky repository with the required release, e.g. &lt;code&gt;kirkstone&lt;/code&gt; and pull updates if necessary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git://git.yoctoproject.org/poky
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; poky
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout -t origin/kirkstone -b kirkstone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config pull.rebase &lt;span style=&#34;color:#204a87&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prepare the build environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt; oe-init-build-env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dry-run a build of the Linux Kernel recipe using BitBake:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake --dry-run linux-yocto
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checkout the meta-layer dependencies for Leda:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$LEDA_WORKDIR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone -b kirkstone https://github.com/rauc/meta-rauc.git meta-rauc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone -b kirkstone https://github.com/rauc/meta-rauc-community.git meta-rauc-community
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone -b kirkstone https://git.yoctoproject.org/meta-virtualization meta-virtualization
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone -b kirkstone https://git.openembedded.org/meta-openembedded meta-openembedded
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change to the &lt;code&gt;poky/build&lt;/code&gt; directory (generated from the &lt;code&gt;oe-init-build-env&lt;/code&gt; script automatically)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add all the necessary meta-layers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-rauc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-rauc-community/meta-rauc-qemux86
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-openembedded/meta-oe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-openembedded/meta-filesystems
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-openembedded/meta-python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-openembedded/meta-networking
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-virtualization
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-leda-components
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-leda-bsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bitbake-layers add-layer &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LEDA_WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/meta-leda-distro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dry run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;DISTRO&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;leda bitbake --dry-run sdv-image-all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real build:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;DISTRO&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;leda bitbake sdv-image-all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also build one of the target recipies this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;DISTRO&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;leda bitbake kanto-container-management
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Note: in this case you can set the target architecture and other build options in the build/local.conf file&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Restricted Internet</title>
      <link>https://eclipse-leda.github.io/leda/docs/build/devenv/restricted-internet-environments/</link>
      <pubDate>Tue, 03 Jan 2023 17:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/build/devenv/restricted-internet-environments/</guid>
      <description>
        
        
        &lt;p&gt;Developers working in a corporate environment may face challenges when building Leda-based images, pulling SDV containers, etc.,
usually due to a restrictive corporate proxy. Thus the objective of this page is to collect helpful guides for mitigating such problems.&lt;/p&gt;
&lt;h2 id=&#34;https-proxy&#34;&gt;HTTP(S) proxy&lt;/h2&gt;
&lt;p&gt;First you might need to configure your http(s) SOCKS proxy such that the BitBake shell uses it for &lt;code&gt;do_fetch&lt;/code&gt; recipe tasks. By default, &lt;code&gt;http_proxy&lt;/code&gt; and &lt;code&gt;https_proxy&lt;/code&gt;
environment variables are part of the &lt;code&gt;BB_ENV_PASSTHROUGH&lt;/code&gt; list and are directly passed from the current environment to BitBake. If you are still facing &lt;code&gt;http(s)_proxy&lt;/code&gt;
issues during &lt;code&gt;do_fetch&lt;/code&gt; tasks, you might want to check the &lt;a href=&#34;https://wiki.yoctoproject.org/wiki/Working_Behind_a_Network_Proxy&#34;&gt;Working Behind a Network Proxy @ Yocto Project Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;goproxy&#34;&gt;GOPROXY&lt;/h2&gt;
&lt;p&gt;GOPROXY is a golang-specific mechanism for fetching dependencies during build-time. What is more, &lt;em&gt;gomod-type&lt;/em&gt; BitBake recipes pull their external dependencies during
the &lt;code&gt;do_compile&lt;/code&gt; task, instead of the &lt;code&gt;do_fetch&lt;/code&gt; task leading to further issues. The simplest workaround is to set-up a local (caching) goproxy container on
the build host and make BitBake use that. The following steps assume that the build host has docker installed and working, with access to the docker hub registry.&lt;/p&gt;
&lt;h3 id=&#34;hosting-a-local-goproxy-server&#34;&gt;Hosting a local goproxy server&lt;/h3&gt;
&lt;p&gt;Start by setting up the goproxy container in host networking mode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --env &lt;span style=&#34;color:#000&#34;&gt;HTTP_PROXY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://&amp;lt;PROXY_IP&amp;gt;:&amp;lt;PROXY_PORT&amp;gt;&amp;#34;&lt;/span&gt; --env &lt;span style=&#34;color:#000&#34;&gt;HTTPS_PROXY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://&amp;lt;PROXY_IP&amp;gt;:&amp;lt;PROXY_PORT&amp;gt;&amp;#34;&lt;/span&gt; -v cacheDir:/go --network host goproxy/goproxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Don&amp;rsquo;t forget to substitute &lt;code&gt;&amp;lt;PROXY_IP&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;PROXY_PORT&amp;gt;&lt;/code&gt; with the appropriate address of your HTTP(S) proxy.&lt;/p&gt;
&lt;p&gt;This will start a local caching goproxy on port &lt;code&gt;8081&lt;/code&gt; with a volume named &lt;code&gt;cacheDir&lt;/code&gt; for caching the downloaded Go packages. The goproxy container can be configured
further to provide access to private Go-package registries. For more information on its configuration take a look at &lt;a href=&#34;https://github.com/goproxyio/goproxy&#34;&gt;goproxyio/goproxy on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;using-the-local-goproxy-server-for-bitbake-builds&#34;&gt;Using the local goproxy server for BitBake builds&lt;/h3&gt;
&lt;p&gt;Since the main objective of BitBake/kas is to facilitate reproducible builds, only certain variables from the host environment are used for the build. Go, however,
looks at the &lt;code&gt;GOPROXY&lt;/code&gt; environmental variable to decide on which proxy to use. That&amp;rsquo;s why you should first start by exporting the GOPROXY variable in the terminal
from which you will later run the build:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GOPROXY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make BitBake use the value of the variable you just exported for the build, you should add it to its &amp;ldquo;environment passtrough&amp;rdquo; list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BB_ENV_PASSTHROUGH_ADDITIONS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BB_ENV_PASSTHROUGH_ADDITIONS&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt; GOPROXY&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kas&#34;&gt;Kas&lt;/h3&gt;
&lt;p&gt;If you are using kas as a top-level build tool, to set the value of the GOPROXY variable for builds, all you need to do is to add it the &lt;em&gt;env&lt;/em&gt;-section of your
kas-config yaml. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;qemux86-64&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;GOPROXY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kas will handle the exporting of the variable and adding it to BitBake&amp;rsquo;s passtrough list automatically from there.&lt;/p&gt;
&lt;h2 id=&#34;airgapped-container-installation&#34;&gt;Airgapped container installation&lt;/h2&gt;
&lt;p&gt;Sometimes devices might not have internet access on first boot and therefore the SDV containers that are needed for provisioning and updating a SDV-image
will not be available.&lt;/p&gt;
&lt;h3 id=&#34;build-time&#34;&gt;Build-Time&lt;/h3&gt;
&lt;p&gt;The meta-leda layer provides an opitional distro feature that pre-downloads and injects a minimal set of SDV container images in Kanto&amp;rsquo;s local container registry
on first boot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: &lt;strong&gt;This will lead to a significant increase of the image size since all containers are downloaded as self-contained tarballs and therefore &amp;ldquo;layer reuse&amp;rdquo;
is not possible.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To enable this distro feature, add to your &lt;code&gt;local.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;DISTRO_FEATURES&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34; airgap-containers&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;PREINSTALLED_CTR_IMAGES_DIR&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/path/to/container/images&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;IMAGE_INSTALL&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;packagegroup-sdv-airgap-containers&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are using the &lt;code&gt;sdv-image-data&lt;/code&gt; image recipe &lt;code&gt;packagegroup-sdv-airgap-containers&lt;/code&gt; will be automatically installed when the distro-feature is enabled.
Therefore all you need to add to your &lt;code&gt;local.conf&lt;/code&gt; will be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;DISTRO_FEATURES&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34; airgap-containers&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;PREINSTALLED_CTR_IMAGES_DIR&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/data/var/containers/images&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;em&gt;Here we have assumed that the partition where sdv-image-data is installed is mounted as &lt;code&gt;/data&lt;/code&gt; on the rootfs&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;manual&#34;&gt;Manual&lt;/h3&gt;
&lt;p&gt;If you do not wish to use the &lt;em&gt;airgap-containers&lt;/em&gt; distro-feature, you can manually download inject the container images in the kanto namespace with ctr.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start on a machine with internet access and docker/ctr installed:&lt;/p&gt;
&lt;p&gt;Pull the container image in your machine&amp;rsquo;s local registry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctr -n kanto-cm image pull &amp;lt;REGISTRY&amp;gt;/&amp;lt;IMAGE&amp;gt;:&amp;lt;TAG&amp;gt; --platform linux/&amp;lt;ARCH&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where if you would like to download the Kuksa Databroker container for an arm64 device you would change the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;REGISTRY&amp;gt;/&amp;lt;IMAGE&amp;gt;:&amp;lt;TAG&amp;gt; -&amp;gt; ghcr.io/eclipse/kuksa.val/databroker:0.3.0 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;ARCH&amp;gt; -&amp;gt; arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the pull was successful, export the image as a tarball:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctr -n kanto-cm images &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &amp;lt;tarbal_name&amp;gt;.tar &amp;lt;REGISTRY&amp;gt;/&amp;lt;IMAGE&amp;gt;:&amp;lt;TAG&amp;gt; --platform --platform linux/&amp;lt;ARCH&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&amp;lt;REGISTRY&amp;gt;/&amp;lt;IMAGE&amp;gt;:&amp;lt;TAG&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ARCH&amp;gt;&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; be the same as in the &lt;code&gt;pull&lt;/code&gt; command, while &lt;code&gt;&amp;lt;tarball_name&amp;gt;&lt;/code&gt; can be any name you would like.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transfer the exported &lt;code&gt;&amp;lt;tarball_name&amp;gt;.tar&lt;/code&gt; to your device to a folder of your choosing, e.g. &lt;code&gt;/data/var/containers/images&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obtain a terminal connection to this device and go to the directory where you transferred the container image tarball.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import the image to the kanto-cm registry by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctr --namespace kanto-cm image import &amp;lt;tarball_name&amp;gt;.tar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you see a message from ctr that the &amp;ldquo;image might be filtered out&amp;rdquo; this means that you might have pulled an image for an architecture that
does not match the one of your device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
