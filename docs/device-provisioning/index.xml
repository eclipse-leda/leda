<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Leda Documentation â€“ Device Provisioning</title>
    <link>https://eclipse-leda.github.io/leda/docs/device-provisioning/</link>
    <description>Recent content in Device Provisioning on Eclipse Leda Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 14:24:56 +0530</lastBuildDate>
    
	  <atom:link href="https://eclipse-leda.github.io/leda/docs/device-provisioning/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Manual Provisioning</title>
      <link>https://eclipse-leda.github.io/leda/docs/device-provisioning/manual-provisioning/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/device-provisioning/manual-provisioning/</guid>
      <description>
        
        
        &lt;p&gt;Follow these steps to do a manual device provisioning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate the device certificate (eg using openssl) and sign it with your CA.&lt;/li&gt;
&lt;li&gt;Log in to Azure Portal, Go to Azure Iot Hub and create a new device&lt;/li&gt;
&lt;li&gt;Select the proper authentication type, e.g. X.509 Self-signed or X.509 CA Signed&lt;/li&gt;
&lt;li&gt;Copy the device certificate (cert file and key file) to the device to &lt;code&gt;/data/var/certificate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart cloud connector service or container.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-a-device-in-azure-iot-hub&#34;&gt;Create a device in Azure IoT Hub&lt;/h2&gt;
&lt;p&gt;For the device to be connectable, it needs to be known to the cloud service first. In these steps, we will create a new device identity by using Azure IoT Hub.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pre-Requisites&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Virtual device must already be started with &lt;code&gt;runqemu ...&lt;/code&gt; or &lt;code&gt;leda&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: For Raspberry Pi, please follow the manual steps below and adapt the SSH connection options to the IP of your Raspbery Pi.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The virtual device needs to be remotely accessible via ssh port &lt;code&gt;2222&lt;/code&gt; on the host&amp;rsquo;s &lt;code&gt;localhost&lt;/code&gt; (Qemu port forwarding in userspace)
or via ssh port &lt;code&gt;22&lt;/code&gt; on the IP address &lt;code&gt;192.168.7.2&lt;/code&gt; (Qemu virtual networking using TAP network interface)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The container runtime needs to have started successfully, check with &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Device has been created in Azure IoT Hub&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Do &lt;strong&gt;NOT&lt;/strong&gt; create an &amp;ldquo;edge&amp;rdquo; device.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configure-authentication-on-device&#34;&gt;Configure authentication on device&lt;/h2&gt;
&lt;p&gt;For the proper device authentication, the device management backend authority needs to issue a device-specific certificate and sign it. This is a complex process and subject to the specific situation.&lt;/p&gt;
&lt;p&gt;For the Leda quickstart images, the software configuration is prepared with dummy certificates which need to be replaced.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ATTENTION: The Leda example device certificates are public and insecure, they only serve demonstration purposes. You need to replace the intermediate certificates and device certificates with your own.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Generate a device certificate using openssl&lt;/li&gt;
&lt;li&gt;Sign it with your intermediate CA certificate&lt;/li&gt;
&lt;li&gt;Put it into &lt;code&gt;/data/var/certificate/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the cloud connector service or container: &lt;code&gt;systemctl restart cloud-connector&lt;/code&gt; or &lt;code&gt;kanto-cm stop -n cloudconnector --force; kanto-cm start -n cloudconnector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When finished, continue with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/app-deployment/&#34;&gt;Deploying a Vehicle App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/self-update/self-update-tutorial/&#34;&gt;Performing a Self Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;private-container-registries&#34;&gt;Private container registries&lt;/h2&gt;
&lt;p&gt;Please refer to the &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/container-management/container-registries/&#34;&gt;Container Registries&lt;/a&gt; on how to configure private container registries.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Provisioning with sdv-provision</title>
      <link>https://eclipse-leda.github.io/leda/docs/device-provisioning/script-provisioning/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/device-provisioning/script-provisioning/</guid>
      <description>
        
        
        &lt;p&gt;Meta-leda and the Leda-quickstart image provide a utility &lt;code&gt;sdv-provision&lt;/code&gt; that simplifies the device provisioning procedure.&lt;/p&gt;
&lt;h2 id=&#34;connecting-to-the-device&#34;&gt;Connecting to the device&lt;/h2&gt;
&lt;p&gt;Since the procedure includes copying and pasting device IDs, it is recommended to connect to the device over a ssh connection. &lt;code&gt;sdv-motd&lt;/code&gt; provides an
easy way to find your device&amp;rsquo;s ip. More information on connecting via ssh can be found &lt;a href=&#34;../manual-provisioning#create-a-device-in-azure-iot-hub&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;provisioning-via-a-connection-string&#34;&gt;Provisioning via a connection string&lt;/h2&gt;
&lt;h3 id=&#34;device-side&#34;&gt;Device-side&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After connecting via ssh run &lt;code&gt;sdv-provision&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# sdv-provision
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Checking Eclipse Leda Device Provisioning configuration...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Certificates directory exists
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Checking Device ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Based on network device: eth0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- File does not exist, creating: /etc/deviceid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Device ID: XX-XX-XX-XX-XX-XX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Checking whether either IdScope or ConnectionString is configured
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Neither Id Scope file nor ConnectionString found, needs manual configuration
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Do you want to use the global Azure IoT Device Provisioning Service &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;DPS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; by using an Id Scope, or &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt; you want to use a direct connection to a specific Azure IoT Hub using a Connection String?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; Azure IoT Device Provisioning Service &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;DPS&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; with Id Scope
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; Azure IoT Hub with Connection String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Choose:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note the generated Device ID (XX-XX-XX-XX-XX-XX).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type h /Azure IoT Hub with Connection String/ and press Enter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paste your Azure IoT Hub Connection String: &lt;code&gt;HostName=&amp;lt;IoT Hub in Azure&amp;gt;.azure-devices.net;DeviceId=&amp;lt;XX-XX-XX-XX-XX-XX&amp;gt;&lt;/code&gt; and press enter. Where &lt;code&gt;&amp;lt;IoT Hub in Azure&amp;gt;&lt;/code&gt; is your Azure IoT Hub name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;azure-portal&#34;&gt;Azure Portal&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://portal.azure.com/&#34;&gt;https://portal.azure.com/&lt;/a&gt; and to your Azure IoT Hub named &lt;code&gt;&amp;lt;IoT Hub in Azure&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;Devices -&amp;gt; Add Device&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enter the Device ID &lt;code&gt;XX-XX-XX-XX-XX-XX&lt;/code&gt; generated on the previous step as Device ID.&lt;/li&gt;
&lt;li&gt;Pick &lt;code&gt;X.509 Self-Signed&lt;/code&gt; and paste the two thumbprints generated by &lt;code&gt;sdv-provision&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Save.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;device-side-1&#34;&gt;Device-Side&lt;/h3&gt;
&lt;p&gt;After all of the above steps have been completed, connect back to your device and restart the cloudconnector container by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kanto-cm stop -n cloudconnector --force
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kanto-cm start -n cloudconnector
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or alternatively use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kantui
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And restart the container from the TUI.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Vehicle Update Manager</title>
      <link>https://eclipse-leda.github.io/leda/docs/device-provisioning/vehicle-update-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/device-provisioning/vehicle-update-manager/</guid>
      <description>
        
        
        &lt;p&gt;The &lt;em&gt;Vehicle Update Manager&lt;/em&gt; delegates two different types of updates:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;em&gt;Desired State&lt;/em&gt; on the container layer&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Self Update&lt;/em&gt; on operating system layer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;vehicle-update-manager-arch.png&#34; alt=&#34;Vehicle Update Manager Architecture Overview&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;desired-state&#34;&gt;Desired State&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Desired State&lt;/em&gt; is applied at runtime on the container layer.&lt;/p&gt;
&lt;p&gt;This type of update mechanism can update vehicle applications, vehicle services and other containers together with configuration resources or data files at runtime.
If the applications support it, the rollout can also use high-availability strategies, such as rolling deployments. You can find out more about more about
the &lt;a href=&#34;../container-management/container-update-agent&#34;&gt;Container Update Agent here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;self-update&#34;&gt;Self Update&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Self Update&lt;/em&gt; is applied on reboot of the device only.&lt;/p&gt;
&lt;p&gt;This type of update mechanism is used for system-level updates which require the operating system to be rebooted to take effect.
You can find out more about the &lt;a href=&#34;../self-update/self-update-tutorial&#34;&gt;Self Update Agent in the tutorial&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Self Updates</title>
      <link>https://eclipse-leda.github.io/leda/docs/device-provisioning/self-update/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/device-provisioning/self-update/</guid>
      <description>
        
        
        &lt;p&gt;In general, the self-update mechanism for operating system level updates is done with two separate partitions. While one partition is the actively booted partition and in use, the other partition can be updated by writing a partition image to it, as it is unused or inactive.&lt;/p&gt;
&lt;p&gt;Once the download and writing is done, a reboot is triggered and the boot loader will now switch to the newly updated partition.&lt;/p&gt;
&lt;p&gt;If the booting of the updated partition fails, the self update mechanism can revert back to the previous partition or boot to a rescue partition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;leda-self-update.png&#34; alt=&#34;Leda Self Update&#34;&gt;&lt;/p&gt;
&lt;p&gt;As updating the running operating system cannot be done at runtime, the approach requires additional disk space, a second partition and also requires the device to be rebooted for the updates to take effect.&lt;/p&gt;
&lt;p&gt;In a vehicle, the self-updater cannot decide on its own when to do a reboot, as the vehicle must be in a safe condition (eg parked, state of charge etc.). Hence, the trigger for performaing the switch to another slot and a subsequent reboot is handed over to a higher level component, such as the vehicle update manager, which may in turn rely on driver feedback or other conditions.&lt;/p&gt;
&lt;h2 id=&#34;implementation-with-rauc-update-service&#34;&gt;Implementation with RAUC Update Service&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rauc.io/&#34;&gt;RAUC&lt;/a&gt; is a lightweight update client that runs on your embedded device and reliably controls the procedure of updating your device with a new firmware revision.&lt;/p&gt;
&lt;p&gt;For general usage of the RAUC tool, please see the &lt;a href=&#34;https://rauc.readthedocs.io/en/latest/using.html&#34;&gt;RAUC User manual&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference-configuration&#34;&gt;Reference configuration&lt;/h2&gt;
&lt;p&gt;The project contains an example reference implementation and configuration using RAUC, which allows the evaluation of the concepts, mechanisms and involved software components in an emulated, virtual environment.&lt;/p&gt;
&lt;p&gt;The Leda quickstart image contains the following disk partitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a small rescue partition&lt;/li&gt;
&lt;li&gt;a full SDV installation with a container runtime, pre-loaded SDV container images and deployment specifications and additional developer tools such as nerdctl and kantui.&lt;/li&gt;
&lt;li&gt;a minimal SDV installation with a container runtime, but no additional examples or developer tools. This partition is used to demonstrate the self-update functionality.&lt;/li&gt;
&lt;li&gt;additional boot and data partitions for keeping system state information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: All three rootfs partitions (rootfs) initially contain the same identical copies of the base operating system. Both SDV Root partitions will use the same shared data partition for the container persistent state.&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Container Management</title>
      <link>https://eclipse-leda.github.io/leda/docs/device-provisioning/container-management/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/device-provisioning/container-management/</guid>
      <description>
        
        
        &lt;p&gt;Leda is using Kanto Container Management as the upper-layer container runtime and container orchestration engine.&lt;/p&gt;
&lt;p&gt;Besides the command line tool &lt;code&gt;kanto-cm&lt;/code&gt;, Kanto also has remote interfaces to manage containers.&lt;/p&gt;
&lt;h2 id=&#34;remote-interface&#34;&gt;Remote Interface&lt;/h2&gt;
&lt;p&gt;Kanto&amp;rsquo;s container-management service offers a remote interface via local messaging (MQTT) to interact with a digital twin on the cloud side.
This feature can be easily enabled by setting &lt;code&gt;&amp;quot;things&amp;quot;: { &amp;quot;enabled&amp;quot;: true }&lt;/code&gt; in &lt;code&gt;/etc/container-management/config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When one of the cloud connector components, such as leda-contrib-cloud-connector or Kanto&amp;rsquo;s azure-connector, is connected to a cloud backend, the container-management will publish its own information using Eclipse Ditto and Eclipse Hono messages. For this, container-management only needs the device Id, gateway Id and tenant Id.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
