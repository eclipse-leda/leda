<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Leda Documentation â€“ Getting Started</title>
    <link>https://eclipse-leda.github.io/leda/docs/general-usage/</link>
    <description>Recent content in Getting Started on Eclipse Leda Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 14:24:56 +0530</lastBuildDate>
    
	  <atom:link href="https://eclipse-leda.github.io/leda/docs/general-usage/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Download latest release</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/download-releases/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/download-releases/</guid>
      <description>
        
        
        &lt;p&gt;Go to the &lt;a href=&#34;https://github.com/eclipse-leda/leda-distro/releases&#34;&gt;Eclipse Leda Releases&lt;/a&gt; page and download the disk image for the respective machine and the respective Linux kernel:&lt;/p&gt;
&lt;h1 id=&#34;latest-release-artifacts&#34;&gt;Latest Release Artifacts&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Note: There are no official releases yet. The artifacts available on the Release page are for testing the build and release workflows and should be considered as unstable nightly builds from the main branch.&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Machine&lt;/th&gt;
&lt;th&gt;Filename&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QEMU x86_64&lt;/td&gt;
&lt;td&gt;eclipse-leda-qemu-x86_64.tar.xz&lt;/td&gt;
&lt;td&gt;For running QEMU x86 64-Bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QEMU ARM 64&lt;/td&gt;
&lt;td&gt;eclipse-leda-qemu-arm64.tar.xz&lt;/td&gt;
&lt;td&gt;For running QEMU ARM 64-Bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raspberry Pi 4&lt;/td&gt;
&lt;td&gt;eclipse-leda-raspberrypi.tar.xz&lt;/td&gt;
&lt;td&gt;For running on Raspberry Pi 4 (SD-Card Image)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;using-github-cli-tool&#34;&gt;Using GitHub CLI tool&lt;/h1&gt;
&lt;p&gt;To download all files of the latest release using the GitHub CLI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt;, e.g. for Ubuntu:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
echo &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&amp;#34; | sudo tee /etc/apt/sources.list.d/github-cli.list &amp;gt; /dev/null
sudo apt update
sudo apt install gh
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Authenticate to GitHub:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gh auth login
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Download Leda latest release:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Linux:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir leda &amp;amp;&amp;amp; cd leda

gh release download \
  --pattern &amp;#39;*.zip&amp;#39; \
  --pattern &amp;#39;eclipse-leda-*&amp;#39; \
  --repo eclipse-leda/leda-distro
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On Windows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gh release download --pattern &amp;#34;*.zip&amp;#34; --pattern &amp;#34;eclipse-leda-*&amp;#34; --repo eclipse-leda/leda-distro
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/running-qemu/&#34;&gt;Running Eclipse Leda on QEMU&lt;/a&gt; or &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/raspberry-pi/&#34;&gt;Running Eclipse Leda on Raspberry Pi 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Running on Docker</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/docker-setup/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/docker-setup/</guid>
      <description>
        
        
        &lt;p&gt;By using the dockerized Leda quickstart images, the SDV vehicle edge components can be evaluated on emulated X86-64 and ARM64 system images,
without having to install QEMU and dependencies manually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;leda-docker-compose-up.gif&#34; alt=&#34;Eclipse Leda Docker Compose Up&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you want to execute the image without Docker, please see &lt;a href=&#34;../running-qemu/&#34;&gt;Running on QEMU&lt;/a&gt;.
This allows to tweak the startup script, modify the emulated hardware device and set up advanced network configurations.&lt;/p&gt;
&lt;p&gt;There are two options to run Leda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker: Simple, restricted to one container&lt;/li&gt;
&lt;li&gt;Docker Compose: Advanced, allows networking between containers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Linux host&lt;/strong&gt; with 4 vCPUs, 8GB of RAM and SSD storage is recommended&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;The easiest way is to run a single instance of Leda in a Docker container:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run the Leda Docker quickstart image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login with &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop the Docker container&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shutdown now
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: If you need to stop the container from outside, use the &lt;code&gt;docker stop &amp;lt;id&amp;gt;&lt;/code&gt; command from a separate terminal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;privileged-containers&#34;&gt;Privileged Containers&lt;/h3&gt;
&lt;p&gt;When run as a privileged container, QEMU will try to set up a TAP network and use KVM acceleration.
Network and CPU will be faster, depending on the host system.&lt;/p&gt;
&lt;p&gt;To be able to use these host devices, QEMU needs access to the following devices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/dev/kvm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/net/tun&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --privileged --device&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/dev/kvm:/dev/kvm --device&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/dev/net/tun:/dev/net/tun ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exposing-additional-ports&#34;&gt;Exposing additional ports&lt;/h3&gt;
&lt;p&gt;To also expose ports to connect to ssh, mqtt or the Kuksa databroker, add the port mappings to the Docker command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --privileged -p 2222:2222 -p 1883:1883 -p 30555:30555 ghcr.io/eclipse-leda/leda-distro/leda-quickstart-x86:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following ports are specifically of interest and exposed by the docker container:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2222&lt;/code&gt; for SSH (mapped internally to &lt;code&gt;22&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1880&lt;/code&gt; - free slot reserved for user service&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1883&lt;/code&gt; for MQTT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8888&lt;/code&gt; - free slot reserved for user service&lt;/li&gt;
&lt;li&gt;&lt;code&gt;30555&lt;/code&gt; for Kuksa Databroker&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: In unprivileged mode, only these ports are mapped by the Docker container and forwarded to the Leda system.
In privileged mode, all TCP ports can be exposed, which will then be forwarded from the Docker container into the Leda system.
See the
&lt;a href=&#34;https://github.com/eclipse-leda/leda-distro/blob/main/resources/docker-snapshot/dockerfiles/leda-quickstart-docker-entrypoint-x86.sh&#34;&gt;entrypoint script&lt;/a&gt;
for details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;running-arm-64-version&#34;&gt;Running ARM-64 version&lt;/h3&gt;
&lt;p&gt;To run the ARM-64 bit version of the image, use the &lt;code&gt;leda-quickstart-arm64&lt;/code&gt; container image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it ghcr.io/eclipse-leda/leda-distro/leda-quickstart-arm64:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;A more convenient way to setup advanced scenarios is to use Docker Compose.
There is a Docker Compose configuration for an Eclipse Leda setup in &lt;a href=&#34;https://github.com/eclipse-leda/leda-distro/tree/main/resources/docker-compose&#34;&gt;resources/docker-compose&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It will start up the following containers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leda Quickstart image (QEMU x86-64)&lt;/li&gt;
&lt;li&gt;Leda Quickstart image (QEMU ARM-64)&lt;/li&gt;
&lt;li&gt;Web Server with pre-built RAUC Update Bundles&lt;/li&gt;
&lt;li&gt;MQTT Bridge&lt;/li&gt;
&lt;li&gt;DNS Proxy (Allows QEMU to use the Docker DNS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;Get the Docker Compose configuration file and additional dockerfiles from the
&lt;a href=&#34;https://github.com/eclipse-leda/leda-distro&#34;&gt;https://github.com/eclipse-leda/leda-distro&lt;/a&gt; repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --filter&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;blob:none https://github.com/eclipse-leda/leda-distro
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; leda-distro/resources/docker-compose
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting the containers with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose up --detach --wait
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Log in to a development shell inside of the docker network:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose run --rm devshell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stopping the containers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose down
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;docker-compose-services&#34;&gt;Docker Compose Services&lt;/h3&gt;
&lt;p&gt;Checking all containers are running or exited successfully:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker compose ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                 COMMAND                  SERVICE              STATUS              PORTS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leda-arm64           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docker/leda-quicksâ€¦&amp;#34;&lt;/span&gt;   leda-arm64           running &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;   1883/tcp, 0.0.0.0:2002-&amp;gt;2222/tcp, 0.0.0.0:30556-&amp;gt;30555/tcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leda-bundle-server   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docker-entrypoint.â€¦&amp;#34;&lt;/span&gt;   leda-bundle-server   running &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;   0.0.0.0:8080-&amp;gt;80/tcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leda-dns-proxy       &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dnsmasq -k&amp;#34;&lt;/span&gt;             dns-proxy            running             53/tcp, 0.0.0.0:5353-&amp;gt;53/udp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leda-initializer     &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/bin/sh -c /root/leâ€¦&amp;#34;&lt;/span&gt;   leda-initializer     exited &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leda-mqtt-broker     &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docker-entrypoint.â€¦&amp;#34;&lt;/span&gt;   mqtt-broker          running &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;   0.0.0.0:1883-&amp;gt;1883/tcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leda-x86             &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docker/leda-quicksâ€¦&amp;#34;&lt;/span&gt;   leda-x86             running &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;   1883/tcp, 0.0.0.0:30555-&amp;gt;30555/tcp, 0.0.0.0:2001-&amp;gt;2222/tcp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;network-setup&#34;&gt;Network setup&lt;/h3&gt;
&lt;p&gt;As the networking is a bit more complicated to set up with emulated network inside of QEMU, the following explanation is helpful to understand networking better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All docker compose containers are attached to a network called &lt;code&gt;leda-bridge&lt;/code&gt; and &lt;code&gt;leda-network&lt;/code&gt; and can see each other&lt;/li&gt;
&lt;li&gt;The QEMU instances use a TAP network inside of each leda-quickstart-xxx container and do a NAT network translation to their own container&lt;/li&gt;
&lt;li&gt;The Docker internal DNS server is being used. This is implemented by a DNS Proxy container,
which will forward incoming DNS requests to the Docker DNS running on the 127.0.0.x network.&lt;/li&gt;
&lt;li&gt;In unprivileged mode: Only the exposed ports are forwarded from the docker container into the QEMU process:
mosquitto &lt;code&gt;1883&lt;/code&gt;, ssh &lt;code&gt;2222&lt;/code&gt; and kuksa.val databroker &lt;code&gt;30555&lt;/code&gt;.
In privileged mode, all TCP ports are forwarded from the Docker container into the QEMU process and the special port &lt;code&gt;2222&lt;/code&gt; is forwarded to ssh port.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;developer-shell&#34;&gt;Developer Shell&lt;/h3&gt;
&lt;p&gt;Developer Shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose run --rm devshell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From there, you can log in to either Leda on QEMU x86-64, or log in to Leda on QEMU ARM-64.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh leda-x86
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh leda-arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run an additional terminal in the developer shell, execute this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; devshell /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interacting-with-eclipse-leda&#34;&gt;Interacting with Eclipse Leda&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Check the general system status&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdv-health
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;device-provisioning&#34;&gt;Device Provisioning&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the provisioning script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdv-provision
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the fingerprints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to Azure IoT Hub, create a new device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the certificate&amp;rsquo;s common name (CN) as Device Id - on Leda, this defaults to a part of the MAC Address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;X.509 Self-Signed&lt;/code&gt; authentication type and enter both fingerprints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Save&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mqtt-broker-bridge&#34;&gt;MQTT Broker Bridge&lt;/h3&gt;
&lt;div class=&#34;mermaid&#34;&gt;  graph LR;
      A[&#34;MQTT Container &lt;br&gt; on docker host &lt;br&gt; localhost:1883&#34;] -- Bridge --&gt; B[leda-x86:31883];
      A -- Bridge --&gt; C[leda-arm64:31883];
      B--&gt;B1[mosquitto service &lt;br&gt; leda-x86:1883];
      C--&gt;C1[mosquitto service &lt;br&gt; leda-arm64:1883];
  &lt;/div&gt;
  
  &lt;p&gt;The Docker Compose setup will also start an Eclipse Mosquitto message broker as a bridge to both Leda instances.
This allows a user or developer to monitor messages sent by or received by both virtual devices.&lt;/p&gt;
&lt;p&gt;Connect your MQTT client to &lt;code&gt;mqtt-broker.leda-network&lt;/code&gt; by using the exposed port 1883 on the host:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mosquitto_sub -h localhost -p &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1883&lt;/span&gt; -t &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;docker-networking&#34;&gt;Docker Networking&lt;/h3&gt;
&lt;p&gt;You need to enable IP forwarding from Docker containers to make networking work.
The containers (leda-arm64, leda-x86) need to run with &lt;code&gt;--privileged&lt;/code&gt; as they change iptables rules for proper forwarding of network packets.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://docs.docker.com/network/bridge/#enable-forwarding-from-docker-containers-to-the-outside-world&#34;&gt;Docker documentation for bridge networking&lt;/a&gt; for details.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sysctl net.ipv4.conf.all.forwarding&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo iptables -P FORWARD ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each Eclipse Leda instance (ARM64, x86_64) is running within a QEMU emulated network (192.168.7.2), which itself is contained
in a containerized network called &lt;code&gt;leda-network&lt;/code&gt; (192.168.8.x).&lt;/p&gt;
&lt;p&gt;The containers wrapping the QEMU instances will forward the following ports to the respective QEMU process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH on port 2222&lt;/li&gt;
&lt;li&gt;Mosquitto on port 1883&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dhcp-and-dns-setup&#34;&gt;DHCP and DNS setup&lt;/h3&gt;
&lt;p&gt;Each Leda-QEMU container is running a local DHCP on the &lt;code&gt;tap0&lt;/code&gt; network interface and listens for DHCP requests by the Leda Distro running inside of QEMU.
The DHCP server will respond with the same IP address (&lt;code&gt;192.168.7.2&lt;/code&gt;) to the request from QEMU.&lt;/p&gt;
&lt;p&gt;The DHCP response contains a DNS nameserver pointing to the &lt;code&gt;dns-proxy.leda-network&lt;/code&gt; (&lt;code&gt;192.168.8.14&lt;/code&gt;) IP,
which in turn forwards to Docker&amp;rsquo;s internal &lt;code&gt;127.0.0.11&lt;/code&gt; nameserver.
This allows the QEMU guests to resolve Docker Compose Services by their service name, e.g. &lt;code&gt;leda-bundle-server.leda-network&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;volumes&#34;&gt;Volumes&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;/root&lt;/code&gt; path inside of the Leda containers is mounted as a volume and contains the raw disk image and runner scripts for the QEMU Leda distribution.
Changes on the QEMU filesystem are made persistent on a copy of the QCOW2 disk image, so that restarting the device will keep any changes.&lt;/p&gt;
&lt;p&gt;To reset to the original state, delete the respective docker volumes and restart the containers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker compose rm --force --stop --volumes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume rm leda-arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume rm leda-x86
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;profiles&#34;&gt;Profiles&lt;/h3&gt;
&lt;p&gt;Profiles can be used to determine which containers (services) docker compose should be starting by default.
This is mostly used to have the &lt;code&gt;devshell&lt;/code&gt; container not start up by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Contains docker containers which are not essential at runtime, must useful for testing and development purposes&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Running on QEMU</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/running-qemu/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/running-qemu/</guid>
      <description>
        
        
        &lt;p&gt;If you want to execute the image without building first, grab the latest release or build artifacts from &lt;a href=&#34;https://github.com/eclipse-leda/leda-distro/&#34;&gt;https://github.com/eclipse-leda/leda-distro/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Linux host&lt;/strong&gt; with 8 vCPUs, 16GB of RAM and SSD storage is recommended&lt;/li&gt;
&lt;li&gt;Your Linux user should be &lt;strong&gt;sudoer&lt;/strong&gt; to allow TAP network interfaces to be set up&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;qemu-x86_64&#34;&gt;QEMU x86_64&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&#34;https://www.qemu.org/&#34;&gt;Qemu&lt;/a&gt;, e.g. for Ubuntu:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update -y
sudo apt-get install -y xz-utils qemu-system-x86-64
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/download-releases/&#34;&gt;latest Eclipse Leda release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncompress the archive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xf eclipse-leda-qemu-x86_64.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./run-leda.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run-leda.cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;leda-bootsequence.png&#34; alt=&#34;Leda boot sequence&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login as &lt;code&gt;root&lt;/code&gt; without password on login prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify and wait until container runtime is started: &lt;code&gt;systemctl status container-management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Check the system health: &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sdv-health1.png&#34; alt=&#34;sdv-health&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The status of some containers (e.g. cloud connector) are expected to stay in &lt;strong&gt;FAILED&lt;/strong&gt; status as long as the &lt;strong&gt;Device Provisioning&lt;/strong&gt; steps are not completed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;qemu-arm-64-bit&#34;&gt;QEMU ARM 64-Bit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&#34;https://www.qemu.org/&#34;&gt;Qemu&lt;/a&gt;, e.g. for ARM 64-Bit: &lt;code&gt;sudo apt install qemu-system-aarch64&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/download-releases/&#34;&gt;latest Eclipse Leda release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncompress the archive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xf eclipse-leda-qemu-arm64.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./run-leda.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run-leda.cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login as &lt;code&gt;root&lt;/code&gt; without password on login prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify and wait until container runtime is started: &lt;code&gt;systemctl status container-management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Check the system health: &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The status of some containers (e.g. cloud connector) are expected to stay in &lt;strong&gt;FAILED&lt;/strong&gt; status as long as the &lt;strong&gt;Device Provisioning&lt;/strong&gt; steps are not completed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Running on Raspberry Pi</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/raspberry-pi/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/raspberry-pi/</guid>
      <description>
        
        
        &lt;p&gt;What you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Raspberry Pi 4B (64 Bit) with 2 GiB of RAM or more, recommended is 8 GiB&lt;/li&gt;
&lt;li&gt;Network connection (Ethernet or Wifi) with transparent internet access&lt;/li&gt;
&lt;li&gt;Optional keyboard and display (makes it easier to troubleshoot)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/download-releases/&#34;&gt;latest released SD-Card Image&lt;/a&gt;: &lt;code&gt;eclipse-leda-raspberrypi.tar.xz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncompress the SD Card image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install -y xz-utils
tar xf eclipse-leda-raspberrypi.tar.xz
bzip2 -d -f sdv-image-all-raspberrypi4-64.wic.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flash the &lt;code&gt;sdv-image-all-raspberrypi4.wic&lt;/code&gt; file to an SD-Card&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Linux:
&lt;ul&gt;
&lt;li&gt;Install bmap tools: &lt;code&gt;sudo apt-get install -y bmap-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Insert SD Card and check which device is mounted: &lt;code&gt;sudo fdisk -l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unmount the device: &lt;code&gt;sudo umount /dev/mmcblk[X]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo bmaptool copy --bmap sdv-image-all-raspberrypi4-64.wic.bmap sdv-image-all-raspberrypi4-64.wic /dev/mmcblk[X]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note:  Using &lt;code&gt;bmap&lt;/code&gt; is &lt;strong&gt;much&lt;/strong&gt; faster but works the same as with plain &lt;code&gt;dd if=&amp;lt;wic-file&amp;gt; of=dev/mmcblk[x]&lt;/code&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On Windows:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;Raspberry Pi Imager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;Balena Etcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional: If you need to adapt the network configuration eg Wifi credentials, edit the configuration files on the &lt;code&gt;boot&lt;/code&gt; partition.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shutdown the Raspberry and insert the SD-Card into the Raspberry Pi SD-Card slot at the bottom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Power on your Raspberry to boot the image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login with &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check disk space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;raspberry-growdisk&lt;/code&gt; system service will do this automatically on first boot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To manually enlarge the available disk space on the SD-Card, resize the disk partition: &lt;code&gt;parted /dev/mmcblk0 resizepart 6 100% &amp;amp;&amp;amp; resize2fs /dev/mmcblk0p6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Due to changes in the disk partition, the partition number (&lt;code&gt;6&lt;/code&gt; in the example) may have changed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify with &lt;code&gt;df -h&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify and wait until container runtime is started: &lt;code&gt;systemctl status container-management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Check the system health: &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Wifi Configuration</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/wifi-configuration/</link>
      <pubDate>Tue, 03 Jan 2023 17:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/wifi-configuration/</guid>
      <description>
        
        
        &lt;p&gt;BSP packages for emulated WiFi devices (QEMU) and hardware device drivers are provided in &lt;code&gt;meta-leda&lt;/code&gt; for &lt;a href=&#34;../../customization/custom-images#hardware&#34;&gt;supported hardware&lt;/a&gt;.
They usually do not require extra configuration.&lt;/p&gt;
&lt;p&gt;For a guide on how to connect to a wireless network check the &lt;a href=&#34;connecting-to-wifi&#34;&gt;&lt;em&gt;Connecting to Wi-Fi networks&lt;/em&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;h2 id=&#34;raspberry-pi-4b-64&#34;&gt;Raspberry Pi 4B 64&lt;/h2&gt;
&lt;p&gt;The required kernel modules and binary blobs are provided with the &lt;code&gt;sdv-wifi-kernel-config.inc&lt;/code&gt; config file and the &lt;code&gt;packagegroup-sdv-rpi4wifi&lt;/code&gt; packagegroup. These
are included in &lt;code&gt;sdv-image-full.bb&lt;/code&gt; and &lt;code&gt;sdv-image-minimal.bb&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;If you, however, decide to define your own custom image based on &lt;a href=&#34;../../customization/custom-images&#34;&gt;&lt;em&gt;Custom Distros&lt;/em&gt;&lt;/a&gt;,
you would have to make sure the packagegroup is installed to enable WiFi connectivity.&lt;/p&gt;
&lt;h2 id=&#34;qemu&#34;&gt;QEMU&lt;/h2&gt;
&lt;p&gt;QEMU images provide the kernel modules necessary to set-up a virtual wlan interface and connect it to a virtual wifi network. This can be useful in various testing scenarios.&lt;/p&gt;
&lt;p&gt;To create and link a virtual WiFi interface to eth0, boot your QEMU image and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip link add link eth0 name wlan0 &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt; virt_wifi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The SSID of the virtual network you can connect to is &lt;code&gt;VirtWifi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Leda Quickstart QEMU images set the name of the default virtual ethernet interface to &lt;code&gt;eth0&lt;/code&gt; through kernel CMDLINE configurations (&lt;code&gt;net.ifnames=0 biosdevname=0&lt;/code&gt;).
If you are building a custom image with a different kernel CMDLINE replace &lt;code&gt;eth0&lt;/code&gt; with the name of your virtual interface (check &lt;code&gt;ifconfig&lt;/code&gt;).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Utilities</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/utilities/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/utilities/</guid>
      <description>
        
        
        &lt;p&gt;The quickstart image contains the following utilities.
These utility scripts are meant to be convenience tools for users and developers.
They help to experiment with the container deployment, device provisioning or vehicle data access.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sdv-health:&lt;/strong&gt; Show SDV software components health status&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kantui:&lt;/strong&gt; A text user interface for kanto-cm to manage containers (start, stop, logs, redeploy all)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sdv-device-info:&lt;/strong&gt; Show and update device information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sdv-provision:&lt;/strong&gt; Generate device certificates and configuration of cloud connection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sdv-motd:&lt;/strong&gt; Message-of-the-Day shown after login prompt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can-forward:&lt;/strong&gt; Forwarding a CAN-bus network interface into a containerized Vehicle Application&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kanto-auto-deployer:&lt;/strong&gt; Automatically deploys containers on boot. Runs as a systemd service, and can also be invoked by a user directly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sdv-ctr-exec:&lt;/strong&gt; Execute arbitrary commands in existing containers&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:
These scripts are not meant to be reused or called from production software.
Their behaviour or command line syntax is not a stable API and should not be trusted for automation purposes.
For details, please see &lt;a href=&#34;https://github.com/eclipse-leda/leda-utils/&#34;&gt;leda-utils&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Cheatsheet</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/cheatsheet/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/cheatsheet/</guid>
      <description>
        
        
        &lt;p&gt;This cheat sheet gives you an overview of common command line commands to interact with the tools available on the quickstart image.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;General&lt;/td&gt;
&lt;td&gt;Overall info&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdv-health&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Show device info&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdv-device-info&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Device provisioning&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdv-provision&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Switch Keyboard layout&lt;/td&gt;
&lt;td&gt;&lt;code&gt;loadkeys de&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System&lt;/td&gt;
&lt;td&gt;System load&lt;/td&gt;
&lt;td&gt;&lt;code&gt;htop&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Disk free&lt;/td&gt;
&lt;td&gt;&lt;code&gt;df -h -t ext4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Memory free&lt;/td&gt;
&lt;td&gt;&lt;code&gt;free -h&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;Interfaces summary&lt;/td&gt;
&lt;td&gt;&lt;code&gt;networkctl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ethernet status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;networkctl status enp0s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Routing table&lt;/td&gt;
&lt;td&gt;&lt;code&gt;route&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Active listeners&lt;/td&gt;
&lt;td&gt;&lt;code&gt;netstat -l -n -t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kanto-CM&lt;/td&gt;
&lt;td&gt;Show all containers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kanto-cm list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;User interface&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kantui&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Service logs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;journalctl -f -l -t container-management&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Auto deployments&lt;/td&gt;
&lt;td&gt;See &lt;code&gt;/data/var/containers/manifests/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Development deployments&lt;/td&gt;
&lt;td&gt;See &lt;code&gt;/data/var/containers/manifests_dev/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Restart a container&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kanto-cm restart -n &amp;lt;containername&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContainerdD&lt;/td&gt;
&lt;td&gt;Show images&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ctr --address /data/run/containerd/containerd/containerd.sock --namespace=kanto-cm i ls&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Import local archive&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ctr --address /data/run/containerd/containerd.sock --namespace=kanto-cm i import &amp;lt;docker.tar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Prune containers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nerdctl system prune --all&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mosquitto&lt;/td&gt;
&lt;td&gt;Show all messages&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mosquitto_sub -v -t &#39;#&#39; -h localhost&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Send message&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mosquitto_pub -t &#39;&amp;lt;target/topic&amp;gt;&#39; -h localhost -m &#39;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;}&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Connectivity status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mosquitto_rr --quiet -h localhost -t &#39;edge/thing/request&#39; -e &#39;edge/thing/response&#39; -m &#39;&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RAUC Self Update&lt;/td&gt;
&lt;td&gt;Current boot status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rauc status&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Switch to other boot slot&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rauc status mark-active other&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAN-Bus&lt;/td&gt;
&lt;td&gt;CAN Dump&lt;/td&gt;
&lt;td&gt;&lt;code&gt;candump -l any,0:0,#FFFFFFFF&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;running-custom-ad-hoc-containers&#34;&gt;Running custom ad-hoc containers&lt;/h2&gt;
&lt;p&gt;To install arbitrary containers, create the container using the &lt;code&gt;kanto-cm&lt;/code&gt; command line tool.
If it&amp;rsquo;s not a background service, but a cli tool, adding the &lt;code&gt;--t --i&lt;/code&gt; options allows console access.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# kanto-cm remove --name python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# kanto-cm create --name python --t --i --privileged docker.io/library/python:3.8.16-slim-bullseye
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bf9deca4-dbf1-4132-9ba7-e0f378bd34a7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# kanto-cm start --name python --a --i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python 3.8.16 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;default, Jan &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 2023, 00:19:05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;GCC 10.2.1 20210110&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; on linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; or &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; more information.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; quit&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
