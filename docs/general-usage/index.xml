<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Leda Documentation â€“ Getting Started</title>
    <link>https://eclipse-leda.github.io/leda/docs/general-usage/</link>
    <description>Recent content in Getting Started on Eclipse Leda Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 14:24:56 +0530</lastBuildDate>
    
	  <atom:link href="https://eclipse-leda.github.io/leda/docs/general-usage/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Download latest release</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/download-releases/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/download-releases/</guid>
      <description>
        
        
        &lt;p&gt;Go to the &lt;a href=&#34;https://github.com/eclipse-leda/leda-distro/releases&#34;&gt;Eclipse Leda Releases&lt;/a&gt; page and download the disk image for the respective machine and the respective Linux kernel:&lt;/p&gt;
&lt;h1 id=&#34;latest-release-artifacts&#34;&gt;Latest Release Artifacts&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Note: There are no official releases yet. The artifacts available on the Release page are for testing the build and release workflows and should be considered as unstable nightly builds from the main branch.&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Machine&lt;/th&gt;
&lt;th&gt;Filename&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;QEMU x86_64&lt;/td&gt;
&lt;td&gt;eclipse-leda-qemu-x86_64.tar.xz&lt;/td&gt;
&lt;td&gt;For running QEMU x86 64-Bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QEMU ARM 64&lt;/td&gt;
&lt;td&gt;eclipse-leda-qemu-arm64.tar.xz&lt;/td&gt;
&lt;td&gt;For running QEMU ARM 64-Bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raspberry Pi 4&lt;/td&gt;
&lt;td&gt;eclipse-leda-raspberrypi.tar.xz&lt;/td&gt;
&lt;td&gt;For running on Raspberry Pi 4 (SD-Card Image)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;using-github-cli-tool&#34;&gt;Using GitHub CLI tool&lt;/h1&gt;
&lt;p&gt;To download all files of the latest release using the GitHub CLI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt;, e.g. for Ubuntu:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
echo &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&amp;#34; | sudo tee /etc/apt/sources.list.d/github-cli.list &amp;gt; /dev/null
sudo apt update
sudo apt install gh
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Authenticate to GitHub:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gh auth login
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Download Leda latest release:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Linux:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir leda &amp;amp;&amp;amp; cd leda

gh release download \
  --pattern &amp;#39;*.zip&amp;#39; \
  --pattern &amp;#39;eclipse-leda-*&amp;#39; \
  --repo eclipse-leda/leda-distro
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On Windows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gh release download --pattern &amp;#34;*.zip&amp;#34; --pattern &amp;#34;eclipse-leda-*&amp;#34; --repo eclipse-leda/leda-distro
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/running-qemu/&#34;&gt;Running Eclipse Leda on QEMU&lt;/a&gt; or &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/raspberry-pi/&#34;&gt;Running Eclipse Leda on Raspberry Pi 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Running on QEMU</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/running-qemu/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/running-qemu/</guid>
      <description>
        
        
        &lt;p&gt;If you want to execute the image without building first, grab the latest release or build artifacts from &lt;a href=&#34;https://github.com/eclipse-leda/leda-distro/&#34;&gt;https://github.com/eclipse-leda/leda-distro/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Linux host&lt;/strong&gt; with 8 vCPUs, 16GB of RAM and SSD storage is recommended&lt;/li&gt;
&lt;li&gt;Your Linux user should be &lt;strong&gt;sudoer&lt;/strong&gt; to allow TAP network interfaces to be set up&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;qemu-x86_64&#34;&gt;QEMU x86_64&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&#34;https://www.qemu.org/&#34;&gt;Qemu&lt;/a&gt;, e.g. for Ubuntu:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update -y
sudo apt-get install -y xz-utils qemu-system-x86-64
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/download-releases/&#34;&gt;latest Eclipse Leda release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncompress the archive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xf eclipse-leda-qemu-x86_64.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./run-leda.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run-leda.cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;leda-bootsequence.png&#34; alt=&#34;Leda boot sequence&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login as &lt;code&gt;root&lt;/code&gt; without password on login prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify and wait until container runtime is started: &lt;code&gt;systemctl status container-management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Check the system health: &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sdv-health1.png&#34; alt=&#34;sdv-health&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The status of some containers (e.g. cloud connector) are expected to stay in &lt;strong&gt;FAILED&lt;/strong&gt; status as long as the &lt;strong&gt;Device Provisioning&lt;/strong&gt; steps are not completed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;qemu-arm-64-bit&#34;&gt;QEMU ARM 64-Bit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&#34;https://www.qemu.org/&#34;&gt;Qemu&lt;/a&gt;, e.g. for ARM 64-Bit: &lt;code&gt;sudo apt install qemu-system-aarch64&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/download-releases/&#34;&gt;latest Eclipse Leda release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncompress the archive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xf eclipse-leda-qemu-arm64.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./run-leda.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run QEMU on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run-leda.cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login as &lt;code&gt;root&lt;/code&gt; without password on login prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify and wait until container runtime is started: &lt;code&gt;systemctl status container-management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Check the system health: &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The status of some containers (e.g. cloud connector) are expected to stay in &lt;strong&gt;FAILED&lt;/strong&gt; status as long as the &lt;strong&gt;Device Provisioning&lt;/strong&gt; steps are not completed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Running on Raspberry Pi</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/raspberry-pi/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/raspberry-pi/</guid>
      <description>
        
        
        &lt;p&gt;What you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Raspberry Pi 4B (64 Bit) with 2 GiB of RAM or more, recommended is 8 GiB&lt;/li&gt;
&lt;li&gt;Network connection (Ethernet or Wifi) with transparent internet access&lt;/li&gt;
&lt;li&gt;Optional keyboard and display (makes it easier to troubleshoot)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/general-usage/download-releases/&#34;&gt;latest released SD-Card Image&lt;/a&gt;: &lt;code&gt;eclipse-leda-raspberrypi.tar.xz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncompress the SD Card image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install -y xz-utils
tar xf eclipse-leda-raspberrypi.tar.xz
bzip2 -d -f sdv-image-all-raspberrypi4-64.wic.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flash the &lt;code&gt;sdv-image-all-raspberrypi4.wic&lt;/code&gt; file to an SD-Card&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Linux:
&lt;ul&gt;
&lt;li&gt;Install bmap tools: &lt;code&gt;sudo apt-get install -y bmap-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Insert SD Card and check which device is mounted: &lt;code&gt;sudo fdisk -l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unmount the device: &lt;code&gt;sudo umount /dev/mmcblk[X]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo bmaptool copy --bmap sdv-image-all-raspberrypi4-64.wic.bmap sdv-image-all-raspberrypi4-64.wic /dev/mmcblk[X]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note:  Using &lt;code&gt;bmap&lt;/code&gt; is &lt;strong&gt;much&lt;/strong&gt; faster but works the same as with plain &lt;code&gt;dd if=&amp;lt;wic-file&amp;gt; of=dev/mmcblk[x]&lt;/code&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On Windows:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;Raspberry Pi Imager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;Balena Etcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional: If you need to adapt the network configuration eg Wifi credentials, edit the configuration files on the &lt;code&gt;boot&lt;/code&gt; partition.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shutdown the Raspberry and insert the SD-Card into the Raspberry Pi SD-Card slot at the bottom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Power on your Raspberry to boot the image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login with &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check disk space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;raspberry-growdisk&lt;/code&gt; system service will do this automatically on first boot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To manually enlarge the available disk space on the SD-Card, resize the disk partition: &lt;code&gt;parted /dev/mmcblk0 resizepart 6 100% &amp;amp;&amp;amp; resize2fs /dev/mmcblk0p6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Due to changes in the disk partition, the partition number (&lt;code&gt;6&lt;/code&gt; in the example) may have changed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify with &lt;code&gt;df -h&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify and wait until container runtime is started: &lt;code&gt;systemctl status container-management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Check the system health: &lt;code&gt;sdv-health&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue with &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Wifi Configuration</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/wifi-configuration/</link>
      <pubDate>Tue, 03 Jan 2023 17:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/wifi-configuration/</guid>
      <description>
        
        
        &lt;p&gt;BSP packages for emulated WiFi devices (QEMU) and hardware device drivers are provided in &lt;code&gt;meta-leda&lt;/code&gt; for &lt;a href=&#34;../../customization/custom-images#hardware&#34;&gt;supported hardware&lt;/a&gt;.
They usually do not require extra configuration.&lt;/p&gt;
&lt;p&gt;For a guide on how to connect to a wireless network check the &lt;a href=&#34;connecting-to-wifi&#34;&gt;&lt;em&gt;Connecting to Wi-Fi networks&lt;/em&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;h2 id=&#34;raspberry-pi-4b-64&#34;&gt;Raspberry Pi 4B 64&lt;/h2&gt;
&lt;p&gt;The required kernel modules and binary blobs are provided with the &lt;code&gt;sdv-wifi-kernel-config.inc&lt;/code&gt; config file and the &lt;code&gt;packagegroup-sdv-rpi4wifi&lt;/code&gt; packagegroup. These
are included in &lt;code&gt;sdv-image-full.bb&lt;/code&gt; and &lt;code&gt;sdv-image-minimal.bb&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;If you, however, decide to define your own custom image based on &lt;a href=&#34;../../customization/custom-images&#34;&gt;&lt;em&gt;Custom Distros&lt;/em&gt;&lt;/a&gt;,
you would have to make sure the packagegroup is installed to enable WiFi connectivity.&lt;/p&gt;
&lt;h2 id=&#34;qemu&#34;&gt;QEMU&lt;/h2&gt;
&lt;p&gt;QEMU images provide the kernel modules necessary to set-up a virtual wlan interface and connect it to a virtual wifi network. This can be useful in various testing scenarios.&lt;/p&gt;
&lt;p&gt;To create and link a virtual WiFi interface to eth0, boot your QEMU image and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ip link add link eth0 name wlan0 &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt; virt_wifi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The SSID of the virtual network you can connect to is &lt;code&gt;VirtWifi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Leda Quickstart QEMU images set the name of the default virtual ethernet interface to &lt;code&gt;eth0&lt;/code&gt; through kernel CMDLINE configurations (&lt;code&gt;net.ifnames=0 biosdevname=0&lt;/code&gt;).
If you are building a custom image with a different kernel CMDLINE replace &lt;code&gt;eth0&lt;/code&gt; with the name of your virtual interface (check &lt;code&gt;ifconfig&lt;/code&gt;).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Utilities</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/utilities/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/utilities/</guid>
      <description>
        
        
        &lt;p&gt;The quickstart image contains the following utilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sdv-health:&lt;/strong&gt; Show SDV software components health status&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kantui:&lt;/strong&gt; A text user interface for kanto-cm to manage containers (start, stop, logs, redeploy all)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sdv-device-info:&lt;/strong&gt; Show and update device information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sdv-motd:&lt;/strong&gt; Message-of-the-Day shown after login prompt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can-forward:&lt;/strong&gt; Forwarding a CAN-bus network interface into a containerized Vehicle Application&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kanto-auto-deployer:&lt;/strong&gt; Automatically deploys containers on boot. Runs as a systemd service, and can also be invoked by a user directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For details, please see &lt;a href=&#34;https://github.com/eclipse-leda/leda-utils/&#34;&gt;leda-utils&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;health-check&#34;&gt;Health check&lt;/h2&gt;
&lt;p&gt;The sdv-health utility displays a status overview of some important dependencies and device configurations for the SDV edge stack. The sdv health utility can be configured using the sdv.conf configuration file.&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# sdv-health
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eclipse-leda/leda-utils/main/assets/sdv-health.png&#34; alt=&#34;SDV Health Example Output&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;version-information&#34;&gt;Version Information&lt;/h3&gt;
&lt;p&gt;The Leda image version and build time will be displayed at the top in the first category:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS Release: Year and codename of the release version&lt;/li&gt;
&lt;li&gt;Image Version: Name of the image and more specific version information, such as the git tag or commit id&lt;/li&gt;
&lt;li&gt;Build timestamp in &lt;code&gt;yyyMMddHHmmss&lt;/code&gt; notation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bus-networks&#34;&gt;Bus networks&lt;/h3&gt;
&lt;p&gt;If available, vehicle bus network information, such as the status of the CAN-Bus, will be displayed iin its own category. This helps to quickly identify if there problems with the hardware connectivity for automotive bus networks.&lt;/p&gt;
&lt;h3 id=&#34;ports&#34;&gt;Ports&lt;/h3&gt;
&lt;p&gt;The health utility checks the TCP ports of specific services. This helps to identify if these services are up and running and potentiallyconnectable via external network interfaces.&lt;/p&gt;
&lt;h3 id=&#34;services-and-containers&#34;&gt;Services and Containers&lt;/h3&gt;
&lt;p&gt;The services category shows the status of required and optional containers. The required containers are supposed to be up and running for the SDV.EDGE stack to be correctly up and running. If any of these core components have a failed state, the functionality is impacted.&lt;/p&gt;
&lt;p&gt;The optional containers are for additional features and for example applications. These containers may not be necessary for each use case and hence will be marked as a warning if they are not up and running. The overview still helps to identify which containers are working properly.&lt;/p&gt;
&lt;h3 id=&#34;errors-warnings-failed-states&#34;&gt;Errors, Warnings, Failed states&lt;/h3&gt;
&lt;p&gt;When there are errors or warnings related to the status of SDV related components, the health utility will print out these error states, and if available also a more detailed error message.&lt;/p&gt;
&lt;p&gt;In the following example, the health utility helps the troubleshooting process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The container runtime is properly started: &amp;ldquo;Kanto CM&amp;rdquo; is OK in the &amp;ldquo;SDV Ports&amp;rdquo; section and the &amp;ldquo;container-management&amp;rdquo; service is OK in the &amp;ldquo;SDV Services&amp;rdquo; section&amp;quot;.&lt;/li&gt;
&lt;li&gt;Some containers are in state &amp;ldquo;OK&amp;rdquo;, which means there is no general issue with the container runtime.&lt;/li&gt;
&lt;li&gt;The cloud connector is in a &amp;ldquo;Stopped&amp;rdquo; state, which indicates that the user manually stopped the container by using &amp;ldquo;kanto-cm stop -n cloud-connector&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The sua container is in a &amp;ldquo;Exited&amp;rdquo; state, which indicates the process exited with an error code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;sdv-health-example-errors2.png&#34; alt=&#34;SDV Health Example Errors&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;kanto-user-interface&#34;&gt;Kanto User Interface&lt;/h2&gt;
&lt;p&gt;The KantoUI tool is a text-based user interface for conveniently managing containers in the Kanto Container Management. It supports simple navigation using keyboard and mouse to select a specific container. Commands to start, stop, remove and re-deploy containers are available along with a functionality to retrieve the application logs of a selected container.&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# kantui
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kantui-large.png&#34; alt=&#34;KantoUI&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Cheatsheet</title>
      <link>https://eclipse-leda.github.io/leda/docs/general-usage/cheatsheet/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/general-usage/cheatsheet/</guid>
      <description>
        
        
        &lt;p&gt;This cheat sheet gives you an overview of common command line commands to interact with the tools available on the quickstart image.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;General&lt;/td&gt;
&lt;td&gt;Overall info&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdv-health&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Show device info&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdv-device-info&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Device provisioning&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sdv-provision&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Switch Keyboard layout&lt;/td&gt;
&lt;td&gt;&lt;code&gt;loadkeys de&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System&lt;/td&gt;
&lt;td&gt;System load&lt;/td&gt;
&lt;td&gt;&lt;code&gt;htop&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Disk free&lt;/td&gt;
&lt;td&gt;&lt;code&gt;df -h -t ext4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Memory free&lt;/td&gt;
&lt;td&gt;&lt;code&gt;free -h&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;Interfaces summary&lt;/td&gt;
&lt;td&gt;&lt;code&gt;networkctl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ethernet status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;networkctl status enp0s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Routing table&lt;/td&gt;
&lt;td&gt;&lt;code&gt;route&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Active listeners&lt;/td&gt;
&lt;td&gt;&lt;code&gt;netstat -l -n -t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kanto-CM&lt;/td&gt;
&lt;td&gt;Show all containers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kanto-cm list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;User interface&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kantui&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Service logs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;journalctl -f -l -t container-management&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Auto deployments&lt;/td&gt;
&lt;td&gt;See &lt;code&gt;/data/var/containers/manifests/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Development deployments&lt;/td&gt;
&lt;td&gt;See &lt;code&gt;/data/var/containers/manifests_dev/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Restart a container&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kanto-cm restart -n &amp;lt;containername&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ContainerdD&lt;/td&gt;
&lt;td&gt;Show images&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ctr --address /data/run/containerd/containerd/containerd.sock --namespace=kanto-cm i ls&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Import local archive&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ctr --address /data/run/containerd/containerd.sock --namespace=kanto-cm i import &amp;lt;docker.tar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Prune containers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nerdctl system prune --all&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mosquitto&lt;/td&gt;
&lt;td&gt;Show all messages&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mosquitto_sub -v -t &#39;#&#39; -h localhost&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Send message&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mosquitto_pub -t &#39;&amp;lt;target/topic&amp;gt;&#39; -h localhost -m &#39;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;}&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Connectivity status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mosquitto_rr --quiet -h localhost -t &#39;edge/thing/request&#39; -e &#39;edge/thing/response&#39; -m &#39;&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RAUC Self Update&lt;/td&gt;
&lt;td&gt;Current boot status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rauc status&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Switch to other boot slot&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rauc status mark-active other&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CAN-Bus&lt;/td&gt;
&lt;td&gt;CAN Dump&lt;/td&gt;
&lt;td&gt;&lt;code&gt;candump -l any,0:0,#FFFFFFFF&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;running-custom-ad-hoc-containers&#34;&gt;Running custom ad-hoc containers&lt;/h2&gt;
&lt;p&gt;To install arbitrary containers, create the container using the &lt;code&gt;kanto-cm&lt;/code&gt; command line tool.
If it&amp;rsquo;s not a background service, but a cli tool, adding the &lt;code&gt;--t --i&lt;/code&gt; options allows console access.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# kanto-cm remove --name python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# kanto-cm create --name python --t --i --privileged docker.io/library/python:3.8.16-slim-bullseye
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bf9deca4-dbf1-4132-9ba7-e0f378bd34a7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@qemux86-64:~# kanto-cm start --name python --a --i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python 3.8.16 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;default, Jan &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt; 2023, 00:19:05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;GCC 10.2.1 20210110&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; on linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; or &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; more information.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; quit&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
